// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.3.2.0
//      SpecFlow Generator Version:2.3.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ePayments.Tests.Web.Tests.Financial
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.2.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("BankWiresIn")]
    [NUnit.Framework.CategoryAttribute("BankWiresIn")]
    public partial class BankWiresInFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "BankWiresIn.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "BankWiresIn", null, ProgrammingLanguage.CSharp, new string[] {
                        "BankWiresIn"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Входящий опознанный ваер создается в ручном режиме (POSITIVE)")]
        [NUnit.Framework.TestCaseAttribute("Qlsebyxguqodvirr", "110", "10", "5", "2581235e-989d-4909-8a5a-71d2778ec215", "F03ABC6E-25D6-4C98-A06F-A36B9B510BAF", "1049399", "99B4BB5F-2BE5-4481-9E78-F2E30339DC88", "406604", "666698", new string[] {
                "2150622"}, Category="2150622")]
        public virtual void ВходящийОпознанныйВаерСоздаетсяВРучномРежимеPOSITIVE(string reference, string paymentAmount, string bankCharge, string ourCharge, string receiverUserId, string systemPurseUserId, string userPurseId, string ePSUserId, string ePS_01Commissions, string ePS_04Terrorist, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Входящий опознанный ваер создается в ручном режиме (POSITIVE)", exampleTags);
#line 5
this.ScenarioSetup(scenarioInfo);
#line 11
  testRunner.Given("Set StartTime for DB search", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "isUndefined",
                        "reference",
                        "currency",
                        "bankCharge",
                        "ourCharge",
                        "wireServiceId",
                        "paymentAmount",
                        "paymentDetails",
                        "beneficiaryAccountNumber"});
            table1.AddRow(new string[] {
                        "false",
                        string.Format("{0}", reference),
                        "2",
                        "10",
                        "5",
                        "4",
                        "110",
                        "<Details>",
                        "001-049399"});
#line 13
  testRunner.Then("Operator creates incoming wire:", ((string)(null)), table1, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Scenario",
                        "Status",
                        "IsConfirmedPep"});
            table2.AddRow(new string[] {
                        "BankWireIn",
                        "Not Sanctioned",
                        "false"});
            table2.AddRow(new string[] {
                        "BankWireIn",
                        "Not Sanctioned",
                        "false"});
#line 17
  testRunner.Then(string.Format("User selects record in \'SanctionCheck\' where UserId =\"{0}\":", receiverUserId), ((string)(null)), table2, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Amount",
                        "DestinationId",
                        "Direction",
                        "UserId",
                        "CurrencyId",
                        "PurseId",
                        "RefundCount"});
            table3.AddRow(new string[] {
                        string.Format("{0}", paymentAmount),
                        "Refill",
                        "in",
                        string.Format("{0}", receiverUserId),
                        "Eur",
                        "1049399",
                        "0"});
            table3.AddRow(new string[] {
                        string.Format("{0}", ourCharge),
                        "BankWireIncommingCommission",
                        "out",
                        string.Format("{0}", receiverUserId),
                        "Eur",
                        string.Format("{0}", userPurseId),
                        "0"});
            table3.AddRow(new string[] {
                        string.Format("{0}", ourCharge),
                        "BankWireIncommingCommission",
                        "in",
                        string.Format("{0}", ePSUserId),
                        "Eur",
                        string.Format("{0}", ePS_01Commissions),
                        "0"});
            table3.AddRow(new string[] {
                        string.Format("{0}", bankCharge),
                        "BankComission",
                        "out",
                        string.Format("{0}", ePSUserId),
                        "Eur",
                        string.Format("{0}", ePS_01Commissions),
                        "0"});
#line 24
 testRunner.Then("User selects records in \'TPurseTransactions\' for incoming wire where BeneficiaryA" +
                    "ccountNumber=\"001-049399\":", ((string)(null)), table3, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "CurrencyId",
                        "Direction",
                        "Destination",
                        "UserId",
                        "Amount",
                        "AmountInUsd",
                        "Product",
                        "ProductType"});
            table4.AddRow(new string[] {
                        "Eur",
                        "In",
                        "IncomingBankWire",
                        string.Format("{0}", receiverUserId),
                        "105",
                        "**Generated**",
                        "001-049399",
                        "Epid"});
#line 31
   testRunner.Then(string.Format("User selects records in \'LimitRecords\' by last OperationGuid where UserId=\"{0}\":", receiverUserId), ((string)(null)), table4, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Amount",
                        "CurrencyId",
                        "ExternalServiceId",
                        "IsIncomingTransaction"});
            table5.AddRow(new string[] {
                        string.Format("{0}", paymentAmount),
                        "Eur",
                        "Rietumu",
                        "true"});
            table5.AddRow(new string[] {
                        string.Format("{0}", bankCharge),
                        "Eur",
                        "Rietumu",
                        "false"});
#line 35
   testRunner.Then("User selects records in \'TExternalTransactions\' for UndefinedWire", ((string)(null)), table5, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Входящий опознанный ваер создается в ручном режиме - Террорист(true positive)")]
        [NUnit.Framework.TestCaseAttribute("Qlsebyxguqodvirr", "110", "10", "5", "2581235e-989d-4909-8a5a-71d2778ec215", "F03ABC6E-25D6-4C98-A06F-A36B9B510BAF", "1049399", "99B4BB5F-2BE5-4481-9E78-F2E30339DC88", "406604", "666698", new string[] {
                "3044422"}, Category="3044422")]
        public virtual void ВходящийОпознанныйВаерСоздаетсяВРучномРежиме_ТеррористTruePositive(string reference, string paymentAmount, string bankCharge, string ourCharge, string receiverUserId, string systemPurseUserId, string userPurseId, string ePSUserId, string ePS_01Commissions, string ePS_04Terrorist, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Входящий опознанный ваер создается в ручном режиме - Террорист(true positive)", exampleTags);
#line 49
this.ScenarioSetup(scenarioInfo);
#line 50
   testRunner.Given("Set StartTime for DB search", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "isUndefined",
                        "reference",
                        "currency",
                        "bankCharge",
                        "ourCharge",
                        "wireServiceId",
                        "paymentAmount",
                        "paymentDetails",
                        "beneficiaryAccountNumber"});
            table6.AddRow(new string[] {
                        "false",
                        string.Format("{0}", reference),
                        "2",
                        "10",
                        "5",
                        "4",
                        "110",
                        "<Details>",
                        "001-049399"});
#line 53
   testRunner.Then("Operator creates incoming wire from \'Alexey Milchakov\':", ((string)(null)), table6, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Scenario",
                        "Status",
                        "IsConfirmedPep"});
            table7.AddRow(new string[] {
                        "BankWireIn",
                        "InProcess",
                        "false"});
            table7.AddRow(new string[] {
                        "BankWireIn",
                        "Not Sanctioned",
                        "false"});
#line 58
   testRunner.Then(string.Format("User selects record in \'SanctionCheck\' where UserId =\"{0}\":", receiverUserId), ((string)(null)), table7, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Amount",
                        "DestinationId",
                        "Direction",
                        "UserId",
                        "CurrencyId",
                        "PurseId",
                        "RefundCount"});
            table8.AddRow(new string[] {
                        string.Format("{0}", paymentAmount),
                        "Refill",
                        "in",
                        string.Format("{0}", systemPurseUserId),
                        "Eur",
                        string.Format("{0}", ePS_04Terrorist),
                        "0"});
            table8.AddRow(new string[] {
                        string.Format("{0}", bankCharge),
                        "BankComission",
                        "out",
                        string.Format("{0}", ePSUserId),
                        "Eur",
                        string.Format("{0}", ePS_01Commissions),
                        "0"});
#line 64
   testRunner.Then("User selects records in \'TPurseTransactions\' for incoming wire where BeneficiaryA" +
                    "ccountNumber=\"001-049399\":", ((string)(null)), table8, "Then ");
#line 69
   testRunner.Then("No records in \'LimitRecords\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 71
 testRunner.Then("No records in \'TExternalTransactions\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 75
 testRunner.Then(string.Format("Send CA true positive callback for reference \'{0}\'", reference), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Scenario",
                        "Status",
                        "IsConfirmedPep"});
            table9.AddRow(new string[] {
                        "BankWireIn",
                        "Confirmed",
                        "false"});
            table9.AddRow(new string[] {
                        "BankWireIn",
                        "Not Sanctioned",
                        "false"});
#line 76
    testRunner.Then(string.Format("User selects record in \'SanctionCheck\' where UserId =\"{0}\":", receiverUserId), ((string)(null)), table9, "Then ");
#line 81
 testRunner.Given("Reset checkers", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Amount",
                        "DestinationId",
                        "Direction",
                        "UserId",
                        "CurrencyId",
                        "PurseId",
                        "RefundCount"});
            table10.AddRow(new string[] {
                        string.Format("{0}", paymentAmount),
                        "Refill",
                        "in",
                        string.Format("{0}", systemPurseUserId),
                        "Eur",
                        string.Format("{0}", ePS_04Terrorist),
                        "0"});
            table10.AddRow(new string[] {
                        string.Format("{0}", bankCharge),
                        "BankComission",
                        "out",
                        string.Format("{0}", ePSUserId),
                        "Eur",
                        string.Format("{0}", ePS_01Commissions),
                        "0"});
#line 83
   testRunner.Then("User selects records in \'TPurseTransactions\' for incoming wire where BeneficiaryA" +
                    "ccountNumber=\"001-049399\":", ((string)(null)), table10, "Then ");
#line 88
   testRunner.Then("No records in \'LimitRecords\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 90
 testRunner.Then("No records in \'TExternalTransactions\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Входящий опознанный ваер создается в ручном режиме - РЕР")]
        [NUnit.Framework.TestCaseAttribute("Qlsebyxguqodvirr", "110", "10", "5", "2581235e-989d-4909-8a5a-71d2778ec215", "F03ABC6E-25D6-4C98-A06F-A36B9B510BAF", "1049399", "99B4BB5F-2BE5-4481-9E78-F2E30339DC88", "406604", "666698", new string[] {
                "3044421"}, Category="3044421")]
        public virtual void ВходящийОпознанныйВаерСоздаетсяВРучномРежиме_РЕР(string reference, string paymentAmount, string bankCharge, string ourCharge, string receiverUserId, string systemPurseUserId, string userPurseId, string ePSUserId, string ePS_01Commissions, string ePS_04Terrorist, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Входящий опознанный ваер создается в ручном режиме - РЕР", exampleTags);
#line 100
this.ScenarioSetup(scenarioInfo);
#line 101
 testRunner.Given("Set StartTime for DB search", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "isUndefined",
                        "reference",
                        "currency",
                        "bankCharge",
                        "ourCharge",
                        "wireServiceId",
                        "paymentAmount",
                        "paymentDetails",
                        "beneficiaryAccountNumber"});
            table11.AddRow(new string[] {
                        "false",
                        string.Format("{0}", reference),
                        "2",
                        string.Format("{0}", bankCharge),
                        string.Format("{0}", ourCharge),
                        "4",
                        string.Format("{0}", paymentAmount),
                        "autotest details",
                        "001-049399"});
#line 104
   testRunner.Then("Operator creates incoming wire from \'Alexey Milchakov\':", ((string)(null)), table11, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Scenario",
                        "Status",
                        "IsConfirmedPep"});
            table12.AddRow(new string[] {
                        "BankWireIn",
                        "InProcess",
                        "false"});
            table12.AddRow(new string[] {
                        "BankWireIn",
                        "Not Sanctioned",
                        "false"});
#line 109
   testRunner.Then(string.Format("User selects record in \'SanctionCheck\' where UserId =\"{0}\":", receiverUserId), ((string)(null)), table12, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Amount",
                        "DestinationId",
                        "Direction",
                        "UserId",
                        "CurrencyId",
                        "PurseId",
                        "RefundCount"});
            table13.AddRow(new string[] {
                        string.Format("{0}", paymentAmount),
                        "Refill",
                        "in",
                        string.Format("{0}", systemPurseUserId),
                        "Eur",
                        string.Format("{0}", ePS_04Terrorist),
                        "0"});
            table13.AddRow(new string[] {
                        string.Format("{0}", bankCharge),
                        "BankComission",
                        "out",
                        string.Format("{0}", ePSUserId),
                        "Eur",
                        string.Format("{0}", ePS_01Commissions),
                        "0"});
#line 116
   testRunner.Then("User selects records in \'TPurseTransactions\' for incoming wire where BeneficiaryA" +
                    "ccountNumber=\"001-049399\":", ((string)(null)), table13, "Then ");
#line 120
 testRunner.Then("No records in \'LimitRecords\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 122
 testRunner.Then("No records in \'TExternalTransactions\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 126
  testRunner.Then(string.Format("Send CA PEP positive callback for reference \'{0}\'", reference), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Scenario",
                        "Status",
                        "IsConfirmedPep"});
            table14.AddRow(new string[] {
                        "BankWireIn",
                        "Confirmed",
                        "true"});
            table14.AddRow(new string[] {
                        "BankWireIn",
                        "Not Sanctioned",
                        "false"});
#line 128
  testRunner.Then(string.Format("User selects record in \'SanctionCheck\' where UserId =\"{0}\":", receiverUserId), ((string)(null)), table14, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Amount",
                        "DestinationId",
                        "Direction",
                        "UserId",
                        "CurrencyId",
                        "PurseId",
                        "RefundCount"});
            table15.AddRow(new string[] {
                        string.Format("{0}", paymentAmount),
                        "Refill",
                        "out",
                        string.Format("{0}", systemPurseUserId),
                        "Eur",
                        string.Format("{0}", ePS_04Terrorist),
                        "0"});
            table15.AddRow(new string[] {
                        string.Format("{0}", paymentAmount),
                        "Refill",
                        "in",
                        string.Format("{0}", receiverUserId),
                        "Eur",
                        string.Format("{0}", userPurseId),
                        "0"});
            table15.AddRow(new string[] {
                        string.Format("{0}", ourCharge),
                        "BankWireIncommingCommission",
                        "out",
                        string.Format("{0}", receiverUserId),
                        "Eur",
                        string.Format("{0}", userPurseId),
                        "0"});
            table15.AddRow(new string[] {
                        string.Format("{0}", ourCharge),
                        "BankWireIncommingCommission",
                        "in",
                        string.Format("{0}", ePSUserId),
                        "Eur",
                        string.Format("{0}", ePS_01Commissions),
                        "0"});
#line 135
   testRunner.Then("User selects records in \'TPurseTransactions\' for incoming wire where BeneficiaryA" +
                    "ccountNumber=\"001-049399\":", ((string)(null)), table15, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "CurrencyId",
                        "Direction",
                        "Destination",
                        "UserId",
                        "Amount",
                        "AmountInUsd",
                        "Product",
                        "ProductType"});
            table16.AddRow(new string[] {
                        "Eur",
                        "In",
                        "IncomingBankWire",
                        string.Format("{0}", receiverUserId),
                        "110",
                        "**Generated**",
                        "001-049399",
                        "Epid"});
#line 143
 testRunner.Then(string.Format("User selects records in \'LimitRecords\' by last OperationGuid where UserId=\"{0}\":", receiverUserId), ((string)(null)), table16, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Входящий опознанный ваер создается в ручном режиме - Террорист(false positive)")]
        [NUnit.Framework.TestCaseAttribute("Qlsebyxguqodvirr", "110", "10", "5", "2581235e-989d-4909-8a5a-71d2778ec215", "F03ABC6E-25D6-4C98-A06F-A36B9B510BAF", "1049399", "99B4BB5F-2BE5-4481-9E78-F2E30339DC88", "406604", "666698", new string[] {
                "3044420"}, Category="3044420")]
        public virtual void ВходящийОпознанныйВаерСоздаетсяВРучномРежиме_ТеррористFalsePositive(string reference, string paymentAmount, string bankCharge, string ourCharge, string receiverUserId, string systemPurseUserId, string userPurseId, string ePSUserId, string ePS_01Commissions, string ePS_04Terrorist, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Входящий опознанный ваер создается в ручном режиме - Террорист(false positive)", exampleTags);
#line 162
this.ScenarioSetup(scenarioInfo);
#line 163
 testRunner.Given("Set StartTime for DB search", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "isUndefined",
                        "reference",
                        "currency",
                        "bankCharge",
                        "ourCharge",
                        "wireServiceId",
                        "paymentAmount",
                        "paymentDetails",
                        "beneficiaryAccountNumber"});
            table17.AddRow(new string[] {
                        "false",
                        string.Format("{0}", reference),
                        "2",
                        string.Format("{0}", bankCharge),
                        string.Format("{0}", ourCharge),
                        "4",
                        string.Format("{0}", paymentAmount),
                        "autotest details",
                        "001-049399"});
#line 166
   testRunner.Then("Operator creates incoming wire from \'Alexey Milchakov\':", ((string)(null)), table17, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "Scenario",
                        "Status",
                        "IsConfirmedPep"});
            table18.AddRow(new string[] {
                        "BankWireIn",
                        "InProcess",
                        "false"});
            table18.AddRow(new string[] {
                        "BankWireIn",
                        "Not Sanctioned",
                        "false"});
#line 171
   testRunner.Then(string.Format("User selects record in \'SanctionCheck\' where UserId =\"{0}\":", receiverUserId), ((string)(null)), table18, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "Amount",
                        "DestinationId",
                        "Direction",
                        "UserId",
                        "CurrencyId",
                        "PurseId",
                        "RefundCount"});
            table19.AddRow(new string[] {
                        string.Format("{0}", paymentAmount),
                        "Refill",
                        "in",
                        string.Format("{0}", systemPurseUserId),
                        "Eur",
                        string.Format("{0}", ePS_04Terrorist),
                        "0"});
            table19.AddRow(new string[] {
                        string.Format("{0}", bankCharge),
                        "BankComission",
                        "out",
                        string.Format("{0}", ePSUserId),
                        "Eur",
                        string.Format("{0}", ePS_01Commissions),
                        "0"});
#line 178
   testRunner.Then("User selects records in \'TPurseTransactions\' for incoming wire where BeneficiaryA" +
                    "ccountNumber=\"001-049399\":", ((string)(null)), table19, "Then ");
#line 182
  testRunner.Then("No records in \'LimitRecords\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 184
 testRunner.Then("No records in \'TExternalTransactions\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 188
  testRunner.Then(string.Format("Send CA false positive callback for reference \'{0}\'", reference), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "Scenario",
                        "Status",
                        "IsConfirmedPep"});
            table20.AddRow(new string[] {
                        "BankWireIn",
                        "Not Sanctioned",
                        "false"});
            table20.AddRow(new string[] {
                        "BankWireIn",
                        "Not Sanctioned",
                        "false"});
#line 190
  testRunner.Then(string.Format("User selects record in \'SanctionCheck\' where UserId =\"{0}\":", receiverUserId), ((string)(null)), table20, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "Amount",
                        "DestinationId",
                        "Direction",
                        "UserId",
                        "CurrencyId",
                        "PurseId",
                        "RefundCount"});
            table21.AddRow(new string[] {
                        string.Format("{0}", paymentAmount),
                        "Refill",
                        "out",
                        string.Format("{0}", systemPurseUserId),
                        "Eur",
                        string.Format("{0}", ePS_04Terrorist),
                        "0"});
            table21.AddRow(new string[] {
                        string.Format("{0}", paymentAmount),
                        "Refill",
                        "in",
                        string.Format("{0}", receiverUserId),
                        "Eur",
                        string.Format("{0}", userPurseId),
                        "0"});
            table21.AddRow(new string[] {
                        string.Format("{0}", ourCharge),
                        "BankWireIncommingCommission",
                        "out",
                        string.Format("{0}", receiverUserId),
                        "Eur",
                        string.Format("{0}", userPurseId),
                        "0"});
            table21.AddRow(new string[] {
                        string.Format("{0}", ourCharge),
                        "BankWireIncommingCommission",
                        "in",
                        string.Format("{0}", ePSUserId),
                        "Eur",
                        string.Format("{0}", ePS_01Commissions),
                        "0"});
#line 197
   testRunner.Then("User selects records in \'TPurseTransactions\' for incoming wire where BeneficiaryA" +
                    "ccountNumber=\"001-049399\":", ((string)(null)), table21, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "CurrencyId",
                        "Direction",
                        "Destination",
                        "UserId",
                        "Amount",
                        "AmountInUsd",
                        "Product",
                        "ProductType"});
            table22.AddRow(new string[] {
                        "Eur",
                        "In",
                        "IncomingBankWire",
                        string.Format("{0}", receiverUserId),
                        "110",
                        "**Generated**",
                        "001-049399",
                        "Epid"});
#line 204
 testRunner.Then(string.Format("User selects records in \'LimitRecords\' by last OperationGuid where UserId=\"{0}\":", receiverUserId), ((string)(null)), table22, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Входящий неопознанный ваер создается в автоматическом режиме (POSITIVE)")]
        [NUnit.Framework.TestCaseAttribute("asdasdwasdzxcvbn9999", "1231", "1", "F03ABC6E-25D6-4C98-A06F-A36B9B510BAF", "99B4BB5F-2BE5-4481-9E78-F2E30339DC88", "406604", "1101", "000-001101", new string[] {
                "2150623"}, Category="2150623")]
        public virtual void ВходящийНеопознанныйВаерСоздаетсяВАвтоматическомРежимеPOSITIVE(string reference, string paymentAmount, string bankCharge, string systemPurseUserId, string ePSUserId, string ePS_01Commissions, string ePS_03UndefinedWiresPurse, string ePS_03UndefinedWiresPurseFull, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Входящий неопознанный ваер создается в автоматическом режиме (POSITIVE)", exampleTags);
#line 223
  this.ScenarioSetup(scenarioInfo);
#line 228
  testRunner.Given("Set StartTime for DB search", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "Reference",
                        "SupportUserId",
                        "SenderName",
                        "BeneficiaryAccountNumber",
                        "PaymentAmount",
                        "OurCharge",
                        "BankCharge",
                        "CurrencyId",
                        "PaymentDetails",
                        "WireServiceId"});
            table23.AddRow(new string[] {
                        string.Format("{0}", reference),
                        "403d5963-b904-4a78-a51b-eab922bc5640",
                        "Ilya Malchev",
                        string.Format("{0}", ePS_03UndefinedWiresPurseFull),
                        "1231",
                        "",
                        "1",
                        "2",
                        "details",
                        "4"});
#line 230
  testRunner.Then("Create BankWireInTemp and Accept with Type=Undefined:", ((string)(null)), table23, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "Scenario",
                        "Status",
                        "IsConfirmedPep"});
            table24.AddRow(new string[] {
                        "BankWireIn",
                        "Not Sanctioned",
                        "false"});
            table24.AddRow(new string[] {
                        "BankWireIn",
                        "Not Sanctioned",
                        "false"});
#line 235
  testRunner.Then(string.Format("User selects record in \'SanctionCheck\' where UserId =\"{0}\":", systemPurseUserId), ((string)(null)), table24, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "Amount",
                        "DestinationId",
                        "Direction",
                        "UserId",
                        "CurrencyId",
                        "PurseId",
                        "RefundCount"});
            table25.AddRow(new string[] {
                        string.Format("{0}", paymentAmount),
                        "Refill",
                        "in",
                        string.Format("{0}", systemPurseUserId),
                        "Eur",
                        string.Format("{0}", ePS_03UndefinedWiresPurse),
                        "0"});
            table25.AddRow(new string[] {
                        string.Format("{0}", bankCharge),
                        "BankComission",
                        "out",
                        string.Format("{0}", ePSUserId),
                        "Eur",
                        string.Format("{0}", ePS_01Commissions),
                        "0"});
#line 241
 testRunner.Then(string.Format("User selects records in \'TPurseTransactions\' for incoming wire where BeneficiaryA" +
                        "ccountNumber=\"{0}\":", ePS_03UndefinedWiresPurseFull), ((string)(null)), table25, "Then ");
#line 246
     testRunner.Then("No records in \'LimitRecords\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "Amount",
                        "CurrencyId",
                        "ExternalServiceId",
                        "IsIncomingTransaction"});
            table26.AddRow(new string[] {
                        string.Format("{0}", paymentAmount),
                        "Eur",
                        "Rietumu",
                        "true"});
            table26.AddRow(new string[] {
                        string.Format("{0}", bankCharge),
                        "Eur",
                        "Rietumu",
                        "false"});
#line 248
   testRunner.Then("User selects records in \'TExternalTransactions\' for UndefinedWire", ((string)(null)), table26, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Входящий неопознанный ваер создается в автоматическом режиме- Террорист;(true pos" +
            "itive)")]
        [NUnit.Framework.TestCaseAttribute("asdasdwasdzxcvbn9999", "1231", "1", "5", "F03ABC6E-25D6-4C98-A06F-A36B9B510BAF", "99B4BB5F-2BE5-4481-9E78-F2E30339DC88", "406604", "1101", "000-001101", "666698", new string[] {
                "3050378"}, Category="3050378")]
        public virtual void ВходящийНеопознанныйВаерСоздаетсяВАвтоматическомРежиме_ТеррористTruePositive(string reference, string paymentAmount, string bankCharge, string ourCharge, string systemPurseUserId, string ePSUserId, string ePS_01Commissions, string ePS_03UndefinedWiresPurse, string ePS_03UndefinedWiresPurseFull, string ePS_04Terrorist, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Входящий неопознанный ваер создается в автоматическом режиме- Террорист;(true pos" +
                    "itive)", exampleTags);
#line 262
  this.ScenarioSetup(scenarioInfo);
#line 267
  testRunner.Given("Set StartTime for DB search", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        "Reference",
                        "SupportUserId",
                        "SenderName",
                        "BeneficiaryAccountNumber",
                        "PaymentAmount",
                        "OurCharge",
                        "BankCharge",
                        "CurrencyId",
                        "PaymentDetails",
                        "WireServiceId"});
            table27.AddRow(new string[] {
                        string.Format("{0}", reference),
                        "403d5963-b904-4a78-a51b-eab922bc5640",
                        "Alexey Milchakov",
                        string.Format("{0}", ePS_03UndefinedWiresPurseFull),
                        "1231",
                        "5",
                        "1",
                        "2",
                        "details",
                        "4"});
#line 269
  testRunner.Then("Create BankWireInTemp and Accept with Type=Undefined:", ((string)(null)), table27, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                        "Scenario",
                        "Status",
                        "IsConfirmedPep"});
            table28.AddRow(new string[] {
                        "BankWireIn",
                        "InProcess",
                        "false"});
            table28.AddRow(new string[] {
                        "BankWireIn",
                        "Not Sanctioned",
                        "false"});
#line 273
  testRunner.Then(string.Format("User selects record in \'SanctionCheck\' where UserId =\"{0}\":", systemPurseUserId), ((string)(null)), table28, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                        "Amount",
                        "DestinationId",
                        "Direction",
                        "UserId",
                        "CurrencyId",
                        "PurseId",
                        "RefundCount"});
            table29.AddRow(new string[] {
                        string.Format("{0}", paymentAmount),
                        "Refill",
                        "in",
                        string.Format("{0}", systemPurseUserId),
                        "Eur",
                        string.Format("{0}", ePS_04Terrorist),
                        "0"});
            table29.AddRow(new string[] {
                        string.Format("{0}", bankCharge),
                        "BankComission",
                        "out",
                        string.Format("{0}", ePSUserId),
                        "Eur",
                        string.Format("{0}", ePS_01Commissions),
                        "0"});
#line 280
 testRunner.Then(string.Format("User selects records in \'TPurseTransactions\' for incoming wire where BeneficiaryA" +
                        "ccountNumber=\"{0}\":", ePS_03UndefinedWiresPurseFull), ((string)(null)), table29, "Then ");
#line 285
   testRunner.Then("No records in \'LimitRecords\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 287
 testRunner.Then("No records in \'TExternalTransactions\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 291
  testRunner.Then(string.Format("Send CA true positive callback for reference \'{0}\'", reference), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                        "Scenario",
                        "Status",
                        "IsConfirmedPep"});
            table30.AddRow(new string[] {
                        "BankWireIn",
                        "Confirmed",
                        "false"});
            table30.AddRow(new string[] {
                        "BankWireIn",
                        "Not Sanctioned",
                        "false"});
#line 293
    testRunner.Then(string.Format("User selects record in \'SanctionCheck\' where UserId =\"{0}\":", systemPurseUserId), ((string)(null)), table30, "Then ");
#line 298
 testRunner.Given("Reset checkers", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                        "Amount",
                        "DestinationId",
                        "Direction",
                        "UserId",
                        "CurrencyId",
                        "PurseId",
                        "RefundCount"});
            table31.AddRow(new string[] {
                        string.Format("{0}", paymentAmount),
                        "Refill",
                        "in",
                        string.Format("{0}", systemPurseUserId),
                        "Eur",
                        string.Format("{0}", ePS_04Terrorist),
                        "0"});
            table31.AddRow(new string[] {
                        string.Format("{0}", bankCharge),
                        "BankComission",
                        "out",
                        string.Format("{0}", ePSUserId),
                        "Eur",
                        string.Format("{0}", ePS_01Commissions),
                        "0"});
#line 300
   testRunner.Then(string.Format("User selects records in \'TPurseTransactions\' for incoming wire where BeneficiaryA" +
                        "ccountNumber=\"{0}\":", ePS_03UndefinedWiresPurseFull), ((string)(null)), table31, "Then ");
#line 305
    testRunner.Then("No records in \'LimitRecords\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 307
 testRunner.Then("No records in \'TExternalTransactions\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Входящий неопознанный ваер создается в автоматическом режиме- PEP / Terrorist(fal" +
            "se positive)")]
        [NUnit.Framework.TestCaseAttribute("PEP", "nikwire9", "1231", "1", "5", "F03ABC6E-25D6-4C98-A06F-A36B9B510BAF", "99B4BB5F-2BE5-4481-9E78-F2E30339DC88", "406604", "1101", "000-001101", "666698", new string[] {
                "3050382"}, Category="3050382")]
        [NUnit.Framework.TestCaseAttribute("false", "nikwire9", "1231", "1", "5", "F03ABC6E-25D6-4C98-A06F-A36B9B510BAF", "99B4BB5F-2BE5-4481-9E78-F2E30339DC88", "406604", "1101", "000-001101", "666698", new string[] {
                "3053087"}, Category="3053087")]
        public virtual void ВходящийНеопознанныйВаерСоздаетсяВАвтоматическомРежиме_PEPTerroristFalsePositive(string responseFromCA, string reference, string paymentAmount, string bankCharge, string ourCharge, string systemPurseUserId, string ePSUserId, string ePS_01Commissions, string ePS_03UndefinedWiresPurse, string ePS_03UndefinedWiresPurseFull, string ePS_04Terrorist, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Входящий неопознанный ваер создается в автоматическом режиме- PEP / Terrorist(fal" +
                    "se positive)", exampleTags);
#line 318
  this.ScenarioSetup(scenarioInfo);
#line 323
  testRunner.Given("Set StartTime for DB search", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                        "Reference",
                        "SupportUserId",
                        "SenderName",
                        "BeneficiaryAccountNumber",
                        "PaymentAmount",
                        "OurCharge",
                        "BankCharge",
                        "CurrencyId",
                        "PaymentDetails",
                        "WireServiceId"});
            table32.AddRow(new string[] {
                        string.Format("{0}", reference),
                        "403d5963-b904-4a78-a51b-eab922bc5640",
                        "Alexey Milchakov",
                        string.Format("{0}", ePS_03UndefinedWiresPurseFull),
                        "1231",
                        "",
                        "1",
                        "2",
                        "details",
                        "4"});
#line 325
  testRunner.Then("Create BankWireInTemp and Accept with Type=Undefined:", ((string)(null)), table32, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                        "Scenario",
                        "Status",
                        "IsConfirmedPep"});
            table33.AddRow(new string[] {
                        "BankWireIn",
                        "InProcess",
                        "false"});
            table33.AddRow(new string[] {
                        "BankWireIn",
                        "Not Sanctioned",
                        "false"});
#line 329
 testRunner.Then(string.Format("User selects record in \'SanctionCheck\' where UserId =\"{0}\":", systemPurseUserId), ((string)(null)), table33, "Then ");
#line 335
 testRunner.Then(string.Format("Send CA {0} positive callback for reference \'{1}\'", responseFromCA, reference), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                        "Amount",
                        "DestinationId",
                        "Direction",
                        "UserId",
                        "CurrencyId",
                        "PurseId",
                        "RefundCount"});
            table34.AddRow(new string[] {
                        string.Format("{0}", paymentAmount),
                        "Refill",
                        "in",
                        string.Format("{0}", systemPurseUserId),
                        "Eur",
                        string.Format("{0}", ePS_04Terrorist),
                        "0"});
            table34.AddRow(new string[] {
                        string.Format("{0}", bankCharge),
                        "BankComission",
                        "out",
                        string.Format("{0}", ePSUserId),
                        "Eur",
                        string.Format("{0}", ePS_01Commissions),
                        "0"});
            table34.AddRow(new string[] {
                        string.Format("{0}", paymentAmount),
                        "Refill",
                        "out",
                        string.Format("{0}", systemPurseUserId),
                        "Eur",
                        string.Format("{0}", ePS_04Terrorist),
                        "0"});
            table34.AddRow(new string[] {
                        string.Format("{0}", paymentAmount),
                        "Refill",
                        "in",
                        string.Format("{0}", systemPurseUserId),
                        "Eur",
                        "1101",
                        "0"});
#line 339
 testRunner.Then(string.Format("User selects records in \'TPurseTransactions\' for incoming wire where BeneficiaryA" +
                        "ccountNumber=\"{0}\":", ePS_03UndefinedWiresPurseFull), ((string)(null)), table34, "Then ");
#line 346
  testRunner.Then("No records in \'LimitRecords\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 348
 testRunner.Then("No records in \'TExternalTransactions\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion

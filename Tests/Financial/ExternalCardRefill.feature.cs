// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.3.2.0
//      SpecFlow Generator Version:2.3.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ePayments.Tests.Web.Tests.Financial
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.2.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("ExternalCardRefill")]
    [NUnit.Framework.CategoryAttribute("ExternalCardRefill")]
    public partial class ExternalCardRefillFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ExternalCardRefill.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "ExternalCardRefill", null, ProgrammingLanguage.CSharp, new string[] {
                        "ExternalCardRefill"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("ФИЗ RUB (Воронеж) (конвертация USD-RUB)")]
        [NUnit.Framework.TestCaseAttribute("4244362761063678", "10.00", "3.50", "13.50", "+70045254888", "a5a34987-6189-4a4c-8229-d9f2ac0ad001", "72621010Abac", "F03ABC6E-25D6-4C98-A06F-A36B9B510BAF", "1697822", "001-697822", "144177", "122122", "406604", "99B4BB5F-2BE5-4481-9E78-F2E30339DC88", new string[] {
                "135426",
                "RefillExternalCardFromPurse_BankQiwi_OFF"}, Category="135426,RefillExternalCardFromPurse_BankQiwi_OFF")]
        public virtual void ФИЗRUBВоронежКонвертацияUSD_RUB(string pANReceiver, string amount, string comission, string amountComission, string user, string userId, string password, string systemPurseUserId, string userPurseId, string purseId, string ePS_02TemporaryStoragePurse, string ePS_06Exchanges, string ePS_01Commissions, string ePSUserId, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ФИЗ RUB (Воронеж) (конвертация USD-RUB)", exampleTags);
#line 5
this.ScenarioSetup(scenarioInfo);
#line 7
 testRunner.Given("User goes to SignIn page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 8
 testRunner.Given(string.Format("User signin \"Epayments\" with \"{0}\" password \"{1}\"", user, password), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
 testRunner.Given("User see Account Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 11
 testRunner.Given("User clicks on Перевести menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 12
 testRunner.Given("User clicks on \"На банковскую карту\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 13
 testRunner.Then("Section \'Amount including fees\' is: $ 0.00 (Комиссия: $ 0.00)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 15
 testRunner.Then(string.Format("\'Номер банковской карты\' set to \'{0}\'", pANReceiver), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 16
 testRunner.Then("\'Владелец\' set to \'nik ivanov\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 17
 testRunner.Then(string.Format("\'Отдаваемая сумма\' set to \'{0}\'", amount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 18
 testRunner.Then(string.Format("Section \'Amount including fees\' is: $ {0} (Комиссия: $ {1})", amountComission, comission), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column1",
                        "Column2"});
            table1.AddRow(new string[] {
                        "Минимальная сумма перевода:",
                        "₽ 500.00"});
            table1.AddRow(new string[] {
                        "Максимальная сумма перевода:",
                        "₽ 75 000.00"});
            table1.AddRow(new string[] {
                        "Комиссия:",
                        "13%min $ 3.50"});
#line 20
 testRunner.Given("User see limits table", ((string)(null)), table1, "Given ");
#line 25
 testRunner.Then("Currency rate placeholder appears", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 26
 testRunner.Given("User clicks on \"Далее\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column1",
                        "Column2"});
            table2.AddRow(new string[] {
                        "Отправитель",
                        string.Format("USD, e-Wallet {0}", purseId)});
            table2.AddRow(new string[] {
                        "Банковская карта",
                        "VISA, x3678"});
            table2.AddRow(new string[] {
                        "Отдаваемая сумма",
                        string.Format("$ {0}", amount)});
            table2.AddRow(new string[] {
                        "Комиссия",
                        string.Format("$ {0}", comission)});
            table2.AddRow(new string[] {
                        "Сумма с комиссией",
                        string.Format("$ {0}", amountComission)});
            table2.AddRow(new string[] {
                        "Курс обмена",
                        "$ 1.00 = ₽ **rateWM**"});
            table2.AddRow(new string[] {
                        "Получаемая сумма",
                        "₽ **amount * rate**"});
#line 28
 testRunner.Given("User see table", ((string)(null)), table2, "Given ");
#line 38
 testRunner.Given("Set StartTime for DB search", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 39
 testRunner.Given("User clicks on button \"Подтвердить\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "OperationType",
                        "Recipient",
                        "UserId",
                        "IsUsed"});
            table3.AddRow(new string[] {
                        "MassPayment",
                        string.Format("{0}", user),
                        string.Format("{0}", userId),
                        "false"});
#line 40
 testRunner.Then("User type SMS sent to:", ((string)(null)), table3, "Then ");
#line 43
 testRunner.Then("Memorize eWallet section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 44
 testRunner.Given("User clicks on \"Оплатить\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 45
 testRunner.Then("User gets message \"Обработка платежа займет несколько минут. Дождитесь результата" +
                    " перевода или продолжите работу в личном кабинете\" on Multiform", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 48
 testRunner.Then("User gets message \"Платеж успешно отправлен\" on Multiform", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 49
 testRunner.Then("Make screenshot", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 51
 testRunner.Given("User closes multiform by clicking on \"Закрыть\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 52
 testRunner.Then("Redirected to /#/transfer/", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "USD",
                        "EUR",
                        "RUB"});
            table4.AddRow(new string[] {
                        string.Format("-{0}", amountComission),
                        "0.00",
                        "0.00"});
#line 53
 testRunner.Then("eWallet updated sections are:", ((string)(null)), table4, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "OperationTypeId",
                        "Amount",
                        "Fee"});
            table5.AddRow(new string[] {
                        "61",
                        string.Format("{0}", amount),
                        string.Format("{0}", comission)});
#line 59
 testRunner.Then("Preparing records in \'InvoicePositions\':", ((string)(null)), table5, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "State",
                        "Details",
                        "SenderSystemId",
                        "SenderIdentity",
                        "ReceiverSystemId",
                        "ReceiverIdentity",
                        "CurrencyId",
                        "PaymentSource",
                        "ReceiverIdentityType",
                        "UserId"});
            table6.AddRow(new string[] {
                        "Successed",
                        "",
                        "WaveCrest",
                        string.Format("{0}", purseId),
                        "BankVoronezh",
                        "4244 36** **** 3678",
                        "Usd",
                        "EWallet",
                        "Purse",
                        string.Format("{0}", userId)});
#line 64
 testRunner.Then(string.Format("User selects last record in \'Invoices and InvoicePositions\' where UserId=\"{0}\":", userId), ((string)(null)), table6, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Amount",
                        "DestinationId",
                        "Direction",
                        "UserId",
                        "CurrencyId",
                        "PurseId",
                        "RefundCount"});
            table7.AddRow(new string[] {
                        string.Format("{0}", amount),
                        "RefillExternalCardFromPurse",
                        "out",
                        string.Format("{0}", userId),
                        "Usd",
                        string.Format("{0}", userPurseId),
                        "0"});
            table7.AddRow(new string[] {
                        string.Format("{0}", amount),
                        "RefillExternalCardFromPurse",
                        "in",
                        string.Format("{0}", ePSUserId),
                        "Usd",
                        string.Format("{0}", ePS_02TemporaryStoragePurse),
                        "0"});
            table7.AddRow(new string[] {
                        string.Format("{0}", comission),
                        "RefillExternalCardFromPurseCommission",
                        "out",
                        string.Format("{0}", userId),
                        "Usd",
                        string.Format("{0}", userPurseId),
                        "0"});
            table7.AddRow(new string[] {
                        string.Format("{0}", comission),
                        "RefillExternalCardFromPurseCommission",
                        "in",
                        string.Format("{0}", ePSUserId),
                        "Usd",
                        string.Format("{0}", ePS_02TemporaryStoragePurse),
                        "0"});
            table7.AddRow(new string[] {
                        string.Format("{0}", amount),
                        "CurrencyExchangeUsdAndEur",
                        "out",
                        string.Format("{0}", ePSUserId),
                        "Usd",
                        string.Format("{0}", ePS_02TemporaryStoragePurse),
                        "0"});
            table7.AddRow(new string[] {
                        string.Format("{0}", amount),
                        "CurrencyExchangeUsdAndEur",
                        "in",
                        string.Format("{0}", systemPurseUserId),
                        "Usd",
                        string.Format("{0}", ePS_06Exchanges),
                        "0"});
            table7.AddRow(new string[] {
                        "**amount * rate**",
                        "CurrencyExchangeUsdAndEur",
                        "out",
                        string.Format("{0}", systemPurseUserId),
                        "Rub",
                        string.Format("{0}", ePS_06Exchanges),
                        "0"});
            table7.AddRow(new string[] {
                        "**amount * rate**",
                        "CurrencyExchangeUsdAndEur",
                        "in",
                        string.Format("{0}", ePSUserId),
                        "Rub",
                        string.Format("{0}", ePS_02TemporaryStoragePurse),
                        "0"});
            table7.AddRow(new string[] {
                        "**amount * rate**",
                        "RefillExternalCardFromPurse",
                        "out",
                        string.Format("{0}", ePSUserId),
                        "Rub",
                        string.Format("{0}", ePS_02TemporaryStoragePurse),
                        "0"});
            table7.AddRow(new string[] {
                        string.Format("{0}", comission),
                        "RefillExternalCardFromPurseCommission",
                        "out",
                        string.Format("{0}", ePSUserId),
                        "Usd",
                        string.Format("{0}", ePS_02TemporaryStoragePurse),
                        "0"});
            table7.AddRow(new string[] {
                        string.Format("{0}", comission),
                        "RefillExternalCardFromPurseCommission",
                        "in",
                        string.Format("{0}", ePSUserId),
                        "Usd",
                        string.Format("{0}", ePS_01Commissions),
                        "0"});
            table7.AddRow(new string[] {
                        "50",
                        "RefillExternalCardFromPurseProviderCommission",
                        "out",
                        string.Format("{0}", ePSUserId),
                        "Rub",
                        string.Format("{0}", ePS_01Commissions),
                        "0"});
#line 70
   testRunner.Then(string.Format("User selects records in \'TPurseTransactions\' by last OperationGuid where UserId=\"" +
                        "{0}\":", userId), ((string)(null)), table7, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "CurrencyId",
                        "Direction",
                        "Destination",
                        "UserId",
                        "Amount",
                        "AmountInUsd",
                        "Product",
                        "ProductType"});
            table8.AddRow(new string[] {
                        "Usd",
                        "out",
                        "OutgoingPaymentToSidedBankCard",
                        string.Format("{0}", userId),
                        string.Format("{0}", amount),
                        "**Generated**",
                        string.Format("{0}", purseId),
                        "Epid"});
#line 87
 testRunner.Then(string.Format("User selects records in \'LimitRecords\' by last OperationGuid where UserId=\"{0}\":", userId), ((string)(null)), table8, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Amount",
                        "CurrencyId",
                        "ExternalServiceId",
                        "IsIncomingTransaction"});
            table9.AddRow(new string[] {
                        "50",
                        "Rub",
                        "BankVoronezh",
                        "false"});
            table9.AddRow(new string[] {
                        "**amount * rate**",
                        "Rub",
                        "BankVoronezh",
                        "false"});
#line 92
 testRunner.Then("User selects records in \'TExternalTransactions\' by OperationGuid", ((string)(null)), table9, "Then ");
#line 99
 testRunner.Given("User clicks on Отчеты menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Date",
                        "Name",
                        "Amount"});
            table10.AddRow(new string[] {
                        "**DD.MM.YY**",
                        "Комиссия за перевод на внешнюю банковскую карту",
                        string.Format("- $ {0}", comission)});
            table10.AddRow(new string[] {
                        "**DD.MM.YY**",
                        "Перевод на внешнюю банковскую карту",
                        string.Format("- $ {0}", amount)});
#line 100
 testRunner.Given("User see transactions list contains:", ((string)(null)), table10, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column1",
                        "Column2"});
            table11.AddRow(new string[] {
                        "Транзакция №",
                        "**TPurseTransactionId**"});
            table11.AddRow(new string[] {
                        "Заказ №",
                        "**InvoiceId**"});
            table11.AddRow(new string[] {
                        "Дата",
                        "**dd.MM.yyyy HH:mm**"});
            table11.AddRow(new string[] {
                        "Продукт",
                        string.Format("e-Wallet {0}", purseId)});
            table11.AddRow(new string[] {
                        "Получатель",
                        "4244 36** **** 3678"});
            table11.AddRow(new string[] {
                        "Сумма",
                        string.Format("$ {0}", comission)});
            table11.AddRow(new string[] {
                        "Детали",
                        "Commission for outgoing payment to sided bank card VISA, x3678. Amount transferre" +
                            "d to card: ₽**amount * rate**, Rate: $1 = ₽**rate**."});
#line 105
  testRunner.Given(string.Format("User see statement info for the UserId={0} where DestinationId=\'RefillExternalCar" +
                        "dFromPurseCommission\' row № 0 direction=\'out\':", userId), ((string)(null)), table11, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column1",
                        "Column2"});
            table12.AddRow(new string[] {
                        "Транзакция №",
                        "**TPurseTransactionId**"});
            table12.AddRow(new string[] {
                        "Заказ №",
                        "**InvoiceId**"});
            table12.AddRow(new string[] {
                        "Дата",
                        "**dd.MM.yyyy HH:mm**"});
            table12.AddRow(new string[] {
                        "Продукт",
                        string.Format("e-Wallet {0}", purseId)});
            table12.AddRow(new string[] {
                        "Получатель",
                        "4244 36** **** 3678"});
            table12.AddRow(new string[] {
                        "Сумма",
                        string.Format("$ {0}", amount)});
            table12.AddRow(new string[] {
                        "Детали",
                        "Outgoing payment to sided bank card VISA, x3678. Amount transferred to card: ₽**a" +
                            "mount * rate**, Rate: $1 = ₽**rate**."});
#line 116
  testRunner.Given(string.Format("User see statement info for the UserId={0} where DestinationId=\'RefillExternalCar" +
                        "dFromPurse\' row № 1 direction=\'out\':", userId), ((string)(null)), table12, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "MessageType",
                        "Priority",
                        "Receiver",
                        "Title"});
            table13.AddRow(new string[] {
                        "Sms",
                        "13",
                        string.Format("{0}", user),
                        "-"});
            table13.AddRow(new string[] {
                        "Email",
                        "6",
                        "refillvoronezhcard@qa.swiftcom.uk",
                        "Отчет по операции №**Invoice**"});
            table13.AddRow(new string[] {
                        "PushAndroid",
                        "6",
                        "cLCkHIt27Rg:APA91bH1wbbomcaNRtCx31-cBrYKXzddd7I_H3zzlb7QK0tyZ7iCvXvQmypLfF0ehETKl" +
                            "UCSQkdmj-aPK33W6kz-27FsoM6svvxRv9PgPN7_GbVHovgbQS0Hqj-eJYXubjEtQXM9ra7T",
                        "-"});
            table13.AddRow(new string[] {
                        "PushIos",
                        "6",
                        "55954f64ce084e09330cd74a746708cb610c1c10db847ae57c69f58aa2d926e2",
                        "-"});
#line 128
 testRunner.Then(string.Format("User selects records in table \'Notification\' where UserId=\"{0}\" with \"**Invoice**" +
                        "\" replacing:", userId), ((string)(null)), table13, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("БИЗ RUB (Воронеж) (конвертация USD-RUB)")]
        [NUnit.Framework.TestCaseAttribute("VISA, x3678", "VISA, x3678", "4244 36** **** 3678", "4244362761063678", "10.00", "3.50", "13.50", "+70092363995", "675852fb-2981-4d66-af20-6d30a562e6b3", "72621010Abac", "F03ABC6E-25D6-4C98-A06F-A36B9B510BAF", "1634433", "001-634433", "144177", "122122", "406604", "99B4BB5F-2BE5-4481-9E78-F2E30339DC88", new string[] {
                "3191326",
                "RefillExternalCardFromPurse_BankQiwi_OFF"}, Category="3191326,RefillExternalCardFromPurse_BankQiwi_OFF")]
        [NUnit.Framework.TestCaseAttribute("x0002", "МИР, x0002", "2201 01** **** 0002", "2201010000000002", "10.00", "3.50", "13.50", "+70092363995", "675852fb-2981-4d66-af20-6d30a562e6b3", "72621010Abac", "F03ABC6E-25D6-4C98-A06F-A36B9B510BAF", "1634433", "001-634433", "144177", "122122", "406604", "99B4BB5F-2BE5-4481-9E78-F2E30339DC88", new string[] {
                "3191327",
                "RefillExternalCardFromPurse_BankQiwi_OFF"}, Category="3191327,RefillExternalCardFromPurse_BankQiwi_OFF")]
        public virtual void БИЗRUBВоронежКонвертацияUSD_RUB(
                    string cardInfoInStatement, 
                    string cardInfo, 
                    string maskedPan, 
                    string pANReceiver, 
                    string amount, 
                    string comission, 
                    string amountComission, 
                    string user, 
                    string userId, 
                    string password, 
                    string systemPurseUserId, 
                    string userPurseId, 
                    string purseId, 
                    string ePS_02TemporaryStoragePurse, 
                    string ePS_06Exchanges, 
                    string ePS_01Commissions, 
                    string ePSUserId, 
                    string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("БИЗ RUB (Воронеж) (конвертация USD-RUB)", exampleTags);
#line 143
this.ScenarioSetup(scenarioInfo);
#line 145
 testRunner.Given("User goes to SignIn page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 146
 testRunner.Given(string.Format("User signin \"Epayments\" with \"{0}\" password \"{1}\"", user, password), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 147
 testRunner.Given("User see Account Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 149
 testRunner.Given("User clicks on Перевести menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 150
 testRunner.Given("User clicks on \"На банковскую карту\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 151
 testRunner.Then("Section \'Amount including fees\' is: $ 0.00 (Комиссия: $ 0.00)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 153
 testRunner.Then(string.Format("\'Номер банковской карты\' set to \'{0}\'", pANReceiver), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 155
 testRunner.Then("\'Владелец\' set to \'nik ivanov\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 157
 testRunner.Then(string.Format("\'Отдаваемая сумма\' set to \'{0}\'", amount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 158
 testRunner.Then(string.Format("Section \'Amount including fees\' is: $ {0} (Комиссия: $ {1})", amountComission, comission), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column1",
                        "Column2"});
            table14.AddRow(new string[] {
                        "Минимальная сумма перевода:",
                        "₽ 500.00"});
            table14.AddRow(new string[] {
                        "Максимальная сумма перевода:",
                        "₽ 75 000.00"});
            table14.AddRow(new string[] {
                        "Комиссия:",
                        "13%min $ 3.50"});
#line 159
 testRunner.Given("User see limits table", ((string)(null)), table14, "Given ");
#line 164
 testRunner.Then("Currency rate placeholder appears", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 167
 testRunner.Given("User clicks on \"Далее\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column1",
                        "Column2"});
            table15.AddRow(new string[] {
                        "Отправитель",
                        string.Format("USD, e-Wallet {0}", purseId)});
            table15.AddRow(new string[] {
                        "Банковская карта",
                        string.Format("{0}", cardInfo)});
            table15.AddRow(new string[] {
                        "Отдаваемая сумма",
                        string.Format("$ {0}", amount)});
            table15.AddRow(new string[] {
                        "Комиссия",
                        string.Format("$ {0}", comission)});
            table15.AddRow(new string[] {
                        "Сумма с комиссией",
                        string.Format("$ {0}", amountComission)});
            table15.AddRow(new string[] {
                        "Курс обмена",
                        "$ 1.00 = ₽ **rateWM**"});
            table15.AddRow(new string[] {
                        "Получаемая сумма",
                        "₽ **amount * rate**"});
#line 168
 testRunner.Given("User see table", ((string)(null)), table15, "Given ");
#line 178
 testRunner.Given("Set StartTime for DB search", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 179
 testRunner.Given("User clicks on button \"Подтвердить\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "OperationType",
                        "Recipient",
                        "UserId",
                        "IsUsed"});
            table16.AddRow(new string[] {
                        "MassPayment",
                        string.Format("{0}", user),
                        string.Format("{0}", userId),
                        "false"});
#line 180
 testRunner.Then("User type SMS sent to:", ((string)(null)), table16, "Then ");
#line 183
 testRunner.Then("Memorize eWallet section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 184
 testRunner.Given("User clicks on \"Оплатить\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 185
 testRunner.Then("User gets message \"Обработка платежа займет несколько минут. Дождитесь результата" +
                    " перевода или продолжите работу в личном кабинете\" on Multiform", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 188
 testRunner.Then("User gets message \"Платеж успешно отправлен\" on Multiform", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 189
 testRunner.Then("Make screenshot", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 191
 testRunner.Given("User closes multiform by clicking on \"Закрыть\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 192
 testRunner.Then("Redirected to /#/transfer/", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "USD",
                        "EUR",
                        "RUB"});
            table17.AddRow(new string[] {
                        string.Format("-{0}", amountComission),
                        "0.00",
                        "0.00"});
#line 193
  testRunner.Then("eWallet updated sections are:", ((string)(null)), table17, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "OperationTypeId",
                        "Amount",
                        "Fee"});
            table18.AddRow(new string[] {
                        "61",
                        string.Format("{0}", amount),
                        string.Format("{0}", comission)});
#line 199
 testRunner.Then("Preparing records in \'InvoicePositions\':", ((string)(null)), table18, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "State",
                        "Details",
                        "SenderSystemId",
                        "SenderIdentity",
                        "ReceiverSystemId",
                        "ReceiverIdentity",
                        "CurrencyId",
                        "PaymentSource",
                        "ReceiverIdentityType",
                        "UserId"});
            table19.AddRow(new string[] {
                        "Successed",
                        "",
                        "WaveCrest",
                        string.Format("{0}", purseId),
                        "BankVoronezh",
                        string.Format("{0}", maskedPan),
                        "Usd",
                        "EWallet",
                        "Purse",
                        string.Format("{0}", userId)});
#line 204
 testRunner.Then(string.Format("User selects last record in \'Invoices and InvoicePositions\' where UserId=\"{0}\":", userId), ((string)(null)), table19, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "Amount",
                        "DestinationId",
                        "Direction",
                        "UserId",
                        "CurrencyId",
                        "PurseId",
                        "RefundCount"});
            table20.AddRow(new string[] {
                        string.Format("{0}", amount),
                        "RefillExternalCardFromPurse",
                        "out",
                        string.Format("{0}", userId),
                        "Usd",
                        string.Format("{0}", userPurseId),
                        "0"});
            table20.AddRow(new string[] {
                        string.Format("{0}", amount),
                        "RefillExternalCardFromPurse",
                        "in",
                        string.Format("{0}", ePSUserId),
                        "Usd",
                        string.Format("{0}", ePS_02TemporaryStoragePurse),
                        "0"});
            table20.AddRow(new string[] {
                        string.Format("{0}", comission),
                        "RefillExternalCardFromPurseCommission",
                        "out",
                        string.Format("{0}", userId),
                        "Usd",
                        string.Format("{0}", userPurseId),
                        "0"});
            table20.AddRow(new string[] {
                        string.Format("{0}", comission),
                        "RefillExternalCardFromPurseCommission",
                        "in",
                        string.Format("{0}", ePSUserId),
                        "Usd",
                        string.Format("{0}", ePS_02TemporaryStoragePurse),
                        "0"});
            table20.AddRow(new string[] {
                        string.Format("{0}", amount),
                        "CurrencyExchangeUsdAndEur",
                        "out",
                        string.Format("{0}", ePSUserId),
                        "Usd",
                        string.Format("{0}", ePS_02TemporaryStoragePurse),
                        "0"});
            table20.AddRow(new string[] {
                        string.Format("{0}", amount),
                        "CurrencyExchangeUsdAndEur",
                        "in",
                        string.Format("{0}", systemPurseUserId),
                        "Usd",
                        string.Format("{0}", ePS_06Exchanges),
                        "0"});
            table20.AddRow(new string[] {
                        "**amount * rate**",
                        "CurrencyExchangeUsdAndEur",
                        "out",
                        string.Format("{0}", systemPurseUserId),
                        "Rub",
                        string.Format("{0}", ePS_06Exchanges),
                        "0"});
            table20.AddRow(new string[] {
                        "**amount * rate**",
                        "CurrencyExchangeUsdAndEur",
                        "in",
                        string.Format("{0}", ePSUserId),
                        "Rub",
                        string.Format("{0}", ePS_02TemporaryStoragePurse),
                        "0"});
            table20.AddRow(new string[] {
                        "**amount * rate**",
                        "RefillExternalCardFromPurse",
                        "out",
                        string.Format("{0}", ePSUserId),
                        "Rub",
                        string.Format("{0}", ePS_02TemporaryStoragePurse),
                        "0"});
            table20.AddRow(new string[] {
                        string.Format("{0}", comission),
                        "RefillExternalCardFromPurseCommission",
                        "out",
                        string.Format("{0}", ePSUserId),
                        "Usd",
                        string.Format("{0}", ePS_02TemporaryStoragePurse),
                        "0"});
            table20.AddRow(new string[] {
                        string.Format("{0}", comission),
                        "RefillExternalCardFromPurseCommission",
                        "in",
                        string.Format("{0}", ePSUserId),
                        "Usd",
                        string.Format("{0}", ePS_01Commissions),
                        "0"});
            table20.AddRow(new string[] {
                        "50",
                        "RefillExternalCardFromPurseProviderCommission",
                        "out",
                        string.Format("{0}", ePSUserId),
                        "Rub",
                        string.Format("{0}", ePS_01Commissions),
                        "0"});
#line 210
   testRunner.Then(string.Format("User selects records in \'TPurseTransactions\' by last OperationGuid where UserId=\"" +
                        "{0}\":", userId), ((string)(null)), table20, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "CurrencyId",
                        "Direction",
                        "Destination",
                        "UserId",
                        "Amount",
                        "AmountInUsd",
                        "Product",
                        "ProductType"});
            table21.AddRow(new string[] {
                        "Usd",
                        "out",
                        "OutgoingPaymentToSidedBankCard",
                        string.Format("{0}", userId),
                        string.Format("{0}", amount),
                        "**Generated**",
                        string.Format("{0}", purseId),
                        "Epid"});
#line 227
 testRunner.Then(string.Format("User selects records in \'LimitRecords\' by last OperationGuid where UserId=\"{0}\":", userId), ((string)(null)), table21, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "Amount",
                        "CurrencyId",
                        "ExternalServiceId",
                        "IsIncomingTransaction"});
            table22.AddRow(new string[] {
                        "50",
                        "Rub",
                        "BankVoronezh",
                        "false"});
            table22.AddRow(new string[] {
                        "**amount * rate**",
                        "Rub",
                        "BankVoronezh",
                        "false"});
#line 231
 testRunner.Then("User selects records in \'TExternalTransactions\' by OperationGuid", ((string)(null)), table22, "Then ");
#line 239
 testRunner.Given("User clicks on Отчеты menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "Date",
                        "Name",
                        "Amount"});
            table23.AddRow(new string[] {
                        "**DD.MM.YY**",
                        "Комиссия за перевод на внешнюю банковскую карту",
                        string.Format("- $ {0}", comission)});
            table23.AddRow(new string[] {
                        "**DD.MM.YY**",
                        "Перевод на внешнюю банковскую карту",
                        string.Format("- $ {0}", amount)});
#line 240
 testRunner.Given("User see transactions list contains:", ((string)(null)), table23, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column1",
                        "Column2"});
            table24.AddRow(new string[] {
                        "Транзакция №",
                        "**TPurseTransactionId**"});
            table24.AddRow(new string[] {
                        "Заказ №",
                        "**InvoiceId**"});
            table24.AddRow(new string[] {
                        "Дата",
                        "**dd.MM.yyyy HH:mm**"});
            table24.AddRow(new string[] {
                        "Продукт",
                        string.Format("e-Wallet {0}", purseId)});
            table24.AddRow(new string[] {
                        "Получатель",
                        string.Format("{0}", maskedPan)});
            table24.AddRow(new string[] {
                        "Сумма",
                        string.Format("$ {0}", comission)});
            table24.AddRow(new string[] {
                        "Детали",
                        string.Format("Commission for outgoing payment to sided bank card {0}. Amount transferred to car" +
                                "d: ₽**amount * rate**, Rate: $1 = ₽**rate**.", cardInfoInStatement)});
#line 247
        testRunner.Given(string.Format("User see statement info for the UserId={0} where DestinationId=\'RefillExternalCar" +
                        "dFromPurseCommission\' row № 0 direction=\'out\':", userId), ((string)(null)), table24, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column1",
                        "Column2"});
            table25.AddRow(new string[] {
                        "Транзакция №",
                        "**TPurseTransactionId**"});
            table25.AddRow(new string[] {
                        "Заказ №",
                        "**InvoiceId**"});
            table25.AddRow(new string[] {
                        "Дата",
                        "**dd.MM.yyyy HH:mm**"});
            table25.AddRow(new string[] {
                        "Продукт",
                        string.Format("e-Wallet {0}", purseId)});
            table25.AddRow(new string[] {
                        "Получатель",
                        string.Format("{0}", maskedPan)});
            table25.AddRow(new string[] {
                        "Сумма",
                        string.Format("$ {0}", amount)});
            table25.AddRow(new string[] {
                        "Детали",
                        string.Format("Outgoing payment to sided bank card {0}. Amount transferred to card: ₽**amount * " +
                                "rate**, Rate: $1 = ₽**rate**.", cardInfoInStatement)});
#line 259
        testRunner.Given(string.Format("User see statement info for the UserId={0} where DestinationId=\'RefillExternalCar" +
                        "dFromPurse\' row № 1 direction=\'out\':", userId), ((string)(null)), table25, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "MessageType",
                        "Priority",
                        "Receiver",
                        "Title"});
            table26.AddRow(new string[] {
                        "Sms",
                        "13",
                        string.Format("{0}", user),
                        "-"});
            table26.AddRow(new string[] {
                        "Email",
                        "6",
                        "iam_a_biz_account@qa.swiftcom.uk",
                        "Отчет по операции №**Invoice**"});
            table26.AddRow(new string[] {
                        "PushAndroid",
                        "6",
                        "cLDfHIt29BT:APA91bT1wbbodcaNRtCx31-cBrYKXzdkk7I_H3zzlb7QK0tyZ7iCvXvQmypLfF0ehETKl" +
                            "UCSQkdmj-aPK33W6kz-29FsoM6svvxRv9PgPN7_GbVHovgbQS0Hqj-eJYXubjEtQXM9ra7T",
                        "-"});
            table26.AddRow(new string[] {
                        "PushIos",
                        "6",
                        "55954f64ce084e09330cd74a746708cb450c1c10db847ae57c69f58bb2d947e2",
                        "-"});
#line 271
 testRunner.Then(string.Format("User selects records in table \'Notification\' where UserId=\"{0}\" with \"**Invoice**" +
                        "\" replacing:", userId), ((string)(null)), table26, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("RUB (Воронеж) (без конвертации RUB-RUB)")]
        [NUnit.Framework.CategoryAttribute("3070474")]
        [NUnit.Framework.CategoryAttribute("RefillExternalCardFromPurse_BankQiwi_OFF")]
        [NUnit.Framework.TestCaseAttribute("4723455465464512423", "500.00", "125.00", "625.00", "+70078644084", "96879579-d3fa-4bfd-9b57-269a357fdaa3", "72621010Abac", "F03ABC6E-25D6-4C98-A06F-A36B9B510BAF", "1358862", "001-358862", "144177", "122122", "406604", "99B4BB5F-2BE5-4481-9E78-F2E30339DC88", null)]
        public virtual void RUBВоронежБезКонвертацииRUB_RUB(string pANReceiver, string amount, string comission, string amountComission, string user, string userId, string password, string systemPurseUserId, string userPurseId, string purseId, string ePS_02TemporaryStoragePurse, string ePS_06Exchanges, string ePS_01Commissions, string ePSUserId, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "3070474",
                    "RefillExternalCardFromPurse_BankQiwi_OFF"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("RUB (Воронеж) (без конвертации RUB-RUB)", @__tags);
#line 294
this.ScenarioSetup(scenarioInfo);
#line 296
 testRunner.Given("User goes to SignIn page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 297
 testRunner.Given(string.Format("User signin \"Epayments\" with \"{0}\" password \"{1}\"", user, password), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 298
 testRunner.Given("User see Account Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 300
 testRunner.Given("User clicks on Перевести menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 301
 testRunner.Given("User clicks on \"На банковскую карту\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 302
 testRunner.Then("Section \'Amount including fees\' is: $ 0.00 (Комиссия: $ 0.00)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 304
 testRunner.Then("\'Со счета\' selector set to \'RUB\' in eWallet section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 305
 testRunner.Then(string.Format("\'Номер банковской карты\' set to \'{0}\'", pANReceiver), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 306
 testRunner.Then("\'Владелец\' set to \'nik ivanov\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 308
 testRunner.Then("\'Получаемая сумма\' selector set to \'RUB\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 310
 testRunner.Then(string.Format("\'Отдаваемая сумма\' set to \'{0}\'", amount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 311
 testRunner.Then(string.Format("Section \'Amount including fees\' is: ₽ {0} (Комиссия: ₽ {1})", amountComission, comission), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column1",
                        "Column2"});
            table27.AddRow(new string[] {
                        "Минимальная сумма перевода:",
                        "₽ 500.00"});
            table27.AddRow(new string[] {
                        "Максимальная сумма перевода:",
                        "₽ 75 000.00"});
            table27.AddRow(new string[] {
                        "Комиссия:",
                        "1.2%min ₽ 125"});
#line 313
 testRunner.Given("User see limits table", ((string)(null)), table27, "Given ");
#line 319
 testRunner.Given("User clicks on \"Далее\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column1",
                        "Column2"});
            table28.AddRow(new string[] {
                        "Отправитель",
                        string.Format("RUB, e-Wallet {0}", purseId)});
            table28.AddRow(new string[] {
                        "Банковская карта",
                        "x2423"});
            table28.AddRow(new string[] {
                        "Отдаваемая сумма",
                        string.Format("₽ {0}", amount)});
            table28.AddRow(new string[] {
                        "Комиссия",
                        string.Format("₽ {0}", comission)});
            table28.AddRow(new string[] {
                        "Сумма с комиссией",
                        string.Format("₽ {0}", amountComission)});
            table28.AddRow(new string[] {
                        "Получаемая сумма",
                        string.Format("₽ {0}", amount)});
#line 320
 testRunner.Given("User see table", ((string)(null)), table28, "Given ");
#line 329
 testRunner.Given("Set StartTime for DB search", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 330
 testRunner.Given("User clicks on button \"Подтвердить\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                        "OperationType",
                        "Recipient",
                        "UserId",
                        "IsUsed"});
            table29.AddRow(new string[] {
                        "MassPayment",
                        string.Format("{0}", user),
                        string.Format("{0}", userId),
                        "false"});
#line 331
 testRunner.Then("User type SMS sent to:", ((string)(null)), table29, "Then ");
#line 334
 testRunner.Then("Memorize eWallet section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 335
 testRunner.Given("User clicks on \"Оплатить\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 336
 testRunner.Then("User gets message \"Обработка платежа займет несколько минут. Дождитесь результата" +
                    " перевода или продолжите работу в личном кабинете\" on Multiform", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 339
 testRunner.Then("User gets message \"Платеж успешно отправлен\" on Multiform", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 340
 testRunner.Then("Make screenshot", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 342
 testRunner.Given("User closes multiform by clicking on \"Закрыть\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 343
 testRunner.Then("Redirected to /#/transfer/", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                        "USD",
                        "EUR",
                        "RUB"});
            table30.AddRow(new string[] {
                        "0.00",
                        "0.00",
                        string.Format("-{0}", amountComission)});
#line 344
  testRunner.Then("eWallet updated sections are:", ((string)(null)), table30, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                        "OperationTypeId",
                        "Amount",
                        "Fee"});
            table31.AddRow(new string[] {
                        "112",
                        string.Format("{0}", amount),
                        string.Format("{0}", comission)});
#line 349
 testRunner.Then("Preparing records in \'InvoicePositions\':", ((string)(null)), table31, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                        "State",
                        "Details",
                        "SenderSystemId",
                        "SenderIdentity",
                        "ReceiverSystemId",
                        "ReceiverIdentity",
                        "CurrencyId",
                        "PaymentSource",
                        "ReceiverIdentityType",
                        "UserId"});
            table32.AddRow(new string[] {
                        "Successed",
                        "",
                        "WaveCrest",
                        string.Format("{0}", purseId),
                        "BankVoronezh",
                        "4723 45** **** **** 423",
                        "Rub",
                        "EWallet",
                        "Purse",
                        string.Format("{0}", userId)});
#line 354
 testRunner.Then(string.Format("User selects last record in \'Invoices and InvoicePositions\' where UserId=\"{0}\":", userId), ((string)(null)), table32, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                        "Amount",
                        "DestinationId",
                        "Direction",
                        "UserId",
                        "CurrencyId",
                        "PurseId",
                        "RefundCount"});
            table33.AddRow(new string[] {
                        string.Format("{0}", amount),
                        "RefillExternalCardFromPurse",
                        "out",
                        string.Format("{0}", userId),
                        "Rub",
                        string.Format("{0}", userPurseId),
                        "0"});
            table33.AddRow(new string[] {
                        string.Format("{0}", amount),
                        "RefillExternalCardFromPurse",
                        "in",
                        string.Format("{0}", ePSUserId),
                        "Rub",
                        string.Format("{0}", ePS_02TemporaryStoragePurse),
                        "0"});
            table33.AddRow(new string[] {
                        string.Format("{0}", comission),
                        "RefillExternalCardFromPurseCommission",
                        "out",
                        string.Format("{0}", userId),
                        "Rub",
                        string.Format("{0}", userPurseId),
                        "0"});
            table33.AddRow(new string[] {
                        string.Format("{0}", comission),
                        "RefillExternalCardFromPurseCommission",
                        "in",
                        string.Format("{0}", ePSUserId),
                        "Rub",
                        string.Format("{0}", ePS_02TemporaryStoragePurse),
                        "0"});
            table33.AddRow(new string[] {
                        string.Format("{0}", amount),
                        "RefillExternalCardFromPurse",
                        "out",
                        string.Format("{0}", ePSUserId),
                        "Rub",
                        string.Format("{0}", ePS_02TemporaryStoragePurse),
                        "0"});
            table33.AddRow(new string[] {
                        string.Format("{0}", comission),
                        "RefillExternalCardFromPurseCommission",
                        "out",
                        string.Format("{0}", ePSUserId),
                        "Rub",
                        string.Format("{0}", ePS_02TemporaryStoragePurse),
                        "0"});
            table33.AddRow(new string[] {
                        string.Format("{0}", comission),
                        "RefillExternalCardFromPurseCommission",
                        "in",
                        string.Format("{0}", ePSUserId),
                        "Rub",
                        string.Format("{0}", ePS_01Commissions),
                        "0"});
            table33.AddRow(new string[] {
                        "50",
                        "RefillExternalCardFromPurseProviderCommission",
                        "out",
                        string.Format("{0}", ePSUserId),
                        "Rub",
                        string.Format("{0}", ePS_01Commissions),
                        "0"});
#line 360
   testRunner.Then(string.Format("User selects records in \'TPurseTransactions\' by last OperationGuid where UserId=\"" +
                        "{0}\":", userId), ((string)(null)), table33, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                        "CurrencyId",
                        "Direction",
                        "Destination",
                        "UserId",
                        "Amount",
                        "AmountInUsd",
                        "Product",
                        "ProductType"});
            table34.AddRow(new string[] {
                        "Rub",
                        "out",
                        "OutgoingPaymentToSidedBankCard",
                        string.Format("{0}", userId),
                        string.Format("{0}", amount),
                        "**Generated**",
                        string.Format("{0}", purseId),
                        "Epid"});
#line 373
 testRunner.Then(string.Format("User selects records in \'LimitRecords\' by last OperationGuid where UserId=\"{0}\":", userId), ((string)(null)), table34, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                        "Amount",
                        "CurrencyId",
                        "ExternalServiceId",
                        "IsIncomingTransaction"});
            table35.AddRow(new string[] {
                        "50",
                        "Rub",
                        "BankVoronezh",
                        "false"});
            table35.AddRow(new string[] {
                        string.Format("{0}", amount),
                        "Rub",
                        "BankVoronezh",
                        "false"});
#line 378
 testRunner.Then("User selects records in \'TExternalTransactions\' by OperationGuid", ((string)(null)), table35, "Then ");
#line 386
 testRunner.Given("User clicks on Отчеты menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                        "Date",
                        "Name",
                        "Amount"});
            table36.AddRow(new string[] {
                        "**DD.MM.YY**",
                        "Комиссия за перевод на внешнюю банковскую карту",
                        string.Format("- ₽ {0}", comission)});
            table36.AddRow(new string[] {
                        "**DD.MM.YY**",
                        "Перевод на внешнюю банковскую карту",
                        string.Format("- ₽ {0}", amount)});
#line 387
 testRunner.Given("User see transactions list contains:", ((string)(null)), table36, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column1",
                        "Column2"});
            table37.AddRow(new string[] {
                        "Транзакция №",
                        "**TPurseTransactionId**"});
            table37.AddRow(new string[] {
                        "Заказ №",
                        "**InvoiceId**"});
            table37.AddRow(new string[] {
                        "Внешний ID",
                        "**ExternalTransactionId**"});
            table37.AddRow(new string[] {
                        "Дата",
                        "**dd.MM.yyyy HH:mm**"});
            table37.AddRow(new string[] {
                        "Продукт",
                        string.Format("e-Wallet {0}", purseId)});
            table37.AddRow(new string[] {
                        "Получатель",
                        "4723 45** **** **** 423"});
            table37.AddRow(new string[] {
                        "Сумма",
                        string.Format("₽ {0}", comission)});
            table37.AddRow(new string[] {
                        "Детали",
                        "Commission for outgoing payment to sided bank card VISA, x 423."});
#line 393
 testRunner.Given(string.Format("User see statement info for the UserId={0} where DestinationId=\'RefillExternalCar" +
                        "dFromPurseCommission\' row № 0 direction=\'out\':", userId), ((string)(null)), table37, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table38 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column1",
                        "Column2"});
            table38.AddRow(new string[] {
                        "Транзакция №",
                        "**TPurseTransactionId**"});
            table38.AddRow(new string[] {
                        "Заказ №",
                        "**InvoiceId**"});
            table38.AddRow(new string[] {
                        "Внешний ID",
                        "**ExternalTransactionId**"});
            table38.AddRow(new string[] {
                        "Дата",
                        "**dd.MM.yyyy HH:mm**"});
            table38.AddRow(new string[] {
                        "Продукт",
                        string.Format("e-Wallet {0}", purseId)});
            table38.AddRow(new string[] {
                        "Получатель",
                        "4723 45** **** **** 423"});
            table38.AddRow(new string[] {
                        "Сумма",
                        string.Format("₽ {0}", amount)});
            table38.AddRow(new string[] {
                        "Детали",
                        "Outgoing payment to sided bank card VISA, x 423."});
#line 404
 testRunner.Given(string.Format("User see statement info for the UserId={0} where DestinationId=\'RefillExternalCar" +
                        "dFromPurse\' row № 1 direction=\'out\':", userId), ((string)(null)), table38, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table39 = new TechTalk.SpecFlow.Table(new string[] {
                        "MessageType",
                        "Priority",
                        "Receiver",
                        "Title"});
            table39.AddRow(new string[] {
                        "Sms",
                        "13",
                        string.Format("{0}", user),
                        "-"});
            table39.AddRow(new string[] {
                        "Email",
                        "6",
                        "voronezh_bank_card_uitest@qa.swiftcom.uk",
                        "Отчет по операции №**Invoice**"});
            table39.AddRow(new string[] {
                        "PushAndroid",
                        "6",
                        "cLCkHIt27Rg:APA91bH1wbbomcaNRtCx31-cBrYKXzddd7I_H3zzlb7QK0tyZ7iCvXvQmypLfF0ehETKl" +
                            "UCSQkdmj-aPK33W6kz-27FsoM6svvxRv9PgPN7_GbVHovgbQS0Hqj-eJYXubjEtQXM9ra7T",
                        "-"});
            table39.AddRow(new string[] {
                        "PushIos",
                        "6",
                        "55954f64ce084e09330cd74a746708cb610c1c10db847ae57c69f58aa2d926e2",
                        "-"});
#line 416
 testRunner.Then(string.Format("User selects records in table \'Notification\' where UserId=\"{0}\" with \"**Invoice**" +
                        "\" replacing:", userId), ((string)(null)), table39, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("(ПриватБанк) (конвертация USD-EUR)")]
        [NUnit.Framework.CategoryAttribute("2706259")]
        [NUnit.Framework.TestCaseAttribute("5457 0856 8745 1557", "100.00", "2.00", "102.00", "+70078644084", "96879579-d3fa-4bfd-9b57-269a357fdaa3", "72621010Abac", "F03ABC6E-25D6-4C98-A06F-A36B9B510BAF", "1358862", "001-358862", "144177", "122122", "406604", "99B4BB5F-2BE5-4481-9E78-F2E30339DC88", null)]
        public virtual void ПриватБанкКонвертацияUSD_EUR(string pANReceiver, string amount, string comission, string amountComission, string user, string userId, string password, string systemPurseUserId, string userPurseId, string purseId, string ePS_02TemporaryStoragePurse, string ePS_06Exchanges, string ePS_01Commissions, string ePSUserId, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "2706259"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("(ПриватБанк) (конвертация USD-EUR)", @__tags);
#line 432
this.ScenarioSetup(scenarioInfo);
#line 434
 testRunner.Given("User goes to SignIn page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 435
 testRunner.Given(string.Format("User signin \"Epayments\" with \"{0}\" password \"{1}\"", user, password), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 436
 testRunner.Given("User see Account Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 438
 testRunner.Given("User clicks on Перевести menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 439
 testRunner.Given("User clicks on \"На банковскую карту\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 440
 testRunner.Then("Section \'Amount including fees\' is: $ 0.00 (Комиссия: $ 0.00)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 442
 testRunner.Then(string.Format("\'Номер банковской карты\' set to \'{0}\'", pANReceiver), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 443
 testRunner.Then(string.Format("\'Отдаваемая сумма\' set to \'{0}\'", amount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 445
 testRunner.Then("\'Владелец\' set to \'nik ivanov\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 447
 testRunner.Then("\'Получаемая сумма\' selector set to \'EUR\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 449
 testRunner.Then(string.Format("Section \'Amount including fees\' is: $ {0} (Комиссия: $ {1})", amountComission, comission), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table40 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column1",
                        "Column2"});
            table40.AddRow(new string[] {
                        "Минимальная сумма перевода:",
                        "€ 10.00"});
            table40.AddRow(new string[] {
                        "Максимальная сумма перевода:",
                        "€ 2 000.00"});
            table40.AddRow(new string[] {
                        "Комиссия:",
                        "2%"});
#line 451
 testRunner.Given("User see limits table", ((string)(null)), table40, "Given ");
#line 456
 testRunner.Then("Currency rate placeholder appears", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 458
 testRunner.Given("User clicks on \"Далее\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table41 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column1",
                        "Column2"});
            table41.AddRow(new string[] {
                        "Отправитель",
                        string.Format("USD, e-Wallet {0}", purseId)});
            table41.AddRow(new string[] {
                        "Банковская карта",
                        "Mastercard, x1557"});
            table41.AddRow(new string[] {
                        "Отдаваемая сумма",
                        string.Format("$ {0}", amount)});
            table41.AddRow(new string[] {
                        "Комиссия",
                        string.Format("$ {0}", comission)});
            table41.AddRow(new string[] {
                        "Сумма с комиссией",
                        string.Format("$ {0}", amountComission)});
            table41.AddRow(new string[] {
                        "Курс обмена",
                        "$ 1.00 = € **rateWM**"});
            table41.AddRow(new string[] {
                        "Получаемая сумма",
                        "€ **amount * rate**"});
#line 459
 testRunner.Given("User see table", ((string)(null)), table41, "Given ");
#line 469
 testRunner.Given("Set StartTime for DB search", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 470
 testRunner.Given("User clicks on button \"Подтвердить\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table42 = new TechTalk.SpecFlow.Table(new string[] {
                        "OperationType",
                        "Recipient",
                        "UserId",
                        "IsUsed"});
            table42.AddRow(new string[] {
                        "MassPayment",
                        string.Format("{0}", user),
                        string.Format("{0}", userId),
                        "false"});
#line 471
 testRunner.Then("User type SMS sent to:", ((string)(null)), table42, "Then ");
#line 475
 testRunner.Then("Memorize eWallet section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 476
 testRunner.Given("User clicks on \"Оплатить\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 477
 testRunner.Then("User gets message \"Обработка платежа займет несколько минут. Дождитесь результата" +
                    " перевода или продолжите работу в личном кабинете\" on Multiform", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 480
 testRunner.Then("User gets message \"Платеж успешно отправлен\" on Multiform", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 481
 testRunner.Then("Make screenshot", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 483
 testRunner.Given("User closes multiform by clicking on \"Закрыть\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 484
 testRunner.Then("Redirected to /#/transfer/", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table43 = new TechTalk.SpecFlow.Table(new string[] {
                        "USD",
                        "EUR",
                        "RUB"});
            table43.AddRow(new string[] {
                        string.Format("-{0}", amountComission),
                        "0.00",
                        "0.00"});
#line 485
  testRunner.Then("eWallet updated sections are:", ((string)(null)), table43, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table44 = new TechTalk.SpecFlow.Table(new string[] {
                        "OperationTypeId",
                        "Amount",
                        "Fee"});
            table44.AddRow(new string[] {
                        "231",
                        string.Format("{0}", amount),
                        string.Format("{0}", comission)});
#line 490
 testRunner.Then("Preparing records in \'InvoicePositions\':", ((string)(null)), table44, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table45 = new TechTalk.SpecFlow.Table(new string[] {
                        "State",
                        "Details",
                        "SenderSystemId",
                        "SenderIdentity",
                        "ReceiverSystemId",
                        "ReceiverIdentity",
                        "CurrencyId",
                        "PaymentSource",
                        "ReceiverIdentityType",
                        "UserId"});
            table45.AddRow(new string[] {
                        "Successed",
                        "",
                        "WaveCrest",
                        string.Format("{0}", purseId),
                        "PrivateBank",
                        "5457 08** **** 1557",
                        "Usd",
                        "EWallet",
                        "Purse",
                        string.Format("{0}", userId)});
#line 495
 testRunner.Then(string.Format("User selects last record in \'Invoices and InvoicePositions\' where UserId=\"{0}\":", userId), ((string)(null)), table45, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table46 = new TechTalk.SpecFlow.Table(new string[] {
                        "Amount",
                        "DestinationId",
                        "Direction",
                        "UserId",
                        "CurrencyId",
                        "PurseId",
                        "RefundCount"});
            table46.AddRow(new string[] {
                        string.Format("{0}", amount),
                        "RefillExternalCardFromPurse",
                        "out",
                        string.Format("{0}", userId),
                        "Usd",
                        string.Format("{0}", userPurseId),
                        "0"});
            table46.AddRow(new string[] {
                        string.Format("{0}", amount),
                        "RefillExternalCardFromPurse",
                        "in",
                        string.Format("{0}", ePSUserId),
                        "Usd",
                        string.Format("{0}", ePS_02TemporaryStoragePurse),
                        "0"});
            table46.AddRow(new string[] {
                        string.Format("{0}", comission),
                        "RefillExternalCardFromPurseCommission",
                        "out",
                        string.Format("{0}", userId),
                        "Usd",
                        string.Format("{0}", userPurseId),
                        "0"});
            table46.AddRow(new string[] {
                        string.Format("{0}", comission),
                        "RefillExternalCardFromPurseCommission",
                        "in",
                        string.Format("{0}", ePSUserId),
                        "Usd",
                        string.Format("{0}", ePS_02TemporaryStoragePurse),
                        "0"});
            table46.AddRow(new string[] {
                        string.Format("{0}", amount),
                        "CurrencyExchangeUsdAndEur",
                        "out",
                        string.Format("{0}", ePSUserId),
                        "Usd",
                        string.Format("{0}", ePS_02TemporaryStoragePurse),
                        "0"});
            table46.AddRow(new string[] {
                        string.Format("{0}", amount),
                        "CurrencyExchangeUsdAndEur",
                        "in",
                        string.Format("{0}", systemPurseUserId),
                        "Usd",
                        string.Format("{0}", ePS_06Exchanges),
                        "0"});
            table46.AddRow(new string[] {
                        "**amount * rate**",
                        "CurrencyExchangeUsdAndEur",
                        "out",
                        string.Format("{0}", systemPurseUserId),
                        "Eur",
                        string.Format("{0}", ePS_06Exchanges),
                        "0"});
            table46.AddRow(new string[] {
                        "**amount * rate**",
                        "CurrencyExchangeUsdAndEur",
                        "in",
                        string.Format("{0}", ePSUserId),
                        "Eur",
                        string.Format("{0}", ePS_02TemporaryStoragePurse),
                        "0"});
            table46.AddRow(new string[] {
                        "**amount * rate**",
                        "RefillExternalCardFromPurse",
                        "out",
                        string.Format("{0}", ePSUserId),
                        "Eur",
                        string.Format("{0}", ePS_02TemporaryStoragePurse),
                        "0"});
            table46.AddRow(new string[] {
                        string.Format("{0}", comission),
                        "RefillExternalCardFromPurseCommission",
                        "out",
                        string.Format("{0}", ePSUserId),
                        "Usd",
                        string.Format("{0}", ePS_02TemporaryStoragePurse),
                        "0"});
            table46.AddRow(new string[] {
                        string.Format("{0}", comission),
                        "RefillExternalCardFromPurseCommission",
                        "in",
                        string.Format("{0}", ePSUserId),
                        "Usd",
                        string.Format("{0}", ePS_01Commissions),
                        "0"});
#line 501
   testRunner.Then(string.Format("User selects records in \'TPurseTransactions\' by last OperationGuid where UserId=\"" +
                        "{0}\":", userId), ((string)(null)), table46, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table47 = new TechTalk.SpecFlow.Table(new string[] {
                        "CurrencyId",
                        "Direction",
                        "Destination",
                        "UserId",
                        "Amount",
                        "AmountInUsd",
                        "Product",
                        "ProductType"});
            table47.AddRow(new string[] {
                        "Usd",
                        "out",
                        "OutgoingPaymentToSidedBankCard",
                        string.Format("{0}", userId),
                        string.Format("{0}", amount),
                        "**Generated**",
                        string.Format("{0}", purseId),
                        "Epid"});
#line 517
 testRunner.Then(string.Format("User selects records in \'LimitRecords\' by last OperationGuid where UserId=\"{0}\":", userId), ((string)(null)), table47, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table48 = new TechTalk.SpecFlow.Table(new string[] {
                        "Amount",
                        "CurrencyId",
                        "ExternalServiceId",
                        "IsIncomingTransaction"});
            table48.AddRow(new string[] {
                        "**amount * rate**",
                        "Eur",
                        "PrivateBank",
                        "false"});
#line 522
 testRunner.Then("User selects records in \'TExternalTransactions\' by OperationGuid", ((string)(null)), table48, "Then ");
#line 529
 testRunner.Given("User clicks on Отчеты menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table49 = new TechTalk.SpecFlow.Table(new string[] {
                        "Date",
                        "Name",
                        "Amount"});
            table49.AddRow(new string[] {
                        "**DD.MM.YY**",
                        "Комиссия за перевод на внешнюю банковскую карту",
                        string.Format("- $ {0}", comission)});
            table49.AddRow(new string[] {
                        "**DD.MM.YY**",
                        "Перевод на внешнюю банковскую карту",
                        string.Format("- $ {0}", amount)});
#line 530
 testRunner.Given("User see transactions list contains:", ((string)(null)), table49, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table50 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column1",
                        "Column2"});
            table50.AddRow(new string[] {
                        "Транзакция №",
                        "**TPurseTransactionId**"});
            table50.AddRow(new string[] {
                        "Заказ №",
                        "**InvoiceId**"});
            table50.AddRow(new string[] {
                        "Внешний ID",
                        "**ExternalTransactionId**"});
            table50.AddRow(new string[] {
                        "Дата",
                        "**dd.MM.yyyy HH:mm**"});
            table50.AddRow(new string[] {
                        "Продукт",
                        string.Format("e-Wallet {0}", purseId)});
            table50.AddRow(new string[] {
                        "Получатель",
                        "5457 08** **** 1557"});
            table50.AddRow(new string[] {
                        "Сумма",
                        string.Format("$ {0}", comission)});
            table50.AddRow(new string[] {
                        "Детали",
                        "Commission for outgoing payment to sided bank card MasterCard, x1557. Amount tran" +
                            "sferred to card: €**amount * rate**, Rate: $1 = €**rate**."});
#line 535
  testRunner.Given(string.Format("User see statement info for the UserId={0} where DestinationId=\'RefillExternalCar" +
                        "dFromPurseCommission\' row № 0 direction=\'out\':", userId), ((string)(null)), table50, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table51 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column1",
                        "Column2"});
            table51.AddRow(new string[] {
                        "Транзакция №",
                        "**TPurseTransactionId**"});
            table51.AddRow(new string[] {
                        "Заказ №",
                        "**InvoiceId**"});
            table51.AddRow(new string[] {
                        "Внешний ID",
                        "**ExternalTransactionId**"});
            table51.AddRow(new string[] {
                        "Дата",
                        "**dd.MM.yyyy HH:mm**"});
            table51.AddRow(new string[] {
                        "Продукт",
                        string.Format("e-Wallet {0}", purseId)});
            table51.AddRow(new string[] {
                        "Получатель",
                        "5457 08** **** 1557"});
            table51.AddRow(new string[] {
                        "Сумма",
                        string.Format("$ {0}", amount)});
            table51.AddRow(new string[] {
                        "Детали",
                        "Outgoing payment to sided bank card MasterCard, x1557. Amount transferred to card" +
                            ": €**amount * rate**, Rate: $1 = €**rate**."});
#line 546
  testRunner.Given(string.Format("User see statement info for the UserId={0} where DestinationId=\'RefillExternalCar" +
                        "dFromPurse\' row № 1 direction=\'out\':", userId), ((string)(null)), table51, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table52 = new TechTalk.SpecFlow.Table(new string[] {
                        "MessageType",
                        "Priority",
                        "Receiver",
                        "Title"});
            table52.AddRow(new string[] {
                        "Sms",
                        "13",
                        string.Format("{0}", user),
                        "-"});
            table52.AddRow(new string[] {
                        "Email",
                        "6",
                        "voronezh_bank_card_uitest@qa.swiftcom.uk",
                        "Отчет по операции №**Invoice**"});
            table52.AddRow(new string[] {
                        "PushAndroid",
                        "6",
                        "cLCkHIt27Rg:APA91bH1wbbomcaNRtCx31-cBrYKXzddd7I_H3zzlb7QK0tyZ7iCvXvQmypLfF0ehETKl" +
                            "UCSQkdmj-aPK33W6kz-27FsoM6svvxRv9PgPN7_GbVHovgbQS0Hqj-eJYXubjEtQXM9ra7T",
                        "-"});
            table52.AddRow(new string[] {
                        "PushIos",
                        "6",
                        "55954f64ce084e09330cd74a746708cb610c1c10db847ae57c69f58aa2d926e2",
                        "-"});
#line 558
 testRunner.Then(string.Format("User selects records in table \'Notification\' where UserId=\"{0}\" with \"**Invoice**" +
                        "\" replacing:", userId), ((string)(null)), table52, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("(ПриватБанк) (без конвертации EUR-EUR)")]
        [NUnit.Framework.CategoryAttribute("3092746")]
        [NUnit.Framework.TestCaseAttribute("4149 4934 4367 5641", "100.00", "2.00", "102.00", "+70078644084", "96879579-d3fa-4bfd-9b57-269a357fdaa3", "72621010Abac", "F03ABC6E-25D6-4C98-A06F-A36B9B510BAF", "1358862", "001-358862", "144177", "122122", "406604", "99B4BB5F-2BE5-4481-9E78-F2E30339DC88", null)]
        public virtual void ПриватБанкБезКонвертацииEUR_EUR(string pANReceiver, string amount, string comission, string amountComission, string user, string userId, string password, string systemPurseUserId, string userPurseId, string purseId, string ePS_02TemporaryStoragePurse, string ePS_06Exchanges, string ePS_01Commissions, string ePSUserId, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "3092746"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("(ПриватБанк) (без конвертации EUR-EUR)", @__tags);
#line 572
this.ScenarioSetup(scenarioInfo);
#line 574
 testRunner.Given("User goes to SignIn page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 575
 testRunner.Given(string.Format("User signin \"Epayments\" with \"{0}\" password \"{1}\"", user, password), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 576
 testRunner.Given("User see Account Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 578
 testRunner.Given("User clicks on Перевести menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 579
 testRunner.Given("User clicks on \"На банковскую карту\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 581
 testRunner.Then("\'Со счета\' selector set to \'EUR\' in eWallet section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 582
 testRunner.Then("\'Получаемая сумма\' selector set to \'EUR\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 585
 testRunner.Then("Section \'Amount including fees\' is: € 0.00 (Комиссия: € 0.00)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 587
 testRunner.Then(string.Format("\'Номер банковской карты\' set to \'{0}\'", pANReceiver), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 588
 testRunner.Then(string.Format("\'Отдаваемая сумма\' set to \'{0}\'", amount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 590
 testRunner.Then("\'Владелец\' set to \'nik ivanov\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 592
 testRunner.Then(string.Format("Section \'Amount including fees\' is: € {0} (Комиссия: € {1})", amountComission, comission), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table53 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column1",
                        "Column2"});
            table53.AddRow(new string[] {
                        "Минимальная сумма перевода:",
                        "€ 10.00"});
            table53.AddRow(new string[] {
                        "Максимальная сумма перевода:",
                        "€ 2 000.00"});
            table53.AddRow(new string[] {
                        "Комиссия:",
                        "2%"});
#line 594
 testRunner.Given("User see limits table", ((string)(null)), table53, "Given ");
#line 600
 testRunner.Given("User clicks on \"Далее\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table54 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column1",
                        "Column2"});
            table54.AddRow(new string[] {
                        "Отправитель",
                        string.Format("EUR, e-Wallet {0}", purseId)});
            table54.AddRow(new string[] {
                        "Банковская карта",
                        "VISA, x5641"});
            table54.AddRow(new string[] {
                        "Отдаваемая сумма",
                        string.Format("€ {0}", amount)});
            table54.AddRow(new string[] {
                        "Комиссия",
                        string.Format("€ {0}", comission)});
            table54.AddRow(new string[] {
                        "Сумма с комиссией",
                        string.Format("€ {0}", amountComission)});
            table54.AddRow(new string[] {
                        "Получаемая сумма",
                        string.Format("€ {0}", amount)});
#line 601
 testRunner.Given("User see table", ((string)(null)), table54, "Given ");
#line 610
 testRunner.Given("Set StartTime for DB search", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 611
 testRunner.Given("User clicks on button \"Подтвердить\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table55 = new TechTalk.SpecFlow.Table(new string[] {
                        "OperationType",
                        "Recipient",
                        "UserId",
                        "IsUsed"});
            table55.AddRow(new string[] {
                        "MassPayment",
                        string.Format("{0}", user),
                        string.Format("{0}", userId),
                        "false"});
#line 612
 testRunner.Then("User type SMS sent to:", ((string)(null)), table55, "Then ");
#line 615
 testRunner.Then("Memorize eWallet section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 616
 testRunner.Given("User clicks on \"Оплатить\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 617
 testRunner.Then("User gets message \"Обработка платежа займет несколько минут. Дождитесь результата" +
                    " перевода или продолжите работу в личном кабинете\" on Multiform", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 620
 testRunner.Then("User gets message \"Платеж успешно отправлен\" on Multiform", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 621
 testRunner.Then("Make screenshot", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 624
 testRunner.Given("User closes multiform by clicking on \"Закрыть\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 625
 testRunner.Then("Redirected to /#/transfer/", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table56 = new TechTalk.SpecFlow.Table(new string[] {
                        "USD",
                        "EUR",
                        "RUB"});
            table56.AddRow(new string[] {
                        "0.00",
                        string.Format("-{0}", amountComission),
                        "0.00"});
#line 626
  testRunner.Then("eWallet updated sections are:", ((string)(null)), table56, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table57 = new TechTalk.SpecFlow.Table(new string[] {
                        "OperationTypeId",
                        "Amount",
                        "Fee"});
            table57.AddRow(new string[] {
                        "232",
                        string.Format("{0}", amount),
                        string.Format("{0}", comission)});
#line 631
 testRunner.Then("Preparing records in \'InvoicePositions\':", ((string)(null)), table57, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table58 = new TechTalk.SpecFlow.Table(new string[] {
                        "State",
                        "Details",
                        "SenderSystemId",
                        "SenderIdentity",
                        "ReceiverSystemId",
                        "ReceiverIdentity",
                        "CurrencyId",
                        "PaymentSource",
                        "ReceiverIdentityType",
                        "UserId"});
            table58.AddRow(new string[] {
                        "Successed",
                        "",
                        "WaveCrest",
                        string.Format("{0}", purseId),
                        "PrivateBank",
                        "4149 49** **** 5641",
                        "Eur",
                        "EWallet",
                        "Purse",
                        string.Format("{0}", userId)});
#line 636
 testRunner.Then(string.Format("User selects last record in \'Invoices and InvoicePositions\' where UserId=\"{0}\":", userId), ((string)(null)), table58, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table59 = new TechTalk.SpecFlow.Table(new string[] {
                        "Amount",
                        "DestinationId",
                        "Direction",
                        "UserId",
                        "CurrencyId",
                        "PurseId",
                        "RefundCount"});
            table59.AddRow(new string[] {
                        string.Format("{0}", amount),
                        "RefillExternalCardFromPurse",
                        "out",
                        string.Format("{0}", userId),
                        "Eur",
                        string.Format("{0}", userPurseId),
                        "0"});
            table59.AddRow(new string[] {
                        string.Format("{0}", amount),
                        "RefillExternalCardFromPurse",
                        "in",
                        string.Format("{0}", ePSUserId),
                        "Eur",
                        string.Format("{0}", ePS_02TemporaryStoragePurse),
                        "0"});
            table59.AddRow(new string[] {
                        string.Format("{0}", comission),
                        "RefillExternalCardFromPurseCommission",
                        "out",
                        string.Format("{0}", userId),
                        "Eur",
                        string.Format("{0}", userPurseId),
                        "0"});
            table59.AddRow(new string[] {
                        string.Format("{0}", comission),
                        "RefillExternalCardFromPurseCommission",
                        "in",
                        string.Format("{0}", ePSUserId),
                        "Eur",
                        string.Format("{0}", ePS_02TemporaryStoragePurse),
                        "0"});
            table59.AddRow(new string[] {
                        string.Format("{0}", amount),
                        "RefillExternalCardFromPurse",
                        "out",
                        string.Format("{0}", ePSUserId),
                        "Eur",
                        string.Format("{0}", ePS_02TemporaryStoragePurse),
                        "0"});
            table59.AddRow(new string[] {
                        string.Format("{0}", comission),
                        "RefillExternalCardFromPurseCommission",
                        "out",
                        string.Format("{0}", ePSUserId),
                        "Eur",
                        string.Format("{0}", ePS_02TemporaryStoragePurse),
                        "0"});
            table59.AddRow(new string[] {
                        string.Format("{0}", comission),
                        "RefillExternalCardFromPurseCommission",
                        "in",
                        string.Format("{0}", ePSUserId),
                        "Eur",
                        string.Format("{0}", ePS_01Commissions),
                        "0"});
#line 642
   testRunner.Then(string.Format("User selects records in \'TPurseTransactions\' by last OperationGuid where UserId=\"" +
                        "{0}\":", userId), ((string)(null)), table59, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table60 = new TechTalk.SpecFlow.Table(new string[] {
                        "CurrencyId",
                        "Direction",
                        "Destination",
                        "UserId",
                        "Amount",
                        "AmountInUsd",
                        "Product",
                        "ProductType"});
            table60.AddRow(new string[] {
                        "Eur",
                        "out",
                        "OutgoingPaymentToSidedBankCard",
                        string.Format("{0}", userId),
                        string.Format("{0}", amount),
                        "**Generated**",
                        string.Format("{0}", purseId),
                        "Epid"});
#line 654
 testRunner.Then(string.Format("User selects records in \'LimitRecords\' by last OperationGuid where UserId=\"{0}\":", userId), ((string)(null)), table60, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table61 = new TechTalk.SpecFlow.Table(new string[] {
                        "Amount",
                        "CurrencyId",
                        "ExternalServiceId",
                        "IsIncomingTransaction"});
            table61.AddRow(new string[] {
                        string.Format("{0}", amount),
                        "Eur",
                        "PrivateBank",
                        "false"});
#line 659
 testRunner.Then("User selects records in \'TExternalTransactions\' by OperationGuid", ((string)(null)), table61, "Then ");
#line 666
 testRunner.Given("User clicks on Отчеты menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table62 = new TechTalk.SpecFlow.Table(new string[] {
                        "Date",
                        "Name",
                        "Amount"});
            table62.AddRow(new string[] {
                        "**DD.MM.YY**",
                        "Комиссия за перевод на внешнюю банковскую карту",
                        string.Format("- € {0}", comission)});
            table62.AddRow(new string[] {
                        "**DD.MM.YY**",
                        "Перевод на внешнюю банковскую карту",
                        string.Format("- € {0}", amount)});
#line 667
 testRunner.Given("User see transactions list contains:", ((string)(null)), table62, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table63 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column1",
                        "Column2"});
            table63.AddRow(new string[] {
                        "Транзакция №",
                        "**TPurseTransactionId**"});
            table63.AddRow(new string[] {
                        "Заказ №",
                        "**InvoiceId**"});
            table63.AddRow(new string[] {
                        "Внешний ID",
                        "**ExternalTransactionId**"});
            table63.AddRow(new string[] {
                        "Дата",
                        "**dd.MM.yyyy HH:mm**"});
            table63.AddRow(new string[] {
                        "Продукт",
                        string.Format("e-Wallet {0}", purseId)});
            table63.AddRow(new string[] {
                        "Получатель",
                        "4149 49** **** 5641"});
            table63.AddRow(new string[] {
                        "Сумма",
                        string.Format("€ {0}", comission)});
            table63.AddRow(new string[] {
                        "Детали",
                        "Commission for outgoing payment to sided bank card VISA, x5641."});
#line 672
  testRunner.Given(string.Format("User see statement info for the UserId={0} where DestinationId=\'RefillExternalCar" +
                        "dFromPurseCommission\' row № 0 direction=\'out\':", userId), ((string)(null)), table63, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table64 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column1",
                        "Column2"});
            table64.AddRow(new string[] {
                        "Транзакция №",
                        "**TPurseTransactionId**"});
            table64.AddRow(new string[] {
                        "Заказ №",
                        "**InvoiceId**"});
            table64.AddRow(new string[] {
                        "Внешний ID",
                        "**ExternalTransactionId**"});
            table64.AddRow(new string[] {
                        "Дата",
                        "**dd.MM.yyyy HH:mm**"});
            table64.AddRow(new string[] {
                        "Продукт",
                        string.Format("e-Wallet {0}", purseId)});
            table64.AddRow(new string[] {
                        "Получатель",
                        "4149 49** **** 5641"});
            table64.AddRow(new string[] {
                        "Сумма",
                        string.Format("€ {0}", amount)});
            table64.AddRow(new string[] {
                        "Детали",
                        "Outgoing payment to sided bank card VISA, x5641."});
#line 683
  testRunner.Given(string.Format("User see statement info for the UserId={0} where DestinationId=\'RefillExternalCar" +
                        "dFromPurse\' row № 1 direction=\'out\':", userId), ((string)(null)), table64, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table65 = new TechTalk.SpecFlow.Table(new string[] {
                        "MessageType",
                        "Priority",
                        "Receiver",
                        "Title"});
            table65.AddRow(new string[] {
                        "Sms",
                        "13",
                        string.Format("{0}", user),
                        "-"});
            table65.AddRow(new string[] {
                        "Email",
                        "6",
                        "voronezh_bank_card_uitest@qa.swiftcom.uk",
                        "Отчет по операции №**Invoice**"});
            table65.AddRow(new string[] {
                        "PushAndroid",
                        "6",
                        "cLCkHIt27Rg:APA91bH1wbbomcaNRtCx31-cBrYKXzddd7I_H3zzlb7QK0tyZ7iCvXvQmypLfF0ehETKl" +
                            "UCSQkdmj-aPK33W6kz-27FsoM6svvxRv9PgPN7_GbVHovgbQS0Hqj-eJYXubjEtQXM9ra7T",
                        "-"});
            table65.AddRow(new string[] {
                        "PushIos",
                        "6",
                        "55954f64ce084e09330cd74a746708cb610c1c10db847ae57c69f58aa2d926e2",
                        "-"});
#line 695
 testRunner.Then(string.Format("User selects records in table \'Notification\' where UserId=\"{0}\" with \"**Invoice**" +
                        "\" replacing:", userId), ((string)(null)), table65, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("(Rietumu) (конвертация USD-EUR)")]
        [NUnit.Framework.CategoryAttribute("135427")]
        [NUnit.Framework.CategoryAttribute("RefillExternalCardFromPurse_BankQiwi_OFF")]
        [NUnit.Framework.TestCaseAttribute("5459 9172 6685 4223", "100.00", "3.50", "103.50", "+70078644084", "96879579-d3fa-4bfd-9b57-269a357fdaa3", "72621010Abac", "F03ABC6E-25D6-4C98-A06F-A36B9B510BAF", "1358862", "001-358862", "144177", "122122", "406604", "99B4BB5F-2BE5-4481-9E78-F2E30339DC88", null)]
        public virtual void RietumuКонвертацияUSD_EUR(string pANReceiver, string amount, string comission, string amountComission, string user, string userId, string password, string systemPurseUserId, string userPurseId, string purseId, string ePS_02TemporaryStoragePurse, string ePS_06Exchanges, string ePS_01Commissions, string ePSUserId, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "135427",
                    "RefillExternalCardFromPurse_BankQiwi_OFF"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("(Rietumu) (конвертация USD-EUR)", @__tags);
#line 712
this.ScenarioSetup(scenarioInfo);
#line 714
 testRunner.Given("User goes to SignIn page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 715
 testRunner.Given(string.Format("User signin \"Epayments\" with \"{0}\" password \"{1}\"", user, password), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 716
 testRunner.Given("User see Account Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 718
 testRunner.Given("User clicks on Перевести menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 719
 testRunner.Given("User clicks on \"На банковскую карту\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 720
 testRunner.Then("Section \'Amount including fees\' is: $ 0.00 (Комиссия: $ 0.00)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 722
 testRunner.Then(string.Format("\'Номер банковской карты\' set to \'{0}\'", pANReceiver), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 723
 testRunner.Then("\'Владелец\' set to \'nik ivanov\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 724
 testRunner.Then(string.Format("\'Отдаваемая сумма\' set to \'{0}\'", amount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 727
 testRunner.Then("\'Получаемая сумма\' selector set to \'EUR\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 729
 testRunner.Then(string.Format("Section \'Amount including fees\' is: $ {0} (Комиссия: $ {1})", amountComission, comission), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table66 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column1",
                        "Column2"});
            table66.AddRow(new string[] {
                        "Минимальная сумма перевода:",
                        "€ 10.00"});
            table66.AddRow(new string[] {
                        "Максимальная сумма перевода:",
                        "€ 2 000.00"});
            table66.AddRow(new string[] {
                        "Комиссия:",
                        "2.9%min $ 3.50"});
#line 731
 testRunner.Given("User see limits table", ((string)(null)), table66, "Given ");
#line 736
 testRunner.Then("Currency rate placeholder appears", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 738
 testRunner.Given("User clicks on \"Далее\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 739
 testRunner.Given("Set StartTime for DB search", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table67 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column1",
                        "Column2"});
            table67.AddRow(new string[] {
                        "Отправитель",
                        string.Format("USD, e-Wallet {0}", purseId)});
            table67.AddRow(new string[] {
                        "Банковская карта",
                        "Mastercard, x4223"});
            table67.AddRow(new string[] {
                        "Отдаваемая сумма",
                        string.Format("$ {0}", amount)});
            table67.AddRow(new string[] {
                        "Комиссия",
                        string.Format("$ {0}", comission)});
            table67.AddRow(new string[] {
                        "Сумма с комиссией",
                        string.Format("$ {0}", amountComission)});
            table67.AddRow(new string[] {
                        "Курс обмена",
                        "$ 1.00 = € **rateWM**"});
            table67.AddRow(new string[] {
                        "Получаемая сумма",
                        "€ **amount * rate**"});
#line 741
 testRunner.Given("User see table", ((string)(null)), table67, "Given ");
#line 751
 testRunner.Given("User clicks on button \"Подтвердить\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table68 = new TechTalk.SpecFlow.Table(new string[] {
                        "OperationType",
                        "Recipient",
                        "UserId",
                        "IsUsed"});
            table68.AddRow(new string[] {
                        "MassPayment",
                        string.Format("{0}", user),
                        string.Format("{0}", userId),
                        "false"});
#line 752
 testRunner.Then("User type SMS sent to:", ((string)(null)), table68, "Then ");
#line 755
 testRunner.Given("Set StartTime for DB search", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 756
 testRunner.Then("Memorize eWallet section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 757
 testRunner.Given("User clicks on \"Оплатить\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 758
 testRunner.Then("User gets message \"Обработка платежа займет несколько минут. Дождитесь результата" +
                    " перевода или продолжите работу в личном кабинете\" on Multiform", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 761
 testRunner.Then("User gets message \"Платеж успешно отправлен\" on Multiform", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 762
 testRunner.Then("Make screenshot", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 764
 testRunner.Given("User closes multiform by clicking on \"Закрыть\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 765
 testRunner.Then("Redirected to /#/transfer/", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table69 = new TechTalk.SpecFlow.Table(new string[] {
                        "USD",
                        "EUR",
                        "RUB"});
            table69.AddRow(new string[] {
                        string.Format("-{0}", amountComission),
                        "0.00",
                        "0.00"});
#line 767
  testRunner.Then("eWallet updated sections are:", ((string)(null)), table69, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table70 = new TechTalk.SpecFlow.Table(new string[] {
                        "OperationTypeId",
                        "Amount",
                        "Fee"});
            table70.AddRow(new string[] {
                        "123",
                        string.Format("{0}", amount),
                        string.Format("{0}", comission)});
#line 773
 testRunner.Then("Preparing records in \'InvoicePositions\':", ((string)(null)), table70, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table71 = new TechTalk.SpecFlow.Table(new string[] {
                        "State",
                        "Details",
                        "SenderSystemId",
                        "SenderIdentity",
                        "ReceiverSystemId",
                        "ReceiverIdentity",
                        "CurrencyId",
                        "PaymentSource",
                        "ReceiverIdentityType",
                        "UserId"});
            table71.AddRow(new string[] {
                        "Successed",
                        "",
                        "WaveCrest",
                        string.Format("{0}", purseId),
                        "Rietumu",
                        "5459 91** **** 4223",
                        "Usd",
                        "EWallet",
                        "Purse",
                        string.Format("{0}", userId)});
#line 778
 testRunner.Then(string.Format("User selects last record in \'Invoices and InvoicePositions\' where UserId=\"{0}\":", userId), ((string)(null)), table71, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table72 = new TechTalk.SpecFlow.Table(new string[] {
                        "Amount",
                        "DestinationId",
                        "Direction",
                        "UserId",
                        "CurrencyId",
                        "PurseId",
                        "RefundCount"});
            table72.AddRow(new string[] {
                        string.Format("{0}", amount),
                        "RefillExternalCardFromPurse",
                        "out",
                        string.Format("{0}", userId),
                        "Usd",
                        string.Format("{0}", userPurseId),
                        "0"});
            table72.AddRow(new string[] {
                        string.Format("{0}", amount),
                        "RefillExternalCardFromPurse",
                        "in",
                        string.Format("{0}", ePSUserId),
                        "Usd",
                        string.Format("{0}", ePS_02TemporaryStoragePurse),
                        "0"});
            table72.AddRow(new string[] {
                        string.Format("{0}", comission),
                        "RefillExternalCardFromPurseCommission",
                        "out",
                        string.Format("{0}", userId),
                        "Usd",
                        string.Format("{0}", userPurseId),
                        "0"});
            table72.AddRow(new string[] {
                        string.Format("{0}", comission),
                        "RefillExternalCardFromPurseCommission",
                        "in",
                        string.Format("{0}", ePSUserId),
                        "Usd",
                        string.Format("{0}", ePS_02TemporaryStoragePurse),
                        "0"});
            table72.AddRow(new string[] {
                        string.Format("{0}", amount),
                        "CurrencyExchangeUsdAndEur",
                        "out",
                        string.Format("{0}", ePSUserId),
                        "Usd",
                        string.Format("{0}", ePS_02TemporaryStoragePurse),
                        "0"});
            table72.AddRow(new string[] {
                        string.Format("{0}", amount),
                        "CurrencyExchangeUsdAndEur",
                        "in",
                        string.Format("{0}", systemPurseUserId),
                        "Usd",
                        string.Format("{0}", ePS_06Exchanges),
                        "0"});
            table72.AddRow(new string[] {
                        "**amount * rate**",
                        "CurrencyExchangeUsdAndEur",
                        "out",
                        string.Format("{0}", systemPurseUserId),
                        "Eur",
                        string.Format("{0}", ePS_06Exchanges),
                        "0"});
            table72.AddRow(new string[] {
                        "**amount * rate**",
                        "CurrencyExchangeUsdAndEur",
                        "in",
                        string.Format("{0}", ePSUserId),
                        "Eur",
                        string.Format("{0}", ePS_02TemporaryStoragePurse),
                        "0"});
            table72.AddRow(new string[] {
                        "**amount * rate**",
                        "RefillExternalCardFromPurse",
                        "out",
                        string.Format("{0}", ePSUserId),
                        "Eur",
                        string.Format("{0}", ePS_02TemporaryStoragePurse),
                        "0"});
            table72.AddRow(new string[] {
                        string.Format("{0}", comission),
                        "RefillExternalCardFromPurseCommission",
                        "out",
                        string.Format("{0}", ePSUserId),
                        "Usd",
                        string.Format("{0}", ePS_02TemporaryStoragePurse),
                        "0"});
            table72.AddRow(new string[] {
                        string.Format("{0}", comission),
                        "RefillExternalCardFromPurseCommission",
                        "in",
                        string.Format("{0}", ePSUserId),
                        "Usd",
                        string.Format("{0}", ePS_01Commissions),
                        "0"});
#line 784
   testRunner.Then(string.Format("User selects records in \'TPurseTransactions\' by last OperationGuid where UserId=\"" +
                        "{0}\":", userId), ((string)(null)), table72, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table73 = new TechTalk.SpecFlow.Table(new string[] {
                        "CurrencyId",
                        "Direction",
                        "Destination",
                        "UserId",
                        "Amount",
                        "AmountInUsd",
                        "Product",
                        "ProductType"});
            table73.AddRow(new string[] {
                        "Usd",
                        "out",
                        "OutgoingPaymentToSidedBankCard",
                        string.Format("{0}", userId),
                        string.Format("{0}", amount),
                        "**Generated**",
                        string.Format("{0}", purseId),
                        "Epid"});
#line 800
 testRunner.Then(string.Format("User selects records in \'LimitRecords\' by last OperationGuid where UserId=\"{0}\":", userId), ((string)(null)), table73, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table74 = new TechTalk.SpecFlow.Table(new string[] {
                        "Amount",
                        "CurrencyId",
                        "ExternalServiceId",
                        "IsIncomingTransaction"});
            table74.AddRow(new string[] {
                        "**amount * rate**",
                        "Eur",
                        "Rietumu",
                        "false"});
#line 805
 testRunner.Then("User selects records in \'TExternalTransactions\' by OperationGuid", ((string)(null)), table74, "Then ");
#line 812
 testRunner.Given("User clicks on Отчеты menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table75 = new TechTalk.SpecFlow.Table(new string[] {
                        "Date",
                        "Name",
                        "Amount"});
            table75.AddRow(new string[] {
                        "**DD.MM.YY**",
                        "Комиссия за перевод на внешнюю банковскую карту",
                        string.Format("- $ {0}", comission)});
            table75.AddRow(new string[] {
                        "**DD.MM.YY**",
                        "Перевод на внешнюю банковскую карту",
                        string.Format("- $ {0}", amount)});
#line 813
 testRunner.Given("User see transactions list contains:", ((string)(null)), table75, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table76 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column1",
                        "Column2"});
            table76.AddRow(new string[] {
                        "Транзакция №",
                        "**TPurseTransactionId**"});
            table76.AddRow(new string[] {
                        "Заказ №",
                        "**InvoiceId**"});
            table76.AddRow(new string[] {
                        "Внешний ID",
                        "**ExternalTransactionId**"});
            table76.AddRow(new string[] {
                        "Дата",
                        "**dd.MM.yyyy HH:mm**"});
            table76.AddRow(new string[] {
                        "Продукт",
                        string.Format("e-Wallet {0}", purseId)});
            table76.AddRow(new string[] {
                        "Получатель",
                        "5459 91** **** 4223"});
            table76.AddRow(new string[] {
                        "Сумма",
                        string.Format("$ {0}", comission)});
            table76.AddRow(new string[] {
                        "Детали",
                        "Commission for outgoing payment to sided bank card MasterCard, x4223. Amount tran" +
                            "sferred to card: €**amount * rate**, Rate: $1 = €**rate**."});
#line 818
 testRunner.Given(string.Format("User see statement info for the UserId={0} where DestinationId=\'RefillExternalCar" +
                        "dFromPurseCommission\' row № 0 direction=\'out\':", userId), ((string)(null)), table76, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table77 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column1",
                        "Column2"});
            table77.AddRow(new string[] {
                        "Транзакция №",
                        "**TPurseTransactionId**"});
            table77.AddRow(new string[] {
                        "Заказ №",
                        "**InvoiceId**"});
            table77.AddRow(new string[] {
                        "Внешний ID",
                        "**ExternalTransactionId**"});
            table77.AddRow(new string[] {
                        "Дата",
                        "**dd.MM.yyyy HH:mm**"});
            table77.AddRow(new string[] {
                        "Продукт",
                        string.Format("e-Wallet {0}", purseId)});
            table77.AddRow(new string[] {
                        "Получатель",
                        "5459 91** **** 4223"});
            table77.AddRow(new string[] {
                        "Сумма",
                        string.Format("$ {0}", amount)});
            table77.AddRow(new string[] {
                        "Детали",
                        "Outgoing payment to sided bank card MasterCard, x4223. Amount transferred to card" +
                            ": €**amount * rate**, Rate: $1 = €**rate**."});
#line 829
 testRunner.Given(string.Format("User see statement info for the UserId={0} where DestinationId=\'RefillExternalCar" +
                        "dFromPurse\' row № 1 direction=\'out\':", userId), ((string)(null)), table77, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table78 = new TechTalk.SpecFlow.Table(new string[] {
                        "MessageType",
                        "Priority",
                        "Receiver",
                        "Title"});
            table78.AddRow(new string[] {
                        "Email",
                        "6",
                        "voronezh_bank_card_uitest@qa.swiftcom.uk",
                        "Отчет по операции №**Invoice**"});
            table78.AddRow(new string[] {
                        "PushAndroid",
                        "6",
                        "cLCkHIt27Rg:APA91bH1wbbomcaNRtCx31-cBrYKXzddd7I_H3zzlb7QK0tyZ7iCvXvQmypLfF0ehETKl" +
                            "UCSQkdmj-aPK33W6kz-27FsoM6svvxRv9PgPN7_GbVHovgbQS0Hqj-eJYXubjEtQXM9ra7T",
                        "-"});
            table78.AddRow(new string[] {
                        "PushIos",
                        "6",
                        "55954f64ce084e09330cd74a746708cb610c1c10db847ae57c69f58aa2d926e2",
                        "-"});
#line 841
 testRunner.Then(string.Format("User selects records in table \'Notification\' where UserId=\"{0}\" with \"**Invoice**" +
                        "\" replacing:", userId), ((string)(null)), table78, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("(Rietumu) (без конвертации USD-USD)")]
        [NUnit.Framework.CategoryAttribute("3092764")]
        [NUnit.Framework.TestCaseAttribute("5460431001821577", "100.00", "3.50", "103.50", "+70078644084", "96879579-d3fa-4bfd-9b57-269a357fdaa3", "72621010Abac", "F03ABC6E-25D6-4C98-A06F-A36B9B510BAF", "1358862", "001-358862", "144177", "122122", "406604", "99B4BB5F-2BE5-4481-9E78-F2E30339DC88", null)]
        public virtual void RietumuБезКонвертацииUSD_USD(string pANReceiver, string amount, string comission, string amountComission, string user, string userId, string password, string systemPurseUserId, string userPurseId, string purseId, string ePS_02TemporaryStoragePurse, string ePS_06Exchanges, string ePS_01Commissions, string ePSUserId, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "3092764"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("(Rietumu) (без конвертации USD-USD)", @__tags);
#line 860
this.ScenarioSetup(scenarioInfo);
#line 862
 testRunner.Given("User goes to SignIn page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 863
 testRunner.Given(string.Format("User signin \"Epayments\" with \"{0}\" password \"{1}\"", user, password), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 864
 testRunner.Given("User see Account Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 866
 testRunner.Given("User clicks on Перевести menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 867
 testRunner.Given("User clicks on \"На банковскую карту\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 868
 testRunner.Then("Section \'Amount including fees\' is: $ 0.00 (Комиссия: $ 0.00)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 870
 testRunner.Then(string.Format("\'Номер банковской карты\' set to \'{0}\'", pANReceiver), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 871
 testRunner.Then("\'Владелец\' set to \'nik ivanov\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 872
 testRunner.Then(string.Format("\'Отдаваемая сумма\' set to \'{0}\'", amount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 874
 testRunner.Then(string.Format("Section \'Amount including fees\' is: $ {0} (Комиссия: $ {1})", amountComission, comission), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table79 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column1",
                        "Column2"});
            table79.AddRow(new string[] {
                        "Минимальная сумма перевода:",
                        "$ 10.00"});
            table79.AddRow(new string[] {
                        "Максимальная сумма перевода:",
                        "$ 2 000.00"});
            table79.AddRow(new string[] {
                        "Комиссия:",
                        "2.9%min $ 3.50"});
#line 876
 testRunner.Given("User see limits table", ((string)(null)), table79, "Given ");
#line 882
 testRunner.Given("User clicks on \"Далее\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table80 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column1",
                        "Column2"});
            table80.AddRow(new string[] {
                        "Отправитель",
                        string.Format("USD, e-Wallet {0}", purseId)});
            table80.AddRow(new string[] {
                        "Банковская карта",
                        "Mastercard, x1577"});
            table80.AddRow(new string[] {
                        "Отдаваемая сумма",
                        string.Format("$ {0}", amount)});
            table80.AddRow(new string[] {
                        "Комиссия",
                        string.Format("$ {0}", comission)});
            table80.AddRow(new string[] {
                        "Сумма с комиссией",
                        string.Format("$ {0}", amountComission)});
            table80.AddRow(new string[] {
                        "Получаемая сумма",
                        string.Format("$ {0}", amount)});
#line 883
 testRunner.Given("User see table", ((string)(null)), table80, "Given ");
#line 892
 testRunner.Given("Set StartTime for DB search", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 893
 testRunner.Given("User clicks on button \"Подтвердить\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table81 = new TechTalk.SpecFlow.Table(new string[] {
                        "OperationType",
                        "Recipient",
                        "UserId",
                        "IsUsed"});
            table81.AddRow(new string[] {
                        "MassPayment",
                        string.Format("{0}", user),
                        string.Format("{0}", userId),
                        "false"});
#line 894
 testRunner.Then("User type SMS sent to:", ((string)(null)), table81, "Then ");
#line 897
 testRunner.Then("Memorize eWallet section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 898
 testRunner.Given("User clicks on \"Оплатить\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 899
 testRunner.Then("User gets message \"Обработка платежа займет несколько минут. Дождитесь результата" +
                    " перевода или продолжите работу в личном кабинете\" on Multiform", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 902
 testRunner.Then("User gets message \"Платеж успешно отправлен\" on Multiform", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 903
 testRunner.Then("Make screenshot", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 905
 testRunner.Given("User closes multiform by clicking on \"Закрыть\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 906
 testRunner.Then("Redirected to /#/transfer/", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table82 = new TechTalk.SpecFlow.Table(new string[] {
                        "USD",
                        "EUR",
                        "RUB"});
            table82.AddRow(new string[] {
                        string.Format("-{0}", amountComission),
                        "0.00",
                        "0.00"});
#line 907
  testRunner.Then("eWallet updated sections are:", ((string)(null)), table82, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table83 = new TechTalk.SpecFlow.Table(new string[] {
                        "OperationTypeId",
                        "Amount",
                        "Fee"});
            table83.AddRow(new string[] {
                        "123",
                        string.Format("{0}", amount),
                        string.Format("{0}", comission)});
#line 912
 testRunner.Then("Preparing records in \'InvoicePositions\':", ((string)(null)), table83, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table84 = new TechTalk.SpecFlow.Table(new string[] {
                        "State",
                        "Details",
                        "SenderSystemId",
                        "SenderIdentity",
                        "ReceiverSystemId",
                        "ReceiverIdentity",
                        "CurrencyId",
                        "PaymentSource",
                        "ReceiverIdentityType",
                        "UserId"});
            table84.AddRow(new string[] {
                        "Successed",
                        "",
                        "WaveCrest",
                        string.Format("{0}", purseId),
                        "Rietumu",
                        "5460 43** **** 1577",
                        "Usd",
                        "EWallet",
                        "Purse",
                        string.Format("{0}", userId)});
#line 917
 testRunner.Then(string.Format("User selects last record in \'Invoices and InvoicePositions\' where UserId=\"{0}\":", userId), ((string)(null)), table84, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table85 = new TechTalk.SpecFlow.Table(new string[] {
                        "Amount",
                        "DestinationId",
                        "Direction",
                        "UserId",
                        "CurrencyId",
                        "PurseId",
                        "RefundCount"});
            table85.AddRow(new string[] {
                        string.Format("{0}", amount),
                        "RefillExternalCardFromPurse",
                        "out",
                        string.Format("{0}", userId),
                        "Usd",
                        string.Format("{0}", userPurseId),
                        "0"});
            table85.AddRow(new string[] {
                        string.Format("{0}", amount),
                        "RefillExternalCardFromPurse",
                        "in",
                        string.Format("{0}", ePSUserId),
                        "Usd",
                        string.Format("{0}", ePS_02TemporaryStoragePurse),
                        "0"});
            table85.AddRow(new string[] {
                        string.Format("{0}", comission),
                        "RefillExternalCardFromPurseCommission",
                        "out",
                        string.Format("{0}", userId),
                        "Usd",
                        string.Format("{0}", userPurseId),
                        "0"});
            table85.AddRow(new string[] {
                        string.Format("{0}", comission),
                        "RefillExternalCardFromPurseCommission",
                        "in",
                        string.Format("{0}", ePSUserId),
                        "Usd",
                        string.Format("{0}", ePS_02TemporaryStoragePurse),
                        "0"});
            table85.AddRow(new string[] {
                        string.Format("{0}", amount),
                        "RefillExternalCardFromPurse",
                        "out",
                        string.Format("{0}", ePSUserId),
                        "Usd",
                        string.Format("{0}", ePS_02TemporaryStoragePurse),
                        "0"});
            table85.AddRow(new string[] {
                        string.Format("{0}", comission),
                        "RefillExternalCardFromPurseCommission",
                        "out",
                        string.Format("{0}", ePSUserId),
                        "Usd",
                        string.Format("{0}", ePS_02TemporaryStoragePurse),
                        "0"});
            table85.AddRow(new string[] {
                        string.Format("{0}", comission),
                        "RefillExternalCardFromPurseCommission",
                        "in",
                        string.Format("{0}", ePSUserId),
                        "Usd",
                        string.Format("{0}", ePS_01Commissions),
                        "0"});
#line 923
   testRunner.Then(string.Format("User selects records in \'TPurseTransactions\' by last OperationGuid where UserId=\"" +
                        "{0}\":", userId), ((string)(null)), table85, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table86 = new TechTalk.SpecFlow.Table(new string[] {
                        "CurrencyId",
                        "Direction",
                        "Destination",
                        "UserId",
                        "Amount",
                        "AmountInUsd",
                        "Product",
                        "ProductType"});
            table86.AddRow(new string[] {
                        "Usd",
                        "out",
                        "OutgoingPaymentToSidedBankCard",
                        string.Format("{0}", userId),
                        string.Format("{0}", amount),
                        "**Generated**",
                        string.Format("{0}", purseId),
                        "Epid"});
#line 934
 testRunner.Then(string.Format("User selects records in \'LimitRecords\' by last OperationGuid where UserId=\"{0}\":", userId), ((string)(null)), table86, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table87 = new TechTalk.SpecFlow.Table(new string[] {
                        "Amount",
                        "CurrencyId",
                        "ExternalServiceId",
                        "IsIncomingTransaction"});
            table87.AddRow(new string[] {
                        string.Format("{0}", amount),
                        "Usd",
                        "Rietumu",
                        "false"});
#line 939
 testRunner.Then("User selects records in \'TExternalTransactions\' by OperationGuid", ((string)(null)), table87, "Then ");
#line 946
 testRunner.Given("User clicks on Отчеты menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table88 = new TechTalk.SpecFlow.Table(new string[] {
                        "Date",
                        "Name",
                        "Amount"});
            table88.AddRow(new string[] {
                        "**DD.MM.YY**",
                        "Комиссия за перевод на внешнюю банковскую карту",
                        string.Format("- $ {0}", comission)});
            table88.AddRow(new string[] {
                        "**DD.MM.YY**",
                        "Перевод на внешнюю банковскую карту",
                        string.Format("- $ {0}", amount)});
#line 947
 testRunner.Given("User see transactions list contains:", ((string)(null)), table88, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table89 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column1",
                        "Column2"});
            table89.AddRow(new string[] {
                        "Транзакция №",
                        "**TPurseTransactionId**"});
            table89.AddRow(new string[] {
                        "Заказ №",
                        "**InvoiceId**"});
            table89.AddRow(new string[] {
                        "Внешний ID",
                        "**ExternalTransactionId**"});
            table89.AddRow(new string[] {
                        "Дата",
                        "**dd.MM.yyyy HH:mm**"});
            table89.AddRow(new string[] {
                        "Продукт",
                        string.Format("e-Wallet {0}", purseId)});
            table89.AddRow(new string[] {
                        "Получатель",
                        "5460 43** **** 1577"});
            table89.AddRow(new string[] {
                        "Сумма",
                        string.Format("$ {0}", comission)});
            table89.AddRow(new string[] {
                        "Детали",
                        "Commission for outgoing payment to sided bank card MasterCard, x1577."});
#line 953
 testRunner.Given(string.Format("User see statement info for the UserId={0} where DestinationId=\'RefillExternalCar" +
                        "dFromPurseCommission\' row № 0 direction=\'out\':", userId), ((string)(null)), table89, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table90 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column1",
                        "Column2"});
            table90.AddRow(new string[] {
                        "Транзакция №",
                        "**TPurseTransactionId**"});
            table90.AddRow(new string[] {
                        "Заказ №",
                        "**InvoiceId**"});
            table90.AddRow(new string[] {
                        "Внешний ID",
                        "**ExternalTransactionId**"});
            table90.AddRow(new string[] {
                        "Дата",
                        "**dd.MM.yyyy HH:mm**"});
            table90.AddRow(new string[] {
                        "Продукт",
                        string.Format("e-Wallet {0}", purseId)});
            table90.AddRow(new string[] {
                        "Получатель",
                        "5460 43** **** 1577"});
            table90.AddRow(new string[] {
                        "Сумма",
                        string.Format("$ {0}", amount)});
            table90.AddRow(new string[] {
                        "Детали",
                        "Outgoing payment to sided bank card MasterCard, x1577."});
#line 964
 testRunner.Given(string.Format("User see statement info for the UserId={0} where DestinationId=\'RefillExternalCar" +
                        "dFromPurse\' row № 1 direction=\'out\':", userId), ((string)(null)), table90, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table91 = new TechTalk.SpecFlow.Table(new string[] {
                        "MessageType",
                        "Priority",
                        "Receiver",
                        "Title"});
            table91.AddRow(new string[] {
                        "Sms",
                        "13",
                        string.Format("{0}", user),
                        "-"});
            table91.AddRow(new string[] {
                        "Email",
                        "6",
                        "voronezh_bank_card_uitest@qa.swiftcom.uk",
                        "Отчет по операции №**Invoice**"});
            table91.AddRow(new string[] {
                        "PushAndroid",
                        "6",
                        "cLCkHIt27Rg:APA91bH1wbbomcaNRtCx31-cBrYKXzddd7I_H3zzlb7QK0tyZ7iCvXvQmypLfF0ehETKl" +
                            "UCSQkdmj-aPK33W6kz-27FsoM6svvxRv9PgPN7_GbVHovgbQS0Hqj-eJYXubjEtQXM9ra7T",
                        "-"});
            table91.AddRow(new string[] {
                        "PushIos",
                        "6",
                        "55954f64ce084e09330cd74a746708cb610c1c10db847ae57c69f58aa2d926e2",
                        "-"});
#line 976
 testRunner.Then(string.Format("User selects records in table \'Notification\' where UserId=\"{0}\" with \"**Invoice**" +
                        "\" replacing:", userId), ((string)(null)), table91, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("(QIWI) (конвертация USD-RUB)")]
        [NUnit.Framework.CategoryAttribute("1720172")]
        [NUnit.Framework.TestCaseAttribute("5106 2110 1481 2411", "100.00", "3.50", "103.50", "+70078644084", "96879579-d3fa-4bfd-9b57-269a357fdaa3", "72621010Abac", "F03ABC6E-25D6-4C98-A06F-A36B9B510BAF", "1358862", "001-358862", "144177", "122122", "406604", "99B4BB5F-2BE5-4481-9E78-F2E30339DC88", null)]
        public virtual void QIWIКонвертацияUSD_RUB(string pANReceiver, string amount, string comission, string amountComission, string user, string userId, string password, string systemPurseUserId, string userPurseId, string purseId, string ePS_02TemporaryStoragePurse, string ePS_06Exchanges, string ePS_01Commissions, string ePSUserId, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "1720172"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("(QIWI) (конвертация USD-RUB)", @__tags);
#line 993
this.ScenarioSetup(scenarioInfo);
#line 995
 testRunner.Given("User goes to SignIn page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 996
 testRunner.Given(string.Format("User signin \"Epayments\" with \"{0}\" password \"{1}\"", user, password), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 997
 testRunner.Given("User see Account Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 999
 testRunner.Given("User clicks on Перевести menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 1000
 testRunner.Given("User clicks on \"На банковскую карту\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 1001
 testRunner.Then("Section \'Amount including fees\' is: $ 0.00 (Комиссия: $ 0.00)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1003
 testRunner.Then(string.Format("\'Номер банковской карты\' set to \'{0}\'", pANReceiver), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1004
 testRunner.Then("\'Владелец\' set to \'nik ivanov\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1005
 testRunner.Then(string.Format("\'Отдаваемая сумма\' set to \'{0}\'", amount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1007
 testRunner.Then("\'Получаемая сумма\' selector set to \'RUB\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1009
 testRunner.Then(string.Format("Section \'Amount including fees\' is: $ {0} (Комиссия: $ {1})", amountComission, comission), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table92 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column1",
                        "Column2"});
            table92.AddRow(new string[] {
                        "Минимальная сумма перевода:",
                        "₽ 500.00"});
            table92.AddRow(new string[] {
                        "Максимальная сумма перевода:",
                        "₽ 75 000.00"});
            table92.AddRow(new string[] {
                        "Комиссия:",
                        "2.9%min $ 3.50"});
#line 1011
 testRunner.Given("User see limits table", ((string)(null)), table92, "Given ");
#line 1016
 testRunner.Then("Currency rate placeholder appears", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1018
 testRunner.Given("User clicks on \"Далее\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table93 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column1",
                        "Column2"});
            table93.AddRow(new string[] {
                        "Отправитель",
                        string.Format("USD, e-Wallet {0}", purseId)});
            table93.AddRow(new string[] {
                        "Банковская карта",
                        "Mastercard, x2411"});
            table93.AddRow(new string[] {
                        "Отдаваемая сумма",
                        string.Format("$ {0}", amount)});
            table93.AddRow(new string[] {
                        "Комиссия",
                        string.Format("$ {0}", comission)});
            table93.AddRow(new string[] {
                        "Сумма с комиссией",
                        string.Format("$ {0}", amountComission)});
            table93.AddRow(new string[] {
                        "Курс обмена",
                        "$ 1.00 = ₽ **rateWM**"});
            table93.AddRow(new string[] {
                        "Получаемая сумма",
                        "₽ **amount * rate**"});
#line 1019
 testRunner.Given("User see table", ((string)(null)), table93, "Given ");
#line 1029
 testRunner.Given("Set StartTime for DB search", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 1030
 testRunner.Given("User clicks on button \"Подтвердить\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table94 = new TechTalk.SpecFlow.Table(new string[] {
                        "OperationType",
                        "Recipient",
                        "UserId",
                        "IsUsed"});
            table94.AddRow(new string[] {
                        "MassPayment",
                        string.Format("{0}", user),
                        string.Format("{0}", userId),
                        "false"});
#line 1031
 testRunner.Then("User type SMS sent to:", ((string)(null)), table94, "Then ");
#line 1034
 testRunner.Then("Memorize eWallet section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1035
 testRunner.Given("User clicks on \"Оплатить\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 1036
 testRunner.Then("User gets message \"Обработка платежа займет несколько минут. Дождитесь результата" +
                    " перевода или продолжите работу в личном кабинете\" on Multiform", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1039
 testRunner.Then("User gets message \"Платеж успешно отправлен\" on Multiform", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1040
 testRunner.Then("Make screenshot", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1042
 testRunner.Given("User closes multiform by clicking on \"Закрыть\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 1043
 testRunner.Then("Redirected to /#/transfer/", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table95 = new TechTalk.SpecFlow.Table(new string[] {
                        "USD",
                        "EUR",
                        "RUB"});
            table95.AddRow(new string[] {
                        string.Format("-{0}", amountComission),
                        "0.00",
                        "0.00"});
#line 1045
  testRunner.Then("eWallet updated sections are:", ((string)(null)), table95, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table96 = new TechTalk.SpecFlow.Table(new string[] {
                        "OperationTypeId",
                        "Amount",
                        "Fee"});
            table96.AddRow(new string[] {
                        "155",
                        string.Format("{0}", amount),
                        string.Format("{0}", comission)});
#line 1051
 testRunner.Then("Preparing records in \'InvoicePositions\':", ((string)(null)), table96, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table97 = new TechTalk.SpecFlow.Table(new string[] {
                        "State",
                        "Details",
                        "SenderSystemId",
                        "SenderIdentity",
                        "ReceiverSystemId",
                        "ReceiverIdentity",
                        "CurrencyId",
                        "PaymentSource",
                        "ReceiverIdentityType",
                        "UserId"});
            table97.AddRow(new string[] {
                        "Successed",
                        "",
                        "WaveCrest",
                        string.Format("{0}", purseId),
                        "BankQiwi",
                        "5106 21** **** 2411",
                        "Usd",
                        "EWallet",
                        "Purse",
                        string.Format("{0}", userId)});
#line 1056
 testRunner.Then(string.Format("User selects last record in \'Invoices and InvoicePositions\' where UserId=\"{0}\":", userId), ((string)(null)), table97, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table98 = new TechTalk.SpecFlow.Table(new string[] {
                        "Amount",
                        "DestinationId",
                        "Direction",
                        "UserId",
                        "CurrencyId",
                        "PurseId",
                        "RefundCount"});
            table98.AddRow(new string[] {
                        string.Format("{0}", amount),
                        "RefillExternalCardFromPurse",
                        "out",
                        string.Format("{0}", userId),
                        "Usd",
                        string.Format("{0}", userPurseId),
                        "0"});
            table98.AddRow(new string[] {
                        string.Format("{0}", amount),
                        "RefillExternalCardFromPurse",
                        "in",
                        string.Format("{0}", ePSUserId),
                        "Usd",
                        string.Format("{0}", ePS_02TemporaryStoragePurse),
                        "0"});
            table98.AddRow(new string[] {
                        string.Format("{0}", comission),
                        "RefillExternalCardFromPurseCommission",
                        "out",
                        string.Format("{0}", userId),
                        "Usd",
                        string.Format("{0}", userPurseId),
                        "0"});
            table98.AddRow(new string[] {
                        string.Format("{0}", comission),
                        "RefillExternalCardFromPurseCommission",
                        "in",
                        string.Format("{0}", ePSUserId),
                        "Usd",
                        string.Format("{0}", ePS_02TemporaryStoragePurse),
                        "0"});
            table98.AddRow(new string[] {
                        string.Format("{0}", amount),
                        "CurrencyExchangeUsdAndEur",
                        "out",
                        string.Format("{0}", ePSUserId),
                        "Usd",
                        string.Format("{0}", ePS_02TemporaryStoragePurse),
                        "0"});
            table98.AddRow(new string[] {
                        string.Format("{0}", amount),
                        "CurrencyExchangeUsdAndEur",
                        "in",
                        string.Format("{0}", systemPurseUserId),
                        "Usd",
                        string.Format("{0}", ePS_06Exchanges),
                        "0"});
            table98.AddRow(new string[] {
                        "**amount * rate**",
                        "CurrencyExchangeUsdAndEur",
                        "out",
                        string.Format("{0}", systemPurseUserId),
                        "Rub",
                        string.Format("{0}", ePS_06Exchanges),
                        "0"});
            table98.AddRow(new string[] {
                        "**amount * rate**",
                        "CurrencyExchangeUsdAndEur",
                        "in",
                        string.Format("{0}", ePSUserId),
                        "Rub",
                        string.Format("{0}", ePS_02TemporaryStoragePurse),
                        "0"});
            table98.AddRow(new string[] {
                        "**amount * rate**",
                        "RefillExternalCardFromPurse",
                        "out",
                        string.Format("{0}", ePSUserId),
                        "Rub",
                        string.Format("{0}", ePS_02TemporaryStoragePurse),
                        "0"});
            table98.AddRow(new string[] {
                        string.Format("{0}", comission),
                        "RefillExternalCardFromPurseCommission",
                        "out",
                        string.Format("{0}", ePSUserId),
                        "Usd",
                        string.Format("{0}", ePS_02TemporaryStoragePurse),
                        "0"});
            table98.AddRow(new string[] {
                        string.Format("{0}", comission),
                        "RefillExternalCardFromPurseCommission",
                        "in",
                        string.Format("{0}", ePSUserId),
                        "Usd",
                        string.Format("{0}", ePS_01Commissions),
                        "0"});
            table98.AddRow(new string[] {
                        "0.025",
                        "RefillExternalCardFromPurseProviderCommission",
                        "out",
                        string.Format("{0}", ePSUserId),
                        "Rub",
                        string.Format("{0}", ePS_01Commissions),
                        "0"});
#line 1062
   testRunner.Then(string.Format("User selects records in \'TPurseTransactions\' by last OperationGuid where UserId=\"" +
                        "{0}\":", userId), ((string)(null)), table98, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table99 = new TechTalk.SpecFlow.Table(new string[] {
                        "CurrencyId",
                        "Direction",
                        "Destination",
                        "UserId",
                        "Amount",
                        "AmountInUsd",
                        "Product",
                        "ProductType"});
            table99.AddRow(new string[] {
                        "Usd",
                        "out",
                        "OutgoingPaymentToSidedBankCard",
                        string.Format("{0}", userId),
                        string.Format("{0}", amount),
                        "**Generated**",
                        string.Format("{0}", purseId),
                        "Epid"});
#line 1079
 testRunner.Then(string.Format("User selects records in \'LimitRecords\' by last OperationGuid where UserId=\"{0}\":", userId), ((string)(null)), table99, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table100 = new TechTalk.SpecFlow.Table(new string[] {
                        "Amount",
                        "CurrencyId",
                        "ExternalServiceId",
                        "IsIncomingTransaction"});
            table100.AddRow(new string[] {
                        "0.025",
                        "Rub",
                        "BankQiwi",
                        "false"});
            table100.AddRow(new string[] {
                        "**amount * rate**",
                        "Rub",
                        "BankQiwi",
                        "false"});
#line 1084
 testRunner.Then("User selects records in \'TExternalTransactions\' by OperationGuid", ((string)(null)), table100, "Then ");
#line 1092
 testRunner.Given("User clicks on Отчеты menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table101 = new TechTalk.SpecFlow.Table(new string[] {
                        "Date",
                        "Name",
                        "Amount"});
            table101.AddRow(new string[] {
                        "**DD.MM.YY**",
                        "Комиссия за перевод на внешнюю банковскую карту",
                        string.Format("- $ {0}", comission)});
            table101.AddRow(new string[] {
                        "**DD.MM.YY**",
                        "Перевод на внешнюю банковскую карту",
                        string.Format("- $ {0}", amount)});
#line 1093
 testRunner.Given("User see transactions list contains:", ((string)(null)), table101, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table102 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column1",
                        "Column2"});
            table102.AddRow(new string[] {
                        "Транзакция №",
                        "**TPurseTransactionId**"});
            table102.AddRow(new string[] {
                        "Заказ №",
                        "**InvoiceId**"});
            table102.AddRow(new string[] {
                        "Внешний ID",
                        "**ExternalTransactionId**"});
            table102.AddRow(new string[] {
                        "Дата",
                        "**dd.MM.yyyy HH:mm**"});
            table102.AddRow(new string[] {
                        "Продукт",
                        string.Format("e-Wallet {0}", purseId)});
            table102.AddRow(new string[] {
                        "Получатель",
                        "5106 21** **** 2411"});
            table102.AddRow(new string[] {
                        "Сумма",
                        string.Format("$ {0}", comission)});
            table102.AddRow(new string[] {
                        "Детали",
                        "Commission for outgoing payment to sided bank card MasterCard, x2411. Amount tran" +
                            "sferred to card: ₽**amount ** rate**, Rate: $1 = ₽**rate**."});
#line 1099
testRunner.Given(string.Format("User see statement info for the UserId={0} where DestinationId=\'RefillExternalCar" +
                        "dFromPurseCommission\' row № 0 direction=\'out\':", userId), ((string)(null)), table102, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table103 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column1",
                        "Column2"});
            table103.AddRow(new string[] {
                        "Транзакция №",
                        "**TPurseTransactionId**"});
            table103.AddRow(new string[] {
                        "Заказ №",
                        "**InvoiceId**"});
            table103.AddRow(new string[] {
                        "Внешний ID",
                        "**ExternalTransactionId**"});
            table103.AddRow(new string[] {
                        "Дата",
                        "**dd.MM.yyyy HH:mm**"});
            table103.AddRow(new string[] {
                        "Продукт",
                        string.Format("e-Wallet {0}", purseId)});
            table103.AddRow(new string[] {
                        "Получатель",
                        "5106 21** **** 2411"});
            table103.AddRow(new string[] {
                        "Сумма",
                        string.Format("$ {0}", amount)});
            table103.AddRow(new string[] {
                        "Детали",
                        "Outgoing payment to sided bank card MasterCard, x2411. Amount transferred to card" +
                            ": ₽**amount ** rate**, Rate: $1 = ₽**rate**."});
#line 1110
  testRunner.Given(string.Format("User see statement info for the UserId={0} where DestinationId=\'RefillExternalCar" +
                        "dFromPurse\' row № 1 direction=\'out\':", userId), ((string)(null)), table103, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table104 = new TechTalk.SpecFlow.Table(new string[] {
                        "MessageType",
                        "Priority",
                        "Receiver",
                        "Title"});
            table104.AddRow(new string[] {
                        "Sms",
                        "13",
                        string.Format("{0}", user),
                        "-"});
            table104.AddRow(new string[] {
                        "Email",
                        "6",
                        "voronezh_bank_card_uitest@qa.swiftcom.uk",
                        "Отчет по операции №**Invoice**"});
            table104.AddRow(new string[] {
                        "PushAndroid",
                        "6",
                        "cLCkHIt27Rg:APA91bH1wbbomcaNRtCx31-cBrYKXzddd7I_H3zzlb7QK0tyZ7iCvXvQmypLfF0ehETKl" +
                            "UCSQkdmj-aPK33W6kz-27FsoM6svvxRv9PgPN7_GbVHovgbQS0Hqj-eJYXubjEtQXM9ra7T",
                        "-"});
            table104.AddRow(new string[] {
                        "PushIos",
                        "6",
                        "55954f64ce084e09330cd74a746708cb610c1c10db847ae57c69f58aa2d926e2",
                        "-"});
#line 1122
 testRunner.Then(string.Format("User selects records in table \'Notification\' where UserId=\"{0}\" with \"**Invoice**" +
                        "\" replacing:", userId), ((string)(null)), table104, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("(QIWI) (без конвертации RUB-RUB)")]
        [NUnit.Framework.CategoryAttribute("3094727")]
        [NUnit.Framework.TestCaseAttribute("5106 2110 1481 2411", "500.00", "125.00", "625.00", "+70078644084", "96879579-d3fa-4bfd-9b57-269a357fdaa3", "72621010Abac", "F03ABC6E-25D6-4C98-A06F-A36B9B510BAF", "1358862", "001-358862", "144177", "122122", "406604", "99B4BB5F-2BE5-4481-9E78-F2E30339DC88", null)]
        public virtual void QIWIБезКонвертацииRUB_RUB(string pANReceiver, string amount, string comission, string amountComission, string user, string userId, string password, string systemPurseUserId, string userPurseId, string purseId, string ePS_02TemporaryStoragePurse, string ePS_06Exchanges, string ePS_01Commissions, string ePSUserId, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "3094727"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("(QIWI) (без конвертации RUB-RUB)", @__tags);
#line 1137
this.ScenarioSetup(scenarioInfo);
#line 1139
 testRunner.Given("User goes to SignIn page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 1140
 testRunner.Given(string.Format("User signin \"Epayments\" with \"{0}\" password \"{1}\"", user, password), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 1141
 testRunner.Given("User see Account Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 1143
 testRunner.Given("User clicks on Перевести menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 1144
 testRunner.Given("User clicks on \"На банковскую карту\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 1145
 testRunner.Given("User clicks on \"На банковскую карту\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 1146
 testRunner.Then("Section \'Amount including fees\' is: $ 0.00 (Комиссия: $ 0.00)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1148
 testRunner.Then("\'Со счета\' selector set to \'RUB\' in eWallet section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1149
 testRunner.Then(string.Format("\'Номер банковской карты\' set to \'{0}\'", pANReceiver), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1150
 testRunner.Then("\'Владелец\' set to \'nik ivanov\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1151
 testRunner.Then("\'Получаемая сумма\' selector set to \'RUB\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1153
 testRunner.Then(string.Format("\'Отдаваемая сумма\' set to \'{0}\'", amount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1154
 testRunner.Then(string.Format("Section \'Amount including fees\' is: ₽ {0} (Комиссия: ₽ {1})", amountComission, comission), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table105 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column1",
                        "Column2"});
            table105.AddRow(new string[] {
                        "Минимальная сумма перевода:",
                        "₽ 500.00"});
            table105.AddRow(new string[] {
                        "Максимальная сумма перевода:",
                        "₽ 75 000.00"});
            table105.AddRow(new string[] {
                        "Комиссия:",
                        "1.2%min ₽ 125"});
#line 1156
 testRunner.Given("User see limits table", ((string)(null)), table105, "Given ");
#line 1162
 testRunner.Given("User clicks on \"Далее\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table106 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column1",
                        "Column2"});
            table106.AddRow(new string[] {
                        "Отправитель",
                        string.Format("RUB, e-Wallet {0}", purseId)});
            table106.AddRow(new string[] {
                        "Банковская карта",
                        "Mastercard, x2411"});
            table106.AddRow(new string[] {
                        "Отдаваемая сумма",
                        string.Format("₽ {0}", amount)});
            table106.AddRow(new string[] {
                        "Комиссия",
                        string.Format("₽ {0}", comission)});
            table106.AddRow(new string[] {
                        "Сумма с комиссией",
                        string.Format("₽ {0}", amountComission)});
            table106.AddRow(new string[] {
                        "Получаемая сумма",
                        string.Format("₽ {0}", amount)});
#line 1163
 testRunner.Given("User see table", ((string)(null)), table106, "Given ");
#line 1172
 testRunner.Given("Set StartTime for DB search", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 1173
 testRunner.Given("User clicks on button \"Подтвердить\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table107 = new TechTalk.SpecFlow.Table(new string[] {
                        "OperationType",
                        "Recipient",
                        "UserId",
                        "IsUsed"});
            table107.AddRow(new string[] {
                        "MassPayment",
                        string.Format("{0}", user),
                        string.Format("{0}", userId),
                        "false"});
#line 1174
 testRunner.Then("User type SMS sent to:", ((string)(null)), table107, "Then ");
#line 1177
 testRunner.Then("Memorize eWallet section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1178
 testRunner.Given("User clicks on \"Оплатить\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 1179
 testRunner.Then("User gets message \"Обработка платежа займет несколько минут. Дождитесь результата" +
                    " перевода или продолжите работу в личном кабинете\" on Multiform", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1182
 testRunner.Then("User gets message \"Платеж успешно отправлен\" on Multiform", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1183
 testRunner.Then("Make screenshot", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1185
 testRunner.Given("User closes multiform by clicking on \"Закрыть\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 1186
 testRunner.Then("Redirected to /#/transfer/", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table108 = new TechTalk.SpecFlow.Table(new string[] {
                        "USD",
                        "EUR",
                        "RUB"});
            table108.AddRow(new string[] {
                        "0.00",
                        "0.00",
                        string.Format("-{0}", amountComission)});
#line 1188
  testRunner.Then("eWallet updated sections are:", ((string)(null)), table108, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table109 = new TechTalk.SpecFlow.Table(new string[] {
                        "OperationTypeId",
                        "Amount",
                        "Fee"});
            table109.AddRow(new string[] {
                        "157",
                        string.Format("{0}", amount),
                        string.Format("{0}", comission)});
#line 1194
 testRunner.Then("Preparing records in \'InvoicePositions\':", ((string)(null)), table109, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table110 = new TechTalk.SpecFlow.Table(new string[] {
                        "State",
                        "Details",
                        "SenderSystemId",
                        "SenderIdentity",
                        "ReceiverSystemId",
                        "ReceiverIdentity",
                        "CurrencyId",
                        "PaymentSource",
                        "ReceiverIdentityType",
                        "UserId"});
            table110.AddRow(new string[] {
                        "Successed",
                        "",
                        "WaveCrest",
                        string.Format("{0}", purseId),
                        "BankQiwi",
                        "5106 21** **** 2411",
                        "Rub",
                        "EWallet",
                        "Purse",
                        string.Format("{0}", userId)});
#line 1199
 testRunner.Then(string.Format("User selects last record in \'Invoices and InvoicePositions\' where UserId=\"{0}\":", userId), ((string)(null)), table110, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table111 = new TechTalk.SpecFlow.Table(new string[] {
                        "Amount",
                        "DestinationId",
                        "Direction",
                        "UserId",
                        "CurrencyId",
                        "PurseId",
                        "RefundCount"});
            table111.AddRow(new string[] {
                        string.Format("{0}", amount),
                        "RefillExternalCardFromPurse",
                        "out",
                        string.Format("{0}", userId),
                        "Rub",
                        string.Format("{0}", userPurseId),
                        "0"});
            table111.AddRow(new string[] {
                        string.Format("{0}", amount),
                        "RefillExternalCardFromPurse",
                        "in",
                        string.Format("{0}", ePSUserId),
                        "Rub",
                        string.Format("{0}", ePS_02TemporaryStoragePurse),
                        "0"});
            table111.AddRow(new string[] {
                        string.Format("{0}", comission),
                        "RefillExternalCardFromPurseCommission",
                        "out",
                        string.Format("{0}", userId),
                        "Rub",
                        string.Format("{0}", userPurseId),
                        "0"});
            table111.AddRow(new string[] {
                        string.Format("{0}", comission),
                        "RefillExternalCardFromPurseCommission",
                        "in",
                        string.Format("{0}", ePSUserId),
                        "Rub",
                        string.Format("{0}", ePS_02TemporaryStoragePurse),
                        "0"});
            table111.AddRow(new string[] {
                        string.Format("{0}", amount),
                        "RefillExternalCardFromPurse",
                        "out",
                        string.Format("{0}", ePSUserId),
                        "Rub",
                        string.Format("{0}", ePS_02TemporaryStoragePurse),
                        "0"});
            table111.AddRow(new string[] {
                        string.Format("{0}", comission),
                        "RefillExternalCardFromPurseCommission",
                        "out",
                        string.Format("{0}", ePSUserId),
                        "Rub",
                        string.Format("{0}", ePS_02TemporaryStoragePurse),
                        "0"});
            table111.AddRow(new string[] {
                        string.Format("{0}", comission),
                        "RefillExternalCardFromPurseCommission",
                        "in",
                        string.Format("{0}", ePSUserId),
                        "Rub",
                        string.Format("{0}", ePS_01Commissions),
                        "0"});
            table111.AddRow(new string[] {
                        "0.025",
                        "RefillExternalCardFromPurseProviderCommission",
                        "out",
                        string.Format("{0}", ePSUserId),
                        "Rub",
                        string.Format("{0}", ePS_01Commissions),
                        "0"});
#line 1205
   testRunner.Then(string.Format("User selects records in \'TPurseTransactions\' by last OperationGuid where UserId=\"" +
                        "{0}\":", userId), ((string)(null)), table111, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table112 = new TechTalk.SpecFlow.Table(new string[] {
                        "CurrencyId",
                        "Direction",
                        "Destination",
                        "UserId",
                        "Amount",
                        "AmountInUsd",
                        "Product",
                        "ProductType"});
            table112.AddRow(new string[] {
                        "Rub",
                        "out",
                        "OutgoingPaymentToSidedBankCard",
                        string.Format("{0}", userId),
                        string.Format("{0}", amount),
                        "**Generated**",
                        string.Format("{0}", purseId),
                        "Epid"});
#line 1218
 testRunner.Then(string.Format("User selects records in \'LimitRecords\' by last OperationGuid where UserId=\"{0}\":", userId), ((string)(null)), table112, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table113 = new TechTalk.SpecFlow.Table(new string[] {
                        "Amount",
                        "CurrencyId",
                        "ExternalServiceId",
                        "IsIncomingTransaction"});
            table113.AddRow(new string[] {
                        "0.025",
                        "Rub",
                        "BankQiwi",
                        "false"});
            table113.AddRow(new string[] {
                        "**amount * rate**",
                        "Rub",
                        "BankQiwi",
                        "false"});
#line 1223
 testRunner.Then("User selects records in \'TExternalTransactions\' by OperationGuid", ((string)(null)), table113, "Then ");
#line 1230
 testRunner.Given("User clicks on Отчеты menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table114 = new TechTalk.SpecFlow.Table(new string[] {
                        "Date",
                        "Name",
                        "Amount"});
            table114.AddRow(new string[] {
                        "**DD.MM.YY**",
                        "Комиссия за перевод на внешнюю банковскую карту",
                        string.Format("- ₽ {0}", comission)});
            table114.AddRow(new string[] {
                        "**DD.MM.YY**",
                        "Перевод на внешнюю банковскую карту",
                        string.Format("- ₽ {0}", amount)});
#line 1231
 testRunner.Given("User see transactions list contains:", ((string)(null)), table114, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table115 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column1",
                        "Column2"});
            table115.AddRow(new string[] {
                        "Транзакция №",
                        "**TPurseTransactionId**"});
            table115.AddRow(new string[] {
                        "Заказ №",
                        "**InvoiceId**"});
            table115.AddRow(new string[] {
                        "Внешний ID",
                        "**ExternalTransactionId**"});
            table115.AddRow(new string[] {
                        "Дата",
                        "**dd.MM.yyyy HH:mm**"});
            table115.AddRow(new string[] {
                        "Продукт",
                        string.Format("e-Wallet {0}", purseId)});
            table115.AddRow(new string[] {
                        "Получатель",
                        "5106 21** **** 2411"});
            table115.AddRow(new string[] {
                        "Сумма",
                        string.Format("₽ {0}", comission)});
            table115.AddRow(new string[] {
                        "Детали",
                        "Commission for outgoing payment to sided bank card MasterCard, x2411."});
#line 1237
 testRunner.Given(string.Format("User see statement info for the UserId={0} where DestinationId=\'RefillExternalCar" +
                        "dFromPurseCommission\' row № 0 direction=\'out\':", userId), ((string)(null)), table115, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table116 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column1",
                        "Column2"});
            table116.AddRow(new string[] {
                        "Транзакция №",
                        "**TPurseTransactionId**"});
            table116.AddRow(new string[] {
                        "Заказ №",
                        "**InvoiceId**"});
            table116.AddRow(new string[] {
                        "Внешний ID",
                        "**ExternalTransactionId**"});
            table116.AddRow(new string[] {
                        "Дата",
                        "**dd.MM.yyyy HH:mm**"});
            table116.AddRow(new string[] {
                        "Продукт",
                        string.Format("e-Wallet {0}", purseId)});
            table116.AddRow(new string[] {
                        "Получатель",
                        "5106 21** **** 2411"});
            table116.AddRow(new string[] {
                        "Сумма",
                        string.Format("₽ {0}", amount)});
            table116.AddRow(new string[] {
                        "Детали",
                        "Outgoing payment to sided bank card MasterCard, x2411."});
#line 1248
 testRunner.Given(string.Format("User see statement info for the UserId={0} where DestinationId=\'RefillExternalCar" +
                        "dFromPurse\' row № 1 direction=\'out\':", userId), ((string)(null)), table116, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table117 = new TechTalk.SpecFlow.Table(new string[] {
                        "MessageType",
                        "Priority",
                        "Receiver",
                        "Title"});
            table117.AddRow(new string[] {
                        "Sms",
                        "13",
                        string.Format("{0}", user),
                        "-"});
            table117.AddRow(new string[] {
                        "Email",
                        "6",
                        "voronezh_bank_card_uitest@qa.swiftcom.uk",
                        "Отчет по операции №**Invoice**"});
            table117.AddRow(new string[] {
                        "PushAndroid",
                        "6",
                        "cLCkHIt27Rg:APA91bH1wbbomcaNRtCx31-cBrYKXzddd7I_H3zzlb7QK0tyZ7iCvXvQmypLfF0ehETKl" +
                            "UCSQkdmj-aPK33W6kz-27FsoM6svvxRv9PgPN7_GbVHovgbQS0Hqj-eJYXubjEtQXM9ra7T",
                        "-"});
            table117.AddRow(new string[] {
                        "PushIos",
                        "6",
                        "55954f64ce084e09330cd74a746708cb610c1c10db847ae57c69f58aa2d926e2",
                        "-"});
#line 1260
 testRunner.Then(string.Format("User selects records in table \'Notification\' where UserId=\"{0}\" with \"**Invoice**" +
                        "\" replacing:", userId), ((string)(null)), table117, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Массовый перевод на банковскую карту")]
        [NUnit.Framework.CategoryAttribute("3427092")]
        [NUnit.Framework.TestCaseAttribute("5106 2110 1481 2411", "externalCardmassPayment@qa.swiftcom.uk", "e5105d3d-bb22-426b-b715-c3c56a12649f", "72621010Abac", null)]
        public virtual void МассовыйПереводНаБанковскуюКарту(string pANReceiver, string user, string userId, string password, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "3427092"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Массовый перевод на банковскую карту", @__tags);
#line 1275
this.ScenarioSetup(scenarioInfo);
#line 1277
 testRunner.Given("User goes to SignIn page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 1278
 testRunner.Given(string.Format("User signin \"Epayments\" with \"{0}\" password \"{1}\"", user, password), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 1279
 testRunner.Given("User see Account Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 1281
 testRunner.Given("User clicks on Перевести menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 1282
 testRunner.Given("User clicks on \"Выплаты на банковские карты ваших клиентов\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 1283
 testRunner.Then("Section \'Amount including fees\' is: $ 0.00 (Комиссия: $ 0.00)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1287
  testRunner.Given("User clicks on \"Загрузка CSV-файла с параметрами платежей\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 1288
 testRunner.Then("File \"Sample_file for mass payment external card negative.csv\" uploaded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1289
 testRunner.Then("Alert Message \"Строка 1: Получатель указан неверно\" appears", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1291
 testRunner.Then("File \"Sample_file for mass payment external card.csv\" uploaded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table118 = new TechTalk.SpecFlow.Table(new string[] {
                        "Number",
                        "Recipient",
                        "OutgoingAmount",
                        "Fees",
                        "IncomingAmount",
                        "Total",
                        "Button"});
            table118.AddRow(new string[] {
                        "1",
                        "5460431001821577 John Smith",
                        "$ 1 000.00",
                        "$ 29.00",
                        "$ 1 000.00",
                        "$ 1 029.00",
                        "УДАЛИТЬ"});
            table118.AddRow(new string[] {
                        "2",
                        "5106211014812411 Pascal Heyer",
                        "₽ 1 000.00",
                        "₽ 125.00",
                        "₽ 1 000.00",
                        "₽ 1 125.00",
                        "УДАЛИТЬ"});
#line 1292
 testRunner.Given("User see ExternalCard receivers table", ((string)(null)), table118, "Given ");
#line 1296
 testRunner.Then("Section \'Amount including fees\' is: 2 ₽ 1 125.00 + $ 1 029.00 (Комиссия: ₽ 125.00" +
                    " + $ 29.00)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1298
 testRunner.Given("User clicks on button \"Удалить\" in table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 1300
 testRunner.Then("Section \'Amount including fees\' is: ₽ 1 125.00 (Комиссия: ₽ 125.00)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1301
 testRunner.Then("\'Номер банковской карты\' set to \'5460431001821577\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1302
 testRunner.Then("\'Владелец\' set to \'nik ivanov\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1303
 testRunner.Then("\'Получаемая сумма\' selector set to \'USD\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1304
 testRunner.Then("\'Отдаваемая сумма\' selector set to \'USD\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1306
 testRunner.Then("\'Отдаваемая сумма\' set to \'1000\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1309
 testRunner.Given("User clicks on \"Добавить платеж\" on Multiform", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 1310
 testRunner.Then("Section \'Amount including fees\' is: 2 ₽ 1 125.00 + $ 1 029.00 (Комиссия: ₽ 125.00" +
                    " + $ 29.00)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table119 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Min",
                        "Max",
                        "Fee"});
            table119.AddRow(new string[] {
                        "USD",
                        "$ 10.00",
                        "$ 2 000.00",
                        "2.9%min $ 3.50"});
            table119.AddRow(new string[] {
                        "EUR",
                        "€ 10.00",
                        "€ 2 000.00",
                        "2.9%min € 3"});
            table119.AddRow(new string[] {
                        "RUB",
                        "₽ 500.00",
                        "₽ 75 000.00",
                        "2.9%min ₽ 125"});
#line 1312
     testRunner.Given("User see limits table at YandexMoney mass payment", ((string)(null)), table119, "Given ");
#line 1317
 testRunner.Given("Set StartTime for DB search", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 1318
 testRunner.Then("Memorize eWallet section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1321
 testRunner.Given("User clicks on \"Далее\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table120 = new TechTalk.SpecFlow.Table(new string[] {
                        "OperationType",
                        "Recipient",
                        "UserId",
                        "IsUsed"});
            table120.AddRow(new string[] {
                        "MassPayment",
                        "+70083432685",
                        string.Format("{0}", userId),
                        "false"});
#line 1324
 testRunner.Then("User type SMS sent to:", ((string)(null)), table120, "Then ");
#line 1328
 testRunner.Given("User clicks on \"Оплатить\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 1330
 testRunner.Then("User gets message \"Обработка платежей завершена\" on Multiform", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1331
 testRunner.Then("User gets message \"Выполнено 2 из 2\" on Multiform", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1332
 testRunner.Then("User gets message \"Отправлено платежей: 2\" on Multiform", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1333
 testRunner.Then("User gets message \"Не отправлено платежей: 0\" on Multiform", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1335
 testRunner.Then("Make screenshot", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1338
 testRunner.Given("User closes multiform by clicking on \"Закрыть\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 1339
 testRunner.Then("Redirected to /#/transfer/", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table121 = new TechTalk.SpecFlow.Table(new string[] {
                        "USD",
                        "EUR",
                        "RUB"});
            table121.AddRow(new string[] {
                        "-1029.00",
                        "0.00",
                        "-1125.00"});
#line 1341
 testRunner.Then("eWallet updated sections are:", ((string)(null)), table121, "Then ");
#line 1346
 testRunner.Given("User clicks on Отчеты menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table122 = new TechTalk.SpecFlow.Table(new string[] {
                        "Date",
                        "Name",
                        "Amount"});
            table122.AddRow(new string[] {
                        "**DD.MM.YY**",
                        "Комиссия за перевод на внешнюю банковскую карту",
                        "- $ 29.00"});
            table122.AddRow(new string[] {
                        "**DD.MM.YY**",
                        "Перевод на внешнюю банковскую карту",
                        "- $ 1 000.00"});
            table122.AddRow(new string[] {
                        "**DD.MM.YY**",
                        "Комиссия за перевод на внешнюю банковскую карту",
                        "- ₽ 125.00"});
            table122.AddRow(new string[] {
                        "**DD.MM.YY**",
                        "Перевод на внешнюю банковскую карту",
                        "- ₽ 1 000.00"});
#line 1347
 testRunner.Given("User see transactions list contains:", ((string)(null)), table122, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table123 = new TechTalk.SpecFlow.Table(new string[] {
                        "MessageType",
                        "Priority",
                        "Receiver",
                        "Title"});
            table123.AddRow(new string[] {
                        "Sms",
                        "13",
                        "+70083432685",
                        "-"});
            table123.AddRow(new string[] {
                        "Email",
                        "6",
                        string.Format("{0}", user),
                        "Отчет по операции"});
            table123.AddRow(new string[] {
                        "PushAndroid",
                        "6",
                        "cLCkHIt27Rg:APA91bH1wbbomcaNRtCx31-cBrYKXzddd7I_H3zzlb7QK0tyZ7iCvXvQmypLfF0ehETKl" +
                            "UCSQkdmj-aPK33W6kz-27FsoM6svvxRv9PgPN7_GbVHovgbQS0Hqj-eJYXubjEtQXM9ra7T",
                        "-"});
            table123.AddRow(new string[] {
                        "PushIos",
                        "6",
                        "55954f64ce084e09330cd74a746708cb610c1c10db847ae57c69f58aa2d926e2",
                        "-"});
#line 1354
 testRunner.Then(string.Format("User selects records in table \'Notification\' for UserId=\"{0}\"", userId), ((string)(null)), table123, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion

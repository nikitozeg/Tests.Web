// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.3.2.0
//      SpecFlow Generator Version:2.3.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ePayments.Tests.Web.Tests.Financial
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.2.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("OutWires")]
    [NUnit.Framework.CategoryAttribute("BankWires")]
    public partial class OutWiresFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "BankWires.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "OutWires", " Bank wires (outgoing)", ProgrammingLanguage.CSharp, new string[] {
                        "BankWires"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Rietumu Перевод на банковский счет (исх ваер) через Rietumu. Positive")]
        [NUnit.Framework.TestCaseAttribute("+70092039926", "SMSCode", "nikita_UI_financial@qa.swiftcom.uk", "001-053655", "75.00", "1 000.00", "+70092039926", "f751650f-2754-4bc1-bf23-ce78f347764e", "72621010Abac", new string[] {
                "135430"}, Category="135430")]
        [NUnit.Framework.TestCaseAttribute("cLCkHIt78RM", "PushCode", "payBySMS_YMoney@qa.swiftcom.uk", "001-105639", "75.00", "1 000.00", "+70049241782", "a0b37e7d-9faf-4868-a8e1-c90f7a5c406a", "72621010Abac", new string[] {
                "3393743"}, Category="3393743")]
        public virtual void RietumuПереводНаБанковскийСчетИсхВаерЧерезRietumu_Positive(string codeRecipient, string confirmationCode, string email, string eWallet, string comission, string amount, string user, string userId, string password, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Rietumu Перевод на банковский счет (исх ваер) через Rietumu. Positive", exampleTags);
#line 7
 this.ScenarioSetup(scenarioInfo);
#line 17
    testRunner.Then(string.Format("User updates TransactionConfirmationType=\"{0}\" for UserId=\"{1}\" in table \'TUsers\'" +
                        "", confirmationCode, userId), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 19
    testRunner.Given("User goes to SignIn page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 20
 testRunner.Given(string.Format("User signin \"Epayments\" with \"{0}\" password \"{1}\"", user, password), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 21
 testRunner.Given("User see Account Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 22
 testRunner.Given("User clicks on Отчеты menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 24
 testRunner.Given("User clicks on Перевести menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 25
 testRunner.Given("User clicks on \"На банковский счет\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 27
 testRunner.Then("Section \'Amount including fees\' is: $ 0.00 (Комиссия: $ 0.00)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Options"});
            table1.AddRow(new string[] {
                        "USD"});
            table1.AddRow(new string[] {
                        "EUR"});
            table1.AddRow(new string[] {
                        "RUB"});
#line 30
 testRunner.Given("\'Кошелек\' selector is \"USD\" and contains:", ((string)(null)), table1, "Given ");
#line 35
 testRunner.Given("User clicks on \"Далее\" on Multiform", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 36
 testRunner.Then("Validating message \'Заполните поле\' count is 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 37
 testRunner.Then("\'Страна банка\' UI selector set to \'Австрия\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 39
 testRunner.Then("\'Отдаваемая сумма\' set to \'5\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 40
 testRunner.Then("Alert Message \"Сумма операции меньше лимита: 50.00 €\" appears", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 41
    testRunner.Then("Validating message \'Сумма перевода меньше  € 50.00\' appears on MultiForm", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 43
 testRunner.Then("\'Получаемая сумма\' set to \'100001\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 44
 testRunner.Then("Alert Message \"Сумма операции больше лимита: 100000.00 €\" appears", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 46
 testRunner.Then("\'Отдаваемая сумма\' set to \'10000000\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 47
 testRunner.Then("Validating message \'Сумма с комиссией превышает баланс\' appears on MultiForm", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 48
 testRunner.Then("Make screenshot", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 50
 testRunner.Then("\'Имя получателя\' set to \'кириллица\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 51
 testRunner.Then("\'Фамилия получателя\' set to \'кириллица\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 52
 testRunner.Then("\'Город получателя\' set to \'кириллица\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 53
 testRunner.Then("\'Адрес получателя\' set to \'кириллица\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 55
 testRunner.Then("Validating message \'Поле заполнено неверно\' count is 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 56
 testRunner.Then("\'Город получателя\' value is \'\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 57
 testRunner.Then("\'Адрес получателя\' value is \'\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 61
 testRunner.Then("User refresh the page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 62
 testRunner.Then("Section \'Amount including fees\' is: $ 0.00 (Комиссия: $ 0.00)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 64
 testRunner.Then("\'Кошелек\' selector set to \'EUR\' in eWallet section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 65
 testRunner.Then("\'Страна банка\' UI selector set to \'Австрия\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 66
 testRunner.Then("\'Отдаваемая сумма\' set to \'1000\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column1",
                        "Column2"});
            table2.AddRow(new string[] {
                        "Минимальная сумма перевода:",
                        "€ 50.00"});
            table2.AddRow(new string[] {
                        "Максимальная сумма перевода:",
                        "€ 100 000.00"});
            table2.AddRow(new string[] {
                        "Комиссия:",
                        "0.8%min € 75, max € 125"});
#line 67
 testRunner.Given("User see limits table", ((string)(null)), table2, "Given ");
#line 73
 testRunner.Then("\'Назначение платежа\' details set to \'Details\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 75
 testRunner.Then("\'Название банка\' set to \'Austria bank\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 76
 testRunner.Then("\'SWIFT банка получателя\' set to \'HSEEAT2K\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 77
 testRunner.Then("\'Номер счета/IBAN\' set to \'LV10RTMB00000000000016\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 78
 testRunner.Then("\'Получаемая сумма\' value is \'1000.00\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 79
 testRunner.Then("Section \'Amount including fees\' is: € 1 075.00 (Комиссия: € 75.00)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 81
 testRunner.Then("\'Имя получателя\' set to \'Nikita\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 82
 testRunner.Then("\'Фамилия получателя\' set to \'Ivanov\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 83
 testRunner.Then("\'Страна получателя\' UI selector set to \'Германия\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 84
 testRunner.Then("\'Город получателя\' set to \'Receiver\'s city\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 85
 testRunner.Then("\'Адрес получателя\' set to \'Receiver\'s city Address\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 87
 testRunner.Given("User clicks on \"Корреспондент\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 88
 testRunner.Then("\'Страна банк-корреспондента\' UI selector set to \'Россия\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 89
 testRunner.Then("\'Номер счета корреспондента\' set to \'123test\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 90
 testRunner.Then("\'SWIFT банк-корреспондента\' set to \'swifttest\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 91
 testRunner.Then("\'Название банк-корреспондента\' set to \'\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 92
 testRunner.Given("User clicks on \"Корреспондент\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 94
 testRunner.Then("Make screenshot", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 95
 testRunner.Given("User clicks on \"Далее\" on Multiform", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 96
 testRunner.Given("Set StartTime for DB search", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column1",
                        "Column2"});
            table3.AddRow(new string[] {
                        "Отправитель",
                        string.Format("EUR, e-Wallet {0}", eWallet)});
            table3.AddRow(new string[] {
                        "Получатель",
                        "Austria bank, HSEEAT2K, Nikita Ivanov, LV10RTMB00000000000016"});
            table3.AddRow(new string[] {
                        "Отдаваемая сумма",
                        "€ 1 000.00"});
            table3.AddRow(new string[] {
                        "Комиссия",
                        "€ 75.00"});
            table3.AddRow(new string[] {
                        "Сумма с комиссией",
                        "€ 1 075.00"});
            table3.AddRow(new string[] {
                        "Получаемая сумма",
                        "€ 1 000.00"});
            table3.AddRow(new string[] {
                        "Назначение платежа",
                        "Details"});
#line 97
 testRunner.Given("User see table", ((string)(null)), table3, "Given ");
#line 106
 testRunner.Then("Make screenshot", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 108
 testRunner.Given("User clicks on \"Подтвердить\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "OperationType",
                        "Recipient",
                        "UserId",
                        "IsUsed"});
            table4.AddRow(new string[] {
                        "MassPayment",
                        string.Format("{0}", codeRecipient),
                        string.Format("{0}", userId),
                        "false"});
#line 110
 testRunner.Then(string.Format("User type {0} sent to:", confirmationCode), ((string)(null)), table4, "Then ");
#line 114
 testRunner.Given("Set StartTime for DB search", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 115
 testRunner.Given("User clicks on \"Оплатить\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 116
 testRunner.Then("User gets message \"Обработка платежа займет несколько минут. Дождитесь результата" +
                    " перевода или продолжите работу в личном кабинете\" on Multiform", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 117
 testRunner.Then(@"User gets message ""Платеж зарегистрирован и будет обработан в течение рабочего дня. Как только он будет исполнен банком, в личном кабинете в деталях операции в этом переводе появится Reference Number - дополнительный идентификатор операции в банке"" on Multiform", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 118
 testRunner.Then("Make screenshot", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 119
 testRunner.Given("User clicks on \"Закрыть\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 120
 testRunner.Then("Redirected to /#/transfer/", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 122
 testRunner.Given("User clicks on Отчеты menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Date",
                        "Name",
                        "Amount"});
            table5.AddRow(new string[] {
                        "**DD.MM.YY**",
                        "Комиссия за исходящий банковский перевод",
                        "- € 75.00"});
            table5.AddRow(new string[] {
                        "**DD.MM.YY**",
                        "Банковский перевод",
                        "- € 1 000.00"});
#line 123
 testRunner.Given("User see transactions list contains:", ((string)(null)), table5, "Given ");
#line 128
 testRunner.Then(string.Format("Operator edits bank wire for UserId=\'{0}\' where WireService=\'Rietumu\' and sends t" +
                        "o bank", userId), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column1",
                        "Column2"});
            table6.AddRow(new string[] {
                        "Транзакция №",
                        "**TPurseTransactionId**"});
            table6.AddRow(new string[] {
                        "Заказ №",
                        "**InvoiceId**"});
            table6.AddRow(new string[] {
                        "Дата",
                        "**dd.MM.yyyy HH:mm**"});
            table6.AddRow(new string[] {
                        "Продукт",
                        string.Format("e-Wallet {0}", eWallet)});
            table6.AddRow(new string[] {
                        "Получатель",
                        "HSEEAT2K/LV10RTMB00000000000016"});
            table6.AddRow(new string[] {
                        "Сумма",
                        "€ 75.00"});
            table6.AddRow(new string[] {
                        "Детали",
                        "Commission for outgoing bank wire. Beneficiary: Nikita Ivanov, Germany, Receiver\'" +
                            "s city, Receiver\'s city Address; Account number: LV10RTMB00000000000016; Bank: A" +
                            "ustria bank, HSEEAT2K, Austria; Details: Details"});
#line 130
    testRunner.Given(string.Format("User see statement info for the UserId={0} where DestinationId=\'OutBankWireComiss" +
                        "ion\' row № 0 direction=\'out\':", userId), ((string)(null)), table6, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column1",
                        "Column2"});
            table7.AddRow(new string[] {
                        "Транзакция №",
                        "**TPurseTransactionId**"});
            table7.AddRow(new string[] {
                        "Заказ №",
                        "**InvoiceId**"});
            table7.AddRow(new string[] {
                        "Дата",
                        "**dd.MM.yyyy HH:mm**"});
            table7.AddRow(new string[] {
                        "Продукт",
                        string.Format("e-Wallet {0}", eWallet)});
            table7.AddRow(new string[] {
                        "Получатель",
                        "HSEEAT2K/LV10RTMB00000000000016"});
            table7.AddRow(new string[] {
                        "Сумма",
                        "€ 1 000.00"});
            table7.AddRow(new string[] {
                        "Детали",
                        "Outgoing bank wire. Beneficiary: Nikita Ivanov, Germany, Receiver\'s city, Receive" +
                            "r\'s city Address; Account number: LV10RTMB00000000000016; Bank: Austria bank, HS" +
                            "EEAT2K, Austria; Details: Details"});
#line 140
     testRunner.Given(string.Format("User see statement info for the UserId={0} where DestinationId=\'WireOut\' row № 1 " +
                        "direction=\'out\':", userId), ((string)(null)), table7, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "MessageType",
                        "Priority",
                        "Receiver",
                        "Title"});
            table8.AddRow(new string[] {
                        "Email",
                        "1",
                        string.Format("{0}", email),
                        "Отчет по операции № **Invoice**"});
#line 150
 testRunner.Then(string.Format("User selects records in table \'Notification\' where UserId=\"{0}\" with \"**Invoice**" +
                        "\" replacing:", userId), ((string)(null)), table8, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("RietumuSEPA Перевод на банковский счет (исх. ваер) через RietumuSEPA. Positive")]
        [NUnit.Framework.CategoryAttribute("2121040")]
        [NUnit.Framework.CategoryAttribute("RietumuSEPA_out_wire")]
        [NUnit.Framework.TestCaseAttribute("+70092039926", "f751650f-2754-4bc1-bf23-ce78f347764e", "72621010Abac", null)]
        public virtual void RietumuSEPAПереводНаБанковскийСчетИсх_ВаерЧерезRietumuSEPA_Positive(string user, string userId, string password, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "2121040",
                    "RietumuSEPA_out_wire"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("RietumuSEPA Перевод на банковский счет (исх. ваер) через RietumuSEPA. Positive", @__tags);
#line 169
 this.ScenarioSetup(scenarioInfo);
#line 179
    testRunner.Given("User goes to SignIn page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 180
 testRunner.Given(string.Format("User signin \"Epayments\" with \"{0}\" password \"{1}\"", user, password), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 181
 testRunner.Given("User see Account Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 182
 testRunner.Given("User clicks on Отчеты menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 184
 testRunner.Given("User clicks on Перевести menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 185
 testRunner.Given("User clicks on \"На банковский счет\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 187
 testRunner.Then("Section \'Amount including fees\' is: $ 0.00 (Комиссия: $ 0.00)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 189
 testRunner.Then("\'Кошелек\' selector set to \'EUR\' in eWallet section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 190
 testRunner.Then("\'Страна банка\' UI selector set to \'Австрия\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 191
 testRunner.Then("\'Отдаваемая сумма\' set to \'1000\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column1",
                        "Column2"});
            table9.AddRow(new string[] {
                        "Минимальная сумма перевода:",
                        "€ 50.00"});
            table9.AddRow(new string[] {
                        "Максимальная сумма перевода:",
                        "€ 100 000.00"});
            table9.AddRow(new string[] {
                        "Комиссия:",
                        "€ 0.50"});
#line 192
 testRunner.Given("User see limits table", ((string)(null)), table9, "Given ");
#line 198
 testRunner.Then("\'Назначение платежа\' details set to \'Details\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 200
 testRunner.Then("\'Название банка\' set to \'Austria bank\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 201
 testRunner.Then("\'SWIFT банка получателя\' set to \'HSEEAT2K\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 202
 testRunner.Then("\'Номер счета/IBAN\' set to \'LV10RTMB00000000000016\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 203
 testRunner.Then("\'Получаемая сумма\' value is \'1000.00\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 204
 testRunner.Then("Section \'Amount including fees\' is: € 1 000.50 (Комиссия: € 0.50)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 206
 testRunner.Then("\'Имя получателя\' set to \'Nikita\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 207
 testRunner.Then("\'Фамилия получателя\' set to \'Ivanov\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 208
 testRunner.Then("\'Страна получателя\' UI selector set to \'Германия\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 209
 testRunner.Then("\'Город получателя\' set to \'Receiver\'s city\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 210
 testRunner.Then("\'Адрес получателя\' set to \'Receiver\'s city Address\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 212
 testRunner.Then("Make screenshot", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 213
 testRunner.Given("User clicks on \"Далее\" on Multiform", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column1",
                        "Column2"});
            table10.AddRow(new string[] {
                        "Отправитель",
                        "EUR, e-Wallet 001-053655"});
            table10.AddRow(new string[] {
                        "Получатель",
                        "Austria bank, HSEEAT2K, Nikita Ivanov, LV10RTMB00000000000016"});
            table10.AddRow(new string[] {
                        "Отдаваемая сумма",
                        "€ 1 000.00"});
            table10.AddRow(new string[] {
                        "Комиссия",
                        "€ 0.50"});
            table10.AddRow(new string[] {
                        "Сумма с комиссией",
                        "€ 1 000.50"});
            table10.AddRow(new string[] {
                        "Получаемая сумма",
                        "€ 1 000.00"});
            table10.AddRow(new string[] {
                        "Назначение платежа",
                        "Details"});
#line 215
 testRunner.Given("User see table", ((string)(null)), table10, "Given ");
#line 225
 testRunner.Given("User clicks on \"Подтвердить\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 226
 testRunner.Given("Set StartTime for DB search", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "OperationType",
                        "Recipient",
                        "UserId",
                        "IsUsed"});
            table11.AddRow(new string[] {
                        "MassPayment",
                        string.Format("{0}", user),
                        string.Format("{0}", userId),
                        "false"});
#line 227
 testRunner.Then("User type SMS sent to:", ((string)(null)), table11, "Then ");
#line 230
 testRunner.Given("User clicks on \"Оплатить\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 231
 testRunner.Then("User gets message \"Обработка платежа займет несколько минут. Дождитесь результата" +
                    " перевода или продолжите работу в личном кабинете\" on Multiform", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 232
 testRunner.Then(@"User gets message ""Платеж зарегистрирован и будет обработан в течение рабочего дня. Как только он будет исполнен банком, в личном кабинете в деталях операции в этом переводе появится Reference Number - дополнительный идентификатор операции в банке"" on Multiform", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 233
 testRunner.Given("User clicks on \"Закрыть\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 234
 testRunner.Then("Redirected to /#/transfer/", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 235
 testRunner.Given("User clicks on Отчеты menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Date",
                        "Name",
                        "Amount"});
            table12.AddRow(new string[] {
                        "**DD.MM.YY**",
                        "Комиссия за исходящий банковский перевод",
                        "- € 0.50"});
            table12.AddRow(new string[] {
                        "**DD.MM.YY**",
                        "Банковский перевод",
                        "- € 1 000.00"});
#line 236
 testRunner.Given("User see transactions list contains:", ((string)(null)), table12, "Given ");
#line 241
 testRunner.Then(string.Format("Operator edits bank wire for UserId=\'{0}\' where WireService=\'RietumuSEPA\' and sen" +
                        "ds to bank", userId), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column1",
                        "Column2"});
            table13.AddRow(new string[] {
                        "Транзакция №",
                        "**TPurseTransactionId**"});
            table13.AddRow(new string[] {
                        "Заказ №",
                        "**InvoiceId**"});
            table13.AddRow(new string[] {
                        "Дата",
                        "**dd.MM.yyyy HH:mm**"});
            table13.AddRow(new string[] {
                        "Продукт",
                        "e-Wallet 001-053655"});
            table13.AddRow(new string[] {
                        "Получатель",
                        "HSEEAT2K/LV10RTMB00000000000016"});
            table13.AddRow(new string[] {
                        "Сумма",
                        "€ 0.50"});
            table13.AddRow(new string[] {
                        "Детали",
                        "Commission for outgoing bank wire. Beneficiary: Nikita Ivanov, Germany, Receiver\'" +
                            "s city, Receiver\'s city Address; Account number: LV10RTMB00000000000016; Bank: A" +
                            "ustria bank, HSEEAT2K, Austria; Details: Details"});
#line 243
   testRunner.Given(string.Format("User see statement info for the UserId={0} where DestinationId=\'OutBankWireComiss" +
                        "ion\' row № 0 direction=\'out\':", userId), ((string)(null)), table13, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column1",
                        "Column2"});
            table14.AddRow(new string[] {
                        "Транзакция №",
                        "**TPurseTransactionId**"});
            table14.AddRow(new string[] {
                        "Заказ №",
                        "**InvoiceId**"});
            table14.AddRow(new string[] {
                        "Дата",
                        "**dd.MM.yyyy HH:mm**"});
            table14.AddRow(new string[] {
                        "Продукт",
                        "e-Wallet 001-053655"});
            table14.AddRow(new string[] {
                        "Получатель",
                        "HSEEAT2K/LV10RTMB00000000000016"});
            table14.AddRow(new string[] {
                        "Сумма",
                        "€ 1 000.00"});
            table14.AddRow(new string[] {
                        "Детали",
                        "Outgoing bank wire. Beneficiary: Nikita Ivanov, Germany, Receiver\'s city, Receive" +
                            "r\'s city Address; Account number: LV10RTMB00000000000016; Bank: Austria bank, HS" +
                            "EEAT2K, Austria; Details: Details"});
#line 253
    testRunner.Given(string.Format("User see statement info for the UserId={0} where DestinationId=\'WireOut\' row № 1 " +
                        "direction=\'out\':", userId), ((string)(null)), table14, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "MessageType",
                        "Priority",
                        "Receiver",
                        "Title"});
            table15.AddRow(new string[] {
                        "Sms",
                        "13",
                        string.Format("{0}", user),
                        "-"});
            table15.AddRow(new string[] {
                        "Email",
                        "1",
                        "nikita_UI_financial@qa.swiftcom.uk",
                        "Отчет по операции № **Invoice**"});
#line 263
 testRunner.Then(string.Format("User selects records in table \'Notification\' where UserId=\"{0}\" with \"**Invoice**" +
                        "\" replacing:", userId), ((string)(null)), table15, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("True Positive (Refund Rietumu) Перевод на банковский счет (исх. ваер). Проверка н" +
            "а санкции.")]
        [NUnit.Framework.CategoryAttribute("346867")]
        [NUnit.Framework.TestCaseAttribute("sb_ind_CC@qa.swiftcom.uk", "a4ac4ef5-c2a7-4d5a-9973-42e73943ec6d", "XSW@zaq11", "10 000.00", "4 500.00", "F03ABC6E-25D6-4C98-A06F-A36B9B510BAF", "294952", null)]
        public virtual void TruePositiveRefundRietumuПереводНаБанковскийСчетИсх_Ваер_ПроверкаНаСанкции_(string user, string userId, string password, string amount, string comission, string systemPurseUserId, string userPurseId, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "346867"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("True Positive (Refund Rietumu) Перевод на банковский счет (исх. ваер). Проверка н" +
                    "а санкции.", @__tags);
#line 274
 this.ScenarioSetup(scenarioInfo);
#line 282
    testRunner.Given("User goes to SignIn page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 283
 testRunner.Given(string.Format("User signin \"Epayments\" with \"{0}\" password \"{1}\"", user, password), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 284
 testRunner.Given("User see Account Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 285
 testRunner.Then("Memorize eWallet section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 287
 testRunner.Given("User clicks on Перевести menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 288
 testRunner.Given("User clicks on \"На банковский счет\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 290
 testRunner.Then("Section \'Amount including fees\' is: $ 0.00 (Комиссия: $ 0.00)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 292
 testRunner.Then("\'Кошелек\' selector set to \'RUB\' in eWallet section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 293
 testRunner.Then("\'Получатель платежа\' selector set to \'Sanction fiz bank, ULADZIMIR NAVUMAU, LV10R" +
                    "TMB00000000000016\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 294
 testRunner.Then("\'Отдаваемая сумма\' set to \'10000\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 295
 testRunner.Then("\'Получаемая сумма\' value is \'10000.00\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column1",
                        "Column2"});
            table16.AddRow(new string[] {
                        "Минимальная сумма перевода:",
                        "₽ 6 000.00"});
            table16.AddRow(new string[] {
                        "Максимальная сумма перевода:",
                        "₽ 6 000 000.00"});
            table16.AddRow(new string[] {
                        "Комиссия:",
                        "0.8%min ₽ 4 500, max ₽ 7 500"});
#line 297
 testRunner.Given("User see limits table", ((string)(null)), table16, "Given ");
#line 303
 testRunner.Then("\'Назначение платежа\' details set to \'Details\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 304
 testRunner.Then("\'Код валютной операции (VO)\' set to \'999999\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 306
 testRunner.Then(string.Format("Section \'Amount including fees\' is: ₽ 14 500.00 (Комиссия: ₽ {0})", comission), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 308
 testRunner.Then("Make screenshot", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 309
 testRunner.Given("User clicks on \"Далее\" on Multiform", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column1",
                        "Column2"});
            table17.AddRow(new string[] {
                        "Отправитель",
                        string.Format("RUB, e-Wallet 000-{0}", userPurseId)});
            table17.AddRow(new string[] {
                        "Получатель",
                        "Sanction fiz bank, HABALV22, ULADZIMIR NAVUMAU, LV10RTMB00000000000016"});
            table17.AddRow(new string[] {
                        "Отдаваемая сумма",
                        string.Format("₽ {0}", amount)});
            table17.AddRow(new string[] {
                        "Комиссия",
                        string.Format("₽ {0}", comission)});
            table17.AddRow(new string[] {
                        "Сумма с комиссией",
                        "₽ 14 500.00"});
            table17.AddRow(new string[] {
                        "Получаемая сумма",
                        string.Format("₽ {0}", amount)});
            table17.AddRow(new string[] {
                        "Назначение платежа",
                        "Details"});
#line 311
 testRunner.Given("User see table", ((string)(null)), table17, "Given ");
#line 320
 testRunner.Then("Make screenshot", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 321
 testRunner.Given("Set StartTime for DB search", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 323
 testRunner.Given("User clicks on \"Подтвердить\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 324
 testRunner.Given("Set StartTime for DB search", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "OperationType",
                        "Recipient",
                        "UserId",
                        "IsUsed"});
            table18.AddRow(new string[] {
                        "MassPayment",
                        "+70001258785",
                        string.Format("{0}", userId),
                        "false"});
#line 325
 testRunner.Then("User type SMS sent to:", ((string)(null)), table18, "Then ");
#line 329
 testRunner.Given("User clicks on \"Оплатить\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 330
 testRunner.Then("User gets message \"Обработка платежа займет несколько минут. Дождитесь результата" +
                    " перевода или продолжите работу в личном кабинете\" on Multiform", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 331
 testRunner.Then(@"User gets message ""Платеж зарегистрирован и будет обработан в течение рабочего дня. Как только он будет исполнен банком, в личном кабинете в деталях операции в этом переводе появится Reference Number - дополнительный идентификатор операции в банке"" on Multiform", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "Scenario",
                        "Status",
                        "IsConfirmedPep"});
            table19.AddRow(new string[] {
                        "BankWireOut",
                        "InProcess",
                        "false"});
#line 332
 testRunner.Then(string.Format("User selects record in \'SanctionCheck\' where UserId =\"{0}\":", userId), ((string)(null)), table19, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "USD",
                        "EUR",
                        "RUB"});
            table20.AddRow(new string[] {
                        "0.00",
                        "0.00",
                        "-14500"});
#line 335
 testRunner.Then("eWallet updated sections are:", ((string)(null)), table20, "Then ");
#line 338
 testRunner.Then("Make screenshot", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 341
 testRunner.Given("User clicks on \"Закрыть\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 342
 testRunner.Then("Redirected to /#/transfer/", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 343
 testRunner.Given("User clicks on Отчеты menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 346
     testRunner.Then(string.Format("Get Invoice for last wire where UserId=\'{0}\'", userId), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "Date",
                        "Name",
                        "Amount"});
            table21.AddRow(new string[] {
                        "**DD.MM.YY**",
                        "Комиссия за исходящий банковский перевод",
                        string.Format("- ₽ {0}", comission)});
            table21.AddRow(new string[] {
                        "**DD.MM.YY**",
                        "Банковский перевод",
                        string.Format("- ₽ {0}", amount)});
#line 347
  testRunner.Given("User see transactions list contains:", ((string)(null)), table21, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column1",
                        "Column2"});
            table22.AddRow(new string[] {
                        "Транзакция №",
                        "**TPurseTransactionId**"});
            table22.AddRow(new string[] {
                        "Заказ №",
                        "**InvoiceId**"});
            table22.AddRow(new string[] {
                        "Дата",
                        "**dd.MM.yyyy HH:mm**"});
            table22.AddRow(new string[] {
                        "Продукт",
                        string.Format("e-Wallet 000-{0}", userPurseId)});
            table22.AddRow(new string[] {
                        "Получатель",
                        "HABALV22/LV10RTMB00000000000016"});
            table22.AddRow(new string[] {
                        "Сумма",
                        string.Format("₽ {0}", comission)});
            table22.AddRow(new string[] {
                        "Детали",
                        @"Commission for outgoing bank wire. Beneficiary: ULADZIMIR NAVUMAU, Belarus, Minsk, address1; Account number: LV10RTMB00000000000016; Bank: Sanction fiz bank, HABALV22, Latvia; Correspondent bank: asd, 12312312312, asdasdasd, Austria; Details: {VO99999}, Details"});
#line 352
 testRunner.Given(string.Format("User see statement info for the UserId={0} where DestinationId=\'OutBankWireComiss" +
                        "ion\' row № 0 direction=\'out\':", userId), ((string)(null)), table22, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column1",
                        "Column2"});
            table23.AddRow(new string[] {
                        "Транзакция №",
                        "**TPurseTransactionId**"});
            table23.AddRow(new string[] {
                        "Заказ №",
                        "**InvoiceId**"});
            table23.AddRow(new string[] {
                        "Дата",
                        "**dd.MM.yyyy HH:mm**"});
            table23.AddRow(new string[] {
                        "Продукт",
                        string.Format("e-Wallet 000-{0}", userPurseId)});
            table23.AddRow(new string[] {
                        "Получатель",
                        "HABALV22/LV10RTMB00000000000016"});
            table23.AddRow(new string[] {
                        "Сумма",
                        string.Format("₽ {0}", amount)});
            table23.AddRow(new string[] {
                        "Детали",
                        "Outgoing bank wire. Beneficiary: ULADZIMIR NAVUMAU, Belarus, Minsk, address1; Acc" +
                            "ount number: LV10RTMB00000000000016; Bank: Sanction fiz bank, HABALV22, Latvia; " +
                            "Correspondent bank: asd, 12312312312, asdasdasd, Austria; Details: {VO99999}, De" +
                            "tails"});
#line 362
 testRunner.Given(string.Format("User see statement info for the UserId={0} where DestinationId=\'WireOut\' row № 1 " +
                        "direction=\'out\':", userId), ((string)(null)), table23, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "OperationTypeId",
                        "Amount",
                        "Fee"});
            table24.AddRow(new string[] {
                        "143",
                        "10000",
                        "4500"});
#line 374
 testRunner.Then("Preparing records in \'InvoicePositions\':", ((string)(null)), table24, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "State",
                        "Details",
                        "SenderSystemId",
                        "SenderIdentity",
                        "ReceiverSystemId",
                        "ReceiverIdentity",
                        "CurrencyId",
                        "PaymentSource",
                        "ReceiverIdentityType",
                        "UserId"});
            table25.AddRow(new string[] {
                        "OnVerification",
                        "{VO99999}, Details",
                        "WaveCrest",
                        string.Format("000-{0}", userPurseId),
                        "Rietumu",
                        "HABALV22/LV10RTMB00000000000016",
                        "Rub",
                        "EWallet",
                        "Purse",
                        string.Format("{0}", userId)});
#line 377
 testRunner.Then(string.Format("User selects last record in \'Invoices and InvoicePositions\' where UserId=\"{0}\":", userId), ((string)(null)), table25, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "Amount",
                        "DestinationId",
                        "Direction",
                        "UserId",
                        "CurrencyId",
                        "PurseId",
                        "RefundCount"});
            table26.AddRow(new string[] {
                        "10000.00",
                        "WireOut",
                        "out",
                        string.Format("{0}", userId),
                        "Rub",
                        string.Format("{0}", userPurseId),
                        "0"});
            table26.AddRow(new string[] {
                        "10000.00",
                        "WireOut",
                        "in",
                        string.Format("{0}", systemPurseUserId),
                        "Rub",
                        "666698",
                        "0"});
            table26.AddRow(new string[] {
                        "4500.00",
                        "OutBankWireComission",
                        "out",
                        string.Format("{0}", userId),
                        "Rub",
                        string.Format("{0}", userPurseId),
                        "0"});
            table26.AddRow(new string[] {
                        "4500.00",
                        "OutBankWireComission",
                        "in",
                        string.Format("{0}", systemPurseUserId),
                        "Rub",
                        "666698",
                        "0"});
#line 383
   testRunner.Then(string.Format("User selects records in \'TPurseTransactions\' by last OperationGuid where UserId=\"" +
                        "{0}\":", userId), ((string)(null)), table26, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        "CurrencyId",
                        "Direction",
                        "Destination",
                        "UserId",
                        "Amount",
                        "AmountInUsd",
                        "Product",
                        "ProductType"});
            table27.AddRow(new string[] {
                        "Rub",
                        "out",
                        "OutgoingBankWire",
                        string.Format("{0}", userId),
                        "10000.00",
                        "**Generated**",
                        string.Format("000-{0}", userPurseId),
                        "Epid"});
#line 391
 testRunner.Then(string.Format("User selects records in \'LimitRecords\' by last OperationGuid where UserId=\"{0}\":", userId), ((string)(null)), table27, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                        "Scenario",
                        "Status",
                        "IsConfirmedPep"});
            table28.AddRow(new string[] {
                        "BankWireOut",
                        "In process",
                        "false"});
#line 397
 testRunner.Then(string.Format("User selects record in \'SanctionCheck\' where UserId =\"{0}\":", userId), ((string)(null)), table28, "Then ");
#line 403
    testRunner.Then("Send CA true positive callback for reference \'LV10RTMB00000000000016\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 405
 testRunner.Then("User refresh the page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 406
 testRunner.Given("User clicks on Отчеты menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                        "USD",
                        "EUR",
                        "RUB"});
            table29.AddRow(new string[] {
                        "0.00",
                        "0.00",
                        "+14500"});
#line 407
 testRunner.Then("eWallet updated sections are:", ((string)(null)), table29, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                        "Date",
                        "Name",
                        "Amount"});
            table30.AddRow(new string[] {
                        "**DD.MM.YY**",
                        "Банковский перевод",
                        string.Format("₽ {0}", amount)});
            table30.AddRow(new string[] {
                        "**DD.MM.YY**",
                        "Комиссия за исходящий банковский перевод",
                        string.Format("₽ {0}", comission)});
#line 410
 testRunner.Given("User see transactions list contains:", ((string)(null)), table30, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column1",
                        "Column2"});
            table31.AddRow(new string[] {
                        "Транзакция №",
                        "**TPurseTransactionId**"});
            table31.AddRow(new string[] {
                        "Заказ №",
                        "**InvoiceId**"});
            table31.AddRow(new string[] {
                        "Дата",
                        "**dd.MM.yyyy HH:mm**"});
            table31.AddRow(new string[] {
                        "Продукт",
                        "e-Wallet 000-294952"});
            table31.AddRow(new string[] {
                        "Получатель",
                        "HABALV22/LV10RTMB00000000000016"});
            table31.AddRow(new string[] {
                        "Сумма",
                        string.Format("₽ {0}", amount)});
            table31.AddRow(new string[] {
                        "Детали",
                        "Refund: Outgoing bank wire. Beneficiary: ULADZIMIR NAVUMAU, Belarus, Minsk, addre" +
                            "ss1; Account number: LV10RTMB00000000000016; Bank: Sanction fiz bank, HABALV22, " +
                            "Latvia; Correspondent bank: asd, 12312312312, asdasdasd, Austria; Details: {VO99" +
                            "999}, Details"});
#line 415
 testRunner.Given(string.Format("User see statement info for the UserId={0} where DestinationId=\'WireOut\' row № 0 " +
                        "direction=\'in\':", userId), ((string)(null)), table31, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column1",
                        "Column2"});
            table32.AddRow(new string[] {
                        "Транзакция №",
                        "**TPurseTransactionId**"});
            table32.AddRow(new string[] {
                        "Заказ №",
                        "**InvoiceId**"});
            table32.AddRow(new string[] {
                        "Дата",
                        "**dd.MM.yyyy HH:mm**"});
            table32.AddRow(new string[] {
                        "Продукт",
                        "e-Wallet 000-294952"});
            table32.AddRow(new string[] {
                        "Получатель",
                        "HABALV22/LV10RTMB00000000000016"});
            table32.AddRow(new string[] {
                        "Сумма",
                        string.Format("₽ {0}", comission)});
            table32.AddRow(new string[] {
                        "Детали",
                        @"Refund: Commission for outgoing bank wire. Beneficiary: ULADZIMIR NAVUMAU, Belarus, Minsk, address1; Account number: LV10RTMB00000000000016; Bank: Sanction fiz bank, HABALV22, Latvia; Correspondent bank: asd, 12312312312, asdasdasd, Austria; Details: {VO99999}, Details"});
#line 425
 testRunner.Given(string.Format("User see statement info for the UserId={0} where DestinationId=\'OutBankWireComiss" +
                        "ion\' row № 1 direction=\'in\':", userId), ((string)(null)), table32, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                        "OperationTypeId",
                        "Amount",
                        "Fee"});
            table33.AddRow(new string[] {
                        "143",
                        "10000",
                        "4500"});
#line 437
 testRunner.Then("Preparing records in \'InvoicePositions\':", ((string)(null)), table33, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                        "State",
                        "Details",
                        "SenderSystemId",
                        "SenderIdentity",
                        "ReceiverSystemId",
                        "ReceiverIdentity",
                        "CurrencyId",
                        "PaymentSource",
                        "ReceiverIdentityType",
                        "UserId"});
            table34.AddRow(new string[] {
                        "Refunded",
                        "{VO99999}, Details",
                        "WaveCrest",
                        string.Format("000-{0}", userPurseId),
                        "Rietumu",
                        "HABALV22/LV10RTMB00000000000016",
                        "Rub",
                        "EWallet",
                        "Purse",
                        string.Format("{0}", userId)});
#line 440
 testRunner.Then(string.Format("User selects last record in \'Invoices and InvoicePositions\' where UserId=\"{0}\":", userId), ((string)(null)), table34, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                        "Amount",
                        "DestinationId",
                        "Direction",
                        "UserId",
                        "CurrencyId",
                        "PurseId",
                        "RefundCount"});
            table35.AddRow(new string[] {
                        "4500.00",
                        "OutBankWireComission",
                        "out",
                        string.Format("{0}", systemPurseUserId),
                        "Rub",
                        "666698",
                        "1"});
            table35.AddRow(new string[] {
                        "4500.00",
                        "OutBankWireComission",
                        "in",
                        string.Format("{0}", userId),
                        "Rub",
                        string.Format("{0}", userPurseId),
                        "1"});
            table35.AddRow(new string[] {
                        "10000.00",
                        "WireOut",
                        "out",
                        string.Format("{0}", systemPurseUserId),
                        "Rub",
                        "666698",
                        "1"});
            table35.AddRow(new string[] {
                        "10000.00",
                        "WireOut",
                        "in",
                        string.Format("{0}", userId),
                        "Rub",
                        string.Format("{0}", userPurseId),
                        "1"});
#line 446
   testRunner.Then(string.Format("New records appears in \'TPurseTransactions\' for UserId=\"{0}\":", userId), ((string)(null)), table35, "Then ");
#line 453
 testRunner.Then("No records in \'LimitRecords\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 455
 testRunner.Then("No records in \'TExternalTransactions\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                        "Scenario",
                        "Status",
                        "IsConfirmedPep"});
            table36.AddRow(new string[] {
                        "BankWireOut",
                        "Confirmed",
                        "false"});
#line 460
 testRunner.Then(string.Format("User selects record in \'SanctionCheck\' where UserId =\"{0}\":", userId), ((string)(null)), table36, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                        "MessageType",
                        "Priority",
                        "Receiver",
                        "Title"});
            table37.AddRow(new string[] {
                        "Sms",
                        "13",
                        "+70001258785",
                        "-"});
            table37.AddRow(new string[] {
                        "Email",
                        "1",
                        string.Format("{0}", user),
                        "Отчет по операции № **Invoice**"});
#line 464
   testRunner.Then(string.Format("User selects records in table \'Notification\' where UserId=\"{0}\" with \"**Invoice**" +
                        "\" replacing:", userId), ((string)(null)), table37, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("False Positive (Rietumu) Перевод на банковский счет (исх. ваер). Проверка на санк" +
            "ции.")]
        [NUnit.Framework.CategoryAttribute("2566659")]
        [NUnit.Framework.TestCaseAttribute("sb_ind_CC@qa.swiftcom.uk", "a4ac4ef5-c2a7-4d5a-9973-42e73943ec6d", "XSW@zaq11", "10 000.00", "4500.00", "F03ABC6E-25D6-4C98-A06F-A36B9B510BAF", "294952", null)]
        public virtual void FalsePositiveRietumuПереводНаБанковскийСчетИсх_Ваер_ПроверкаНаСанкции_(string user, string userId, string password, string amount, string comission, string systemPurseUserId, string userPurseId, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "2566659"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("False Positive (Rietumu) Перевод на банковский счет (исх. ваер). Проверка на санк" +
                    "ции.", @__tags);
#line 475
 this.ScenarioSetup(scenarioInfo);
#line 483
    testRunner.Given("User goes to SignIn page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 484
 testRunner.Given(string.Format("User signin \"Epayments\" with \"{0}\" password \"{1}\"", user, password), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 485
 testRunner.Given("User see Account Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 486
 testRunner.Then("Memorize eWallet section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 488
 testRunner.Given("User clicks on Перевести menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 489
 testRunner.Given("User clicks on \"На банковский счет\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 491
 testRunner.Then("Section \'Amount including fees\' is: $ 0.00 (Комиссия: $ 0.00)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 493
 testRunner.Then("\'Кошелек\' selector set to \'RUB\' in eWallet section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 494
 testRunner.Then("\'Получатель платежа\' selector set to \'Sanction fiz bank, ULADZIMIR NAVUMAU, LV10R" +
                    "TMB00000000000016\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 495
 testRunner.Then("\'Отдаваемая сумма\' set to \'10000\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 496
 testRunner.Then("\'Получаемая сумма\' value is \'10000.00\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table38 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column1",
                        "Column2"});
            table38.AddRow(new string[] {
                        "Минимальная сумма перевода:",
                        "₽ 6 000.00"});
            table38.AddRow(new string[] {
                        "Максимальная сумма перевода:",
                        "₽ 6 000 000.00"});
            table38.AddRow(new string[] {
                        "Комиссия:",
                        "0.8%min ₽ 4 500, max ₽ 7 500"});
#line 498
 testRunner.Given("User see limits table", ((string)(null)), table38, "Given ");
#line 504
 testRunner.Then("\'Назначение платежа\' details set to \'Details\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 505
 testRunner.Then("\'Код валютной операции (VO)\' set to \'999999\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 507
 testRunner.Then("Section \'Amount including fees\' is: ₽ 14 500.00 (Комиссия: ₽ 4 500.00)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 509
 testRunner.Then("Make screenshot", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 510
 testRunner.Given("User clicks on \"Далее\" on Multiform", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table39 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column1",
                        "Column2"});
            table39.AddRow(new string[] {
                        "Отправитель",
                        string.Format("RUB, e-Wallet 000-{0}", userPurseId)});
            table39.AddRow(new string[] {
                        "Получатель",
                        "Sanction fiz bank, HABALV22, ULADZIMIR NAVUMAU, LV10RTMB00000000000016"});
            table39.AddRow(new string[] {
                        "Отдаваемая сумма",
                        string.Format("₽ {0}", amount)});
            table39.AddRow(new string[] {
                        "Комиссия",
                        "₽ 4 500.00"});
            table39.AddRow(new string[] {
                        "Сумма с комиссией",
                        "₽ 14 500.00"});
            table39.AddRow(new string[] {
                        "Получаемая сумма",
                        string.Format("₽ {0}", amount)});
            table39.AddRow(new string[] {
                        "Назначение платежа",
                        "Details"});
#line 512
 testRunner.Given("User see table", ((string)(null)), table39, "Given ");
#line 521
 testRunner.Then("Make screenshot", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 522
 testRunner.Given("Set StartTime for DB search", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 523
 testRunner.Given("User clicks on \"Подтвердить\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 524
 testRunner.Given("Set StartTime for DB search", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table40 = new TechTalk.SpecFlow.Table(new string[] {
                        "OperationType",
                        "Recipient",
                        "UserId",
                        "IsUsed"});
            table40.AddRow(new string[] {
                        "MassPayment",
                        "+70001258785",
                        string.Format("{0}", userId),
                        "false"});
#line 525
 testRunner.Then("User type SMS sent to:", ((string)(null)), table40, "Then ");
#line 528
 testRunner.Given("User clicks on \"Оплатить\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 529
 testRunner.Given("Set StartTime for DB search", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 531
 testRunner.Then("User gets message \"Обработка платежа займет несколько минут. Дождитесь результата" +
                    " перевода или продолжите работу в личном кабинете\" on Multiform", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 532
 testRunner.Then(@"User gets message ""Платеж зарегистрирован и будет обработан в течение рабочего дня. Как только он будет исполнен банком, в личном кабинете в деталях операции в этом переводе появится Reference Number - дополнительный идентификатор операции в банке"" on Multiform", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table41 = new TechTalk.SpecFlow.Table(new string[] {
                        "Scenario",
                        "Status",
                        "IsConfirmedPep"});
            table41.AddRow(new string[] {
                        "BankWireOut",
                        "InProcess",
                        "false"});
#line 533
 testRunner.Then(string.Format("User selects record in \'SanctionCheck\' where UserId =\"{0}\":", userId), ((string)(null)), table41, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table42 = new TechTalk.SpecFlow.Table(new string[] {
                        "USD",
                        "EUR",
                        "RUB"});
            table42.AddRow(new string[] {
                        "0.00",
                        "0.00",
                        "-14500"});
#line 536
 testRunner.Then("eWallet updated sections are:", ((string)(null)), table42, "Then ");
#line 539
 testRunner.Then("Make screenshot", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 541
 testRunner.Given("User clicks on \"Закрыть\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 542
 testRunner.Then("Redirected to /#/transfer/", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 543
 testRunner.Given("User clicks on Отчеты menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 546
     testRunner.Then(string.Format("Get Invoice for last wire where UserId=\'{0}\'", userId), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table43 = new TechTalk.SpecFlow.Table(new string[] {
                        "Date",
                        "Name",
                        "Amount"});
            table43.AddRow(new string[] {
                        "**DD.MM.YY**",
                        "Комиссия за исходящий банковский перевод",
                        "- ₽ 4 500.00"});
            table43.AddRow(new string[] {
                        "**DD.MM.YY**",
                        "Банковский перевод",
                        string.Format("- ₽ {0}", amount)});
#line 547
  testRunner.Given("User see transactions list contains:", ((string)(null)), table43, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table44 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column1",
                        "Column2"});
            table44.AddRow(new string[] {
                        "Транзакция №",
                        "**TPurseTransactionId**"});
            table44.AddRow(new string[] {
                        "Заказ №",
                        "**InvoiceId**"});
            table44.AddRow(new string[] {
                        "Дата",
                        "**dd.MM.yyyy HH:mm**"});
            table44.AddRow(new string[] {
                        "Продукт",
                        string.Format("e-Wallet 000-{0}", userPurseId)});
            table44.AddRow(new string[] {
                        "Получатель",
                        "HABALV22/LV10RTMB00000000000016"});
            table44.AddRow(new string[] {
                        "Сумма",
                        "₽ 4 500.00"});
            table44.AddRow(new string[] {
                        "Детали",
                        @"Commission for outgoing bank wire. Beneficiary: ULADZIMIR NAVUMAU, Belarus, Minsk, address1; Account number: LV10RTMB00000000000016; Bank: Sanction fiz bank, HABALV22, Latvia; Correspondent bank: asd, 12312312312, asdasdasd, Austria; Details: {VO99999}, Details"});
#line 552
   testRunner.Given(string.Format("User see statement info for the UserId={0} where DestinationId=\'OutBankWireComiss" +
                        "ion\' row № 0 direction=\'out\':", userId), ((string)(null)), table44, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table45 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column1",
                        "Column2"});
            table45.AddRow(new string[] {
                        "Транзакция №",
                        "**TPurseTransactionId**"});
            table45.AddRow(new string[] {
                        "Заказ №",
                        "**InvoiceId**"});
            table45.AddRow(new string[] {
                        "Дата",
                        "**dd.MM.yyyy HH:mm**"});
            table45.AddRow(new string[] {
                        "Продукт",
                        string.Format("e-Wallet 000-{0}", userPurseId)});
            table45.AddRow(new string[] {
                        "Получатель",
                        "HABALV22/LV10RTMB00000000000016"});
            table45.AddRow(new string[] {
                        "Сумма",
                        string.Format("₽ {0}", amount)});
            table45.AddRow(new string[] {
                        "Детали",
                        "Outgoing bank wire. Beneficiary: ULADZIMIR NAVUMAU, Belarus, Minsk, address1; Acc" +
                            "ount number: LV10RTMB00000000000016; Bank: Sanction fiz bank, HABALV22, Latvia; " +
                            "Correspondent bank: asd, 12312312312, asdasdasd, Austria; Details: {VO99999}, De" +
                            "tails"});
#line 563
 testRunner.Given(string.Format("User see statement info for the UserId={0} where DestinationId=\'WireOut\' row № 1 " +
                        "direction=\'out\':", userId), ((string)(null)), table45, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table46 = new TechTalk.SpecFlow.Table(new string[] {
                        "OperationTypeId",
                        "Amount",
                        "Fee"});
            table46.AddRow(new string[] {
                        "143",
                        "10000",
                        "4500"});
#line 575
 testRunner.Then("Preparing records in \'InvoicePositions\':", ((string)(null)), table46, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table47 = new TechTalk.SpecFlow.Table(new string[] {
                        "State",
                        "Details",
                        "SenderSystemId",
                        "SenderIdentity",
                        "ReceiverSystemId",
                        "ReceiverIdentity",
                        "CurrencyId",
                        "PaymentSource",
                        "ReceiverIdentityType",
                        "UserId"});
            table47.AddRow(new string[] {
                        "OnVerification",
                        "{VO99999}, Details",
                        "WaveCrest",
                        string.Format("000-{0}", userPurseId),
                        "Rietumu",
                        "HABALV22/LV10RTMB00000000000016",
                        "Rub",
                        "EWallet",
                        "Purse",
                        string.Format("{0}", userId)});
#line 578
 testRunner.Then(string.Format("User selects last record in \'Invoices and InvoicePositions\' where UserId=\"{0}\":", userId), ((string)(null)), table47, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table48 = new TechTalk.SpecFlow.Table(new string[] {
                        "Amount",
                        "DestinationId",
                        "Direction",
                        "UserId",
                        "CurrencyId",
                        "PurseId",
                        "RefundCount"});
            table48.AddRow(new string[] {
                        "10000.00",
                        "WireOut",
                        "out",
                        string.Format("{0}", userId),
                        "Rub",
                        string.Format("{0}", userPurseId),
                        "0"});
            table48.AddRow(new string[] {
                        "10000.00",
                        "WireOut",
                        "in",
                        string.Format("{0}", systemPurseUserId),
                        "Rub",
                        "666698",
                        "0"});
            table48.AddRow(new string[] {
                        string.Format("{0}", comission),
                        "OutBankWireComission",
                        "out",
                        string.Format("{0}", userId),
                        "Rub",
                        string.Format("{0}", userPurseId),
                        "0"});
            table48.AddRow(new string[] {
                        string.Format("{0}", comission),
                        "OutBankWireComission",
                        "in",
                        string.Format("{0}", systemPurseUserId),
                        "Rub",
                        "666698",
                        "0"});
#line 584
   testRunner.Then(string.Format("User selects records in \'TPurseTransactions\' by last OperationGuid where UserId=\"" +
                        "{0}\":", userId), ((string)(null)), table48, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table49 = new TechTalk.SpecFlow.Table(new string[] {
                        "CurrencyId",
                        "Direction",
                        "Destination",
                        "UserId",
                        "Amount",
                        "AmountInUsd",
                        "Product",
                        "ProductType"});
            table49.AddRow(new string[] {
                        "Rub",
                        "out",
                        "OutgoingBankWire",
                        string.Format("{0}", userId),
                        "10000.00",
                        "**Generated**",
                        string.Format("000-{0}", userPurseId),
                        "Epid"});
#line 592
 testRunner.Then(string.Format("User selects records in \'LimitRecords\' by last OperationGuid where UserId=\"{0}\":", userId), ((string)(null)), table49, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table50 = new TechTalk.SpecFlow.Table(new string[] {
                        "Scenario",
                        "Status",
                        "IsConfirmedPep"});
            table50.AddRow(new string[] {
                        "BankWireOut",
                        "In process",
                        "false"});
#line 598
 testRunner.Then(string.Format("User selects record in \'SanctionCheck\' where UserId =\"{0}\":", userId), ((string)(null)), table50, "Then ");
#line 603
    testRunner.Then("Send CA false positive callback for reference \'LV10RTMB00000000000016\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 605
 testRunner.Then("User refresh the page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 606
 testRunner.Given("User clicks on Отчеты menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table51 = new TechTalk.SpecFlow.Table(new string[] {
                        "USD",
                        "EUR",
                        "RUB"});
            table51.AddRow(new string[] {
                        "0.00",
                        "0.00",
                        "0.00"});
#line 607
 testRunner.Then("eWallet updated sections are:", ((string)(null)), table51, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table52 = new TechTalk.SpecFlow.Table(new string[] {
                        "Date",
                        "Name",
                        "Amount"});
            table52.AddRow(new string[] {
                        "**DD.MM.YY**",
                        "Комиссия за исходящий банковский перевод",
                        "- ₽ 4 500.00"});
            table52.AddRow(new string[] {
                        "**DD.MM.YY**",
                        "Банковский перевод",
                        string.Format("- ₽ {0}", amount)});
#line 610
  testRunner.Given("User see transactions list contains:", ((string)(null)), table52, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table53 = new TechTalk.SpecFlow.Table(new string[] {
                        "OperationTypeId",
                        "Amount",
                        "Fee"});
            table53.AddRow(new string[] {
                        "143",
                        "10000",
                        "4500"});
#line 616
 testRunner.Then("Preparing records in \'InvoicePositions\':", ((string)(null)), table53, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table54 = new TechTalk.SpecFlow.Table(new string[] {
                        "State",
                        "Details",
                        "SenderSystemId",
                        "SenderIdentity",
                        "ReceiverSystemId",
                        "ReceiverIdentity",
                        "CurrencyId",
                        "PaymentSource",
                        "ReceiverIdentityType",
                        "UserId"});
            table54.AddRow(new string[] {
                        "WaitingForManualAdmission",
                        "{VO99999}, Details",
                        "WaveCrest",
                        string.Format("000-{0}", userPurseId),
                        "Rietumu",
                        "HABALV22/LV10RTMB00000000000016",
                        "Rub",
                        "EWallet",
                        "Purse",
                        string.Format("{0}", userId)});
#line 619
 testRunner.Then(string.Format("User selects last record in \'Invoices and InvoicePositions\' where UserId=\"{0}\":", userId), ((string)(null)), table54, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table55 = new TechTalk.SpecFlow.Table(new string[] {
                        "Amount",
                        "DestinationId",
                        "Direction",
                        "UserId",
                        "CurrencyId",
                        "PurseId",
                        "RefundCount"});
            table55.AddRow(new string[] {
                        "10000.00",
                        "WireOut",
                        "out",
                        string.Format("{0}", systemPurseUserId),
                        "Rub",
                        "666698",
                        "0"});
            table55.AddRow(new string[] {
                        "10000.00",
                        "WireOut",
                        "in",
                        string.Format("{0}", systemPurseUserId),
                        "Rub",
                        "1100",
                        "0"});
            table55.AddRow(new string[] {
                        string.Format("{0}", comission),
                        "OutBankWireComission",
                        "out",
                        string.Format("{0}", systemPurseUserId),
                        "Rub",
                        "666698",
                        "0"});
            table55.AddRow(new string[] {
                        string.Format("{0}", comission),
                        "OutBankWireComission",
                        "in",
                        string.Format("{0}", systemPurseUserId),
                        "Rub",
                        "1100",
                        "0"});
#line 625
   testRunner.Then(string.Format("New records appears in \'TPurseTransactions\' for UserId=\"{0}\":", userId), ((string)(null)), table55, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table56 = new TechTalk.SpecFlow.Table(new string[] {
                        "CurrencyId",
                        "Direction",
                        "Destination",
                        "UserId",
                        "Amount",
                        "AmountInUsd",
                        "Product",
                        "ProductType"});
            table56.AddRow(new string[] {
                        "Rub",
                        "out",
                        "OutgoingBankWire",
                        string.Format("{0}", userId),
                        "10000.00",
                        "**Generated**",
                        string.Format("000-{0}", userPurseId),
                        "Epid"});
#line 632
 testRunner.Then(string.Format("User selects records in \'LimitRecords\' by last OperationGuid where UserId=\"{0}\":", userId), ((string)(null)), table56, "Then ");
#line 636
 testRunner.Then("No records in \'TExternalTransactions\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table57 = new TechTalk.SpecFlow.Table(new string[] {
                        "Scenario",
                        "Status",
                        "IsConfirmedPep"});
            table57.AddRow(new string[] {
                        "BankWireOut",
                        "Not Sanctioned",
                        "false"});
#line 641
 testRunner.Then(string.Format("User selects record in \'SanctionCheck\' where UserId =\"{0}\":", userId), ((string)(null)), table57, "Then ");
#line 646
 testRunner.Then(string.Format("Operator close last invoice for UserId={0}", userId), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 647
 testRunner.Given("Reset checkers", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table58 = new TechTalk.SpecFlow.Table(new string[] {
                        "OperationTypeId",
                        "Amount",
                        "Fee"});
            table58.AddRow(new string[] {
                        "143",
                        "10000.00",
                        string.Format("{0}", comission)});
#line 649
 testRunner.Then("Preparing records in \'InvoicePositions\':", ((string)(null)), table58, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table59 = new TechTalk.SpecFlow.Table(new string[] {
                        "State",
                        "Details",
                        "SenderSystemId",
                        "SenderIdentity",
                        "ReceiverSystemId",
                        "ReceiverIdentity",
                        "CurrencyId",
                        "PaymentSource",
                        "ReceiverIdentityType",
                        "UserId"});
            table59.AddRow(new string[] {
                        "Successed",
                        "{VO99999}, Details",
                        "WaveCrest",
                        string.Format("000-{0}", userPurseId),
                        "Rietumu",
                        "HABALV22/LV10RTMB00000000000016",
                        "Rub",
                        "EWallet",
                        "Purse",
                        string.Format("{0}", userId)});
#line 652
 testRunner.Then(string.Format("User selects last record in \'Invoices and InvoicePositions\' where UserId=\"{0}\":", userId), ((string)(null)), table59, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table60 = new TechTalk.SpecFlow.Table(new string[] {
                        "MessageType",
                        "Priority",
                        "Receiver",
                        "Title"});
            table60.AddRow(new string[] {
                        "Email",
                        "1",
                        string.Format("{0}", user),
                        "Отчет по операции № **Invoice**"});
#line 656
 testRunner.Then(string.Format("User selects records in table \'Notification\' where UserId=\"{0}\" with \"**Invoice**" +
                        "\" replacing:", userId), ((string)(null)), table60, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Пополнение по банковским реквизитам. Неопознанный wire (зачисление денег на счет " +
            "клиенту)")]
        [NUnit.Framework.TestCaseAttribute("Qlsebyxguqodvirr", "110.00", "10.00", "35.00", "10.00", "autotest details", "B5DC29B5-A071-4D5D-AE9D-5CECA7151E93", "kyc1nik@qa.swiftcom.uk", "72621010Abacc", "F03ABC6E-25D6-4C98-A06F-A36B9B510BAF", "166879", "99B4BB5F-2BE5-4481-9E78-F2E30339DC88", "406604", "1101", new string[] {
                "349910"}, Category="349910")]
        public virtual void ПополнениеПоБанковскимРеквизитам_НеопознанныйWireЗачислениеДенегНаСчетКлиенту(string reference, string paymentAmount, string bankCharge, string comissionForIdentification, string commissionForWire, string details, string receiverUserId, string user, string password, string systemPurseUserId, string userPurseId, string ePSUserId, string ePS_01Commissions, string ePS_03UndefinedWiresPurse, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Пополнение по банковским реквизитам. Неопознанный wire (зачисление денег на счет " +
                    "клиенту)", exampleTags);
#line 666
 this.ScenarioSetup(scenarioInfo);
#line 675
 testRunner.Given("Set StartTime for DB search", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table61 = new TechTalk.SpecFlow.Table(new string[] {
                        "isUndefined",
                        "reference",
                        "currency",
                        "bankCharge",
                        "ourCharge",
                        "wireServiceId",
                        "paymentAmount",
                        "paymentDetails",
                        "beneficiaryAccountNumber"});
            table61.AddRow(new string[] {
                        "true",
                        string.Format("{0}", reference),
                        "2",
                        "10",
                        "0",
                        "4",
                        "110",
                        string.Format("{0}", details),
                        "000-001101"});
#line 678
 testRunner.Then("Operator creates undefined wire:", ((string)(null)), table61, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table62 = new TechTalk.SpecFlow.Table(new string[] {
                        "Scenario",
                        "Status",
                        "IsConfirmedPep"});
            table62.AddRow(new string[] {
                        "BankWireIn",
                        "Not Sanctioned",
                        "false"});
            table62.AddRow(new string[] {
                        "BankWireIn",
                        "Not Sanctioned",
                        "false"});
#line 683
 testRunner.Then(string.Format("User selects record in \'SanctionCheck\' where UserId =\"{0}\":", systemPurseUserId), ((string)(null)), table62, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table63 = new TechTalk.SpecFlow.Table(new string[] {
                        "BeneficiaryAccountNumber",
                        "ComissionForIdentification",
                        "CommissionForWire",
                        "SourceOfFundsId"});
            table63.AddRow(new string[] {
                        "000-166879",
                        "35",
                        "10",
                        "18"});
#line 688
  testRunner.Then(string.Format("Operator process undefined incoming wire \'{0}\':", systemPurseUserId), ((string)(null)), table63, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table64 = new TechTalk.SpecFlow.Table(new string[] {
                        "Amount",
                        "DestinationId",
                        "Direction",
                        "UserId",
                        "CurrencyId",
                        "PurseId",
                        "RefundCount"});
            table64.AddRow(new string[] {
                        string.Format("{0}", paymentAmount),
                        "Refill",
                        "in",
                        string.Format("{0}", systemPurseUserId),
                        "Eur",
                        string.Format("{0}", ePS_03UndefinedWiresPurse),
                        "0"});
            table64.AddRow(new string[] {
                        string.Format("{0}", bankCharge),
                        "BankComission",
                        "out",
                        string.Format("{0}", ePSUserId),
                        "Eur",
                        string.Format("{0}", ePS_01Commissions),
                        "0"});
            table64.AddRow(new string[] {
                        string.Format("{0}", paymentAmount),
                        "Refill",
                        "out",
                        string.Format("{0}", systemPurseUserId),
                        "Eur",
                        string.Format("{0}", ePS_03UndefinedWiresPurse),
                        "0"});
            table64.AddRow(new string[] {
                        string.Format("{0}", paymentAmount),
                        "Refill",
                        "in",
                        string.Format("{0}", receiverUserId),
                        "Eur",
                        string.Format("{0}", userPurseId),
                        "0"});
            table64.AddRow(new string[] {
                        string.Format("{0}", commissionForWire),
                        "BankWireIncommingCommission",
                        "out",
                        string.Format("{0}", receiverUserId),
                        "Eur",
                        string.Format("{0}", userPurseId),
                        "0"});
            table64.AddRow(new string[] {
                        string.Format("{0}", commissionForWire),
                        "BankWireIncommingCommission",
                        "in",
                        string.Format("{0}", ePSUserId),
                        "Eur",
                        string.Format("{0}", ePS_01Commissions),
                        "0"});
            table64.AddRow(new string[] {
                        string.Format("{0}", comissionForIdentification),
                        "BankWireUndefinedCommission",
                        "out",
                        string.Format("{0}", receiverUserId),
                        "Eur",
                        string.Format("{0}", userPurseId),
                        "0"});
            table64.AddRow(new string[] {
                        string.Format("{0}", comissionForIdentification),
                        "BankWireUndefinedCommission",
                        "in",
                        string.Format("{0}", ePSUserId),
                        "Eur",
                        string.Format("{0}", ePS_01Commissions),
                        "0"});
#line 695
 testRunner.Then("User selects records in \'TPurseTransactions\' for undefined wire:", ((string)(null)), table64, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table65 = new TechTalk.SpecFlow.Table(new string[] {
                        "CurrencyId",
                        "Direction",
                        "Destination",
                        "UserId",
                        "Amount",
                        "AmountInUsd",
                        "Product",
                        "ProductType"});
            table65.AddRow(new string[] {
                        "Eur",
                        "In",
                        "IncomingBankWire",
                        string.Format("{0}", receiverUserId),
                        "75.00",
                        "**Generated**",
                        string.Format("000-{0}", userPurseId),
                        "Epid"});
#line 707
 testRunner.Then(string.Format("User selects records in \'LimitRecords\' by last OperationGuid where UserId=\"{0}\":", receiverUserId), ((string)(null)), table65, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table66 = new TechTalk.SpecFlow.Table(new string[] {
                        "Amount",
                        "CurrencyId",
                        "ExternalServiceId",
                        "IsIncomingTransaction"});
            table66.AddRow(new string[] {
                        string.Format("{0}", paymentAmount),
                        "Eur",
                        "Rietumu",
                        "true"});
            table66.AddRow(new string[] {
                        string.Format("{0}", bankCharge),
                        "Eur",
                        "Rietumu",
                        "false"});
#line 711
 testRunner.Then("User selects records in \'TExternalTransactions\' for UndefinedWire", ((string)(null)), table66, "Then ");
#line 717
 testRunner.Given("User goes to SignIn page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 718
 testRunner.Given(string.Format("User signin \"Epayments\" with \"{0}\" password \"{1}\"", user, password), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 719
 testRunner.Given("User see Account Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 721
 testRunner.Given("User clicks on Отчеты menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table67 = new TechTalk.SpecFlow.Table(new string[] {
                        "Date",
                        "Name",
                        "Amount"});
            table67.AddRow(new string[] {
                        "**DD.MM.YY**",
                        "Комиссия системы за входящий банковский перевод",
                        string.Format("- € {0}", bankCharge)});
            table67.AddRow(new string[] {
                        "**DD.MM.YY**",
                        "Комиссия за обработку банковских переводов с неверными реквизитами или без указан" +
                            "ия e-Wallet в деталях платежа",
                        string.Format("- € {0}", comissionForIdentification)});
            table67.AddRow(new string[] {
                        "**DD.MM.YY**",
                        "Входящий банковский перевод",
                        string.Format("€ {0}", paymentAmount)});
#line 723
 testRunner.Given("User see transactions list contains:", ((string)(null)), table67, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table68 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column1",
                        "Column2"});
            table68.AddRow(new string[] {
                        "Транзакция №",
                        "**TPurseTransactionId**"});
            table68.AddRow(new string[] {
                        "Дата",
                        "**dd.MM.yyyy HH:mm**"});
            table68.AddRow(new string[] {
                        "Продукт",
                        string.Format("e-Wallet 000-{0}", userPurseId)});
            table68.AddRow(new string[] {
                        "Сумма",
                        string.Format("€ {0}", bankCharge)});
            table68.AddRow(new string[] {
                        "Детали",
                        string.Format("Commission for incoming wire. {0}", details)});
#line 730
    testRunner.Given(string.Format("User see statement info for the UserId={0} where DestinationId=\'BankWireIncomming" +
                        "Commission\' row № 0 direction=\'out\' without invoice:", receiverUserId), ((string)(null)), table68, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table69 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column1",
                        "Column2"});
            table69.AddRow(new string[] {
                        "Транзакция №",
                        "**TPurseTransactionId**"});
            table69.AddRow(new string[] {
                        "Дата",
                        "**dd.MM.yyyy HH:mm**"});
            table69.AddRow(new string[] {
                        "Продукт",
                        string.Format("e-Wallet 000-{0}", userPurseId)});
            table69.AddRow(new string[] {
                        "Сумма",
                        string.Format("€ {0}", comissionForIdentification)});
            table69.AddRow(new string[] {
                        "Детали",
                        string.Format("Commission for bank wire {0} with incorrect details", reference)});
#line 738
 testRunner.Given(string.Format("User see statement info for the UserId={0} where DestinationId=\'BankWireUndefined" +
                        "Commission\' row № 1 direction=\'out\' without invoice:", receiverUserId), ((string)(null)), table69, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table70 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column1",
                        "Column2"});
            table70.AddRow(new string[] {
                        "Транзакция №",
                        "**TPurseTransactionId**"});
            table70.AddRow(new string[] {
                        "Дата",
                        "**dd.MM.yyyy HH:mm**"});
            table70.AddRow(new string[] {
                        "Продукт",
                        string.Format("e-Wallet 000-{0}", userPurseId)});
            table70.AddRow(new string[] {
                        "Сумма",
                        string.Format("€ {0}", paymentAmount)});
            table70.AddRow(new string[] {
                        "Детали",
                        string.Format("{0}", details)});
#line 747
 testRunner.Given(string.Format("User see statement info for the UserId={0} where DestinationId=\'Refill\' row № 2 d" +
                        "irection=\'in\' without invoice:", receiverUserId), ((string)(null)), table70, "Given ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Перевод на банковский счет (исх. ваер) через EarthPortLocal. Positive")]
        [NUnit.Framework.TestCaseAttribute("ACNACA2Q/G187LGDH02991304573959", "+70054844135", "4d8814a7-a260-4083-8612-660598ba5f2d", "72621010Abac", "1000.00", "3.00", "1422543", "001-422543", "F03ABC6E-25D6-4C98-A06F-A36B9B510BAF", "99B4BB5F-2BE5-4481-9E78-F2E30339DC88", new string[] {
                "3616273",
                "AutosendWireOut_OFF"}, Category="3616273,AutosendWireOut_OFF")]
        public virtual void ПереводНаБанковскийСчетИсх_ВаерЧерезEarthPortLocal_Positive(string receiver, string user, string userId, string password, string amount, string comission, string shortPurseId, string userPurseId, string systemUserId, string ePSUserId, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Перевод на банковский счет (исх. ваер) через EarthPortLocal. Positive", exampleTags);
#line 768
 this.ScenarioSetup(scenarioInfo);
#line 785
 testRunner.Given("User goes to SignIn page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 786
 testRunner.Given(string.Format("User signin \"Epayments\" with \"{0}\" password \"{1}\"", user, password), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 787
 testRunner.Given("User see Account Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 788
 testRunner.Given("User clicks on Отчеты menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 790
 testRunner.Given("User clicks on Перевести menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 791
 testRunner.Given("User clicks on \"На банковский счет\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 793
 testRunner.Then("Section \'Amount including fees\' is: $ 0.00 (Комиссия: $ 0.00)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 795
 testRunner.Then("\'Страна банка\' UI selector set to \'Канада\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 797
 testRunner.Then("\'Отдаваемая сумма\' set to \'1000\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 798
 testRunner.Then("\'Получаемая сумма\' selector set to \'CAD\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 800
 testRunner.Then("Section \'Amount including fees\' is: $ 1 003.00 (Комиссия: $ 3.00)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table71 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column1",
                        "Column2"});
            table71.AddRow(new string[] {
                        "Минимальная сумма перевода:",
                        "C$ 70.00"});
            table71.AddRow(new string[] {
                        "Максимальная сумма перевода:",
                        "C$ 130 000.00"});
            table71.AddRow(new string[] {
                        "Комиссия:",
                        "$ 3"});
#line 801
 testRunner.Given("User see limits table", ((string)(null)), table71, "Given ");
#line 807
 testRunner.Then("\'Назначение платежа\' details set to \'Details\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 809
 testRunner.Then("\'Название банка\' set to \'Canada bank\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 810
 testRunner.Then("\'SWIFT банка получателя\' set to \'ACNACA2Q\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 811
 testRunner.Then("\'Номер роутинга (ABA RTN)\' set to \'02652004\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 812
 testRunner.Then("\'Номер счета/IBAN\' set to \'G187LGDH02991304573959\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 813
 testRunner.Then("\'Отдаваемая сумма\' set to \'1000\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 815
 testRunner.Then("\'Имя получателя\' set to \'Nikita\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 816
 testRunner.Then("\'Фамилия получателя\' set to \'Ivanov\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 818
 testRunner.Then("\'Страна получателя\' UI selector set to \'Канада\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 819
 testRunner.Then("\'Город получателя\' set to \'Receiver\'s city\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 820
 testRunner.Then("\'Адрес получателя\' set to \'Receiver\'s city Address\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 821
 testRunner.Then("\'Код операции\' UI selector set to \'Payroll\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 822
 testRunner.Then("Currency rate placeholder appears", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 823
 testRunner.Then("Make screenshot", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 824
 testRunner.Given("User clicks on \"Далее\" on Multiform", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table72 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column1",
                        "Column2"});
            table72.AddRow(new string[] {
                        "Отправитель",
                        string.Format("USD, e-Wallet {0}", userPurseId)});
            table72.AddRow(new string[] {
                        "Получатель",
                        "Canada bank, ACNACA2Q, Nikita Ivanov, G187LGDH02991304573959"});
            table72.AddRow(new string[] {
                        "Отдаваемая сумма",
                        "$ 1 000.00"});
            table72.AddRow(new string[] {
                        "Комиссия",
                        "$ 3.00"});
            table72.AddRow(new string[] {
                        "Сумма с комиссией",
                        "$ 1 003.00"});
            table72.AddRow(new string[] {
                        "Курс обмена",
                        "$ 1.00 = C$ **rateWM**"});
            table72.AddRow(new string[] {
                        "Получаемая сумма",
                        "C$ **amount * rate**"});
            table72.AddRow(new string[] {
                        "Назначение платежа",
                        "Details"});
#line 826
 testRunner.Given("User see table", ((string)(null)), table72, "Given ");
#line 836
 testRunner.Given("Set StartTime for DB search", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 838
 testRunner.Given("User clicks on \"Подтвердить\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table73 = new TechTalk.SpecFlow.Table(new string[] {
                        "OperationType",
                        "Recipient",
                        "UserId",
                        "IsUsed"});
            table73.AddRow(new string[] {
                        "MassPayment",
                        string.Format("{0}", user),
                        string.Format("{0}", userId),
                        "false"});
#line 839
 testRunner.Then("User type SMS sent to:", ((string)(null)), table73, "Then ");
#line 842
 testRunner.Given("Set StartTime for DB search", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 844
 testRunner.Given("User clicks on \"Оплатить\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 845
 testRunner.Then("User gets message \"Обработка платежа займет несколько минут. Дождитесь результата" +
                    " перевода или продолжите работу в личном кабинете\" on Multiform", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 846
 testRunner.Then(@"User gets message ""Платеж зарегистрирован и будет обработан в течение рабочего дня. Как только он будет исполнен банком, в личном кабинете в деталях операции в этом переводе появится Reference Number - дополнительный идентификатор операции в банке"" on Multiform", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 847
 testRunner.Given("User clicks on \"Закрыть\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 853
 testRunner.Then("Redirected to /#/transfer/", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 854
 testRunner.Given("User clicks on Отчеты menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table74 = new TechTalk.SpecFlow.Table(new string[] {
                        "Date",
                        "Name",
                        "Amount"});
            table74.AddRow(new string[] {
                        "**DD.MM.YY**",
                        "Комиссия за исходящий банковский перевод",
                        "- $ 3.00"});
            table74.AddRow(new string[] {
                        "**DD.MM.YY**",
                        "Банковский перевод",
                        "- $ 1 000.00"});
#line 855
 testRunner.Given("User see transactions list contains:", ((string)(null)), table74, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table75 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column1",
                        "Column2"});
            table75.AddRow(new string[] {
                        "Транзакция №",
                        "**TPurseTransactionId**"});
            table75.AddRow(new string[] {
                        "Заказ №",
                        "**InvoiceId**"});
            table75.AddRow(new string[] {
                        "Дата",
                        "**dd.MM.yyyy HH:mm**"});
            table75.AddRow(new string[] {
                        "Продукт",
                        string.Format("e-Wallet {0}", userPurseId)});
            table75.AddRow(new string[] {
                        "Получатель",
                        string.Format("{0}", receiver)});
            table75.AddRow(new string[] {
                        "Сумма",
                        "$ 3.00"});
            table75.AddRow(new string[] {
                        "Детали",
                        @"Commission for outgoing bank wire. Beneficiary: Nikita Ivanov, Canada, Receiver's city, Receiver's city Address; Account number: G187LGDH02991304573959; Bank: Canada bank, ACNACA2Q, Canada; Details: Details. Amount transferred to outgoing bank wire: Can$**amount ** rate**, Rate: $1 = Can$**rate**."});
#line 861
   testRunner.Given(string.Format("User see statement info for the UserId={0} where DestinationId=\'OutBankWireComiss" +
                        "ion\' row № 0 direction=\'out\':", userId), ((string)(null)), table75, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table76 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column1",
                        "Column2"});
            table76.AddRow(new string[] {
                        "Транзакция №",
                        "**TPurseTransactionId**"});
            table76.AddRow(new string[] {
                        "Заказ №",
                        "**InvoiceId**"});
            table76.AddRow(new string[] {
                        "Дата",
                        "**dd.MM.yyyy HH:mm**"});
            table76.AddRow(new string[] {
                        "Продукт",
                        string.Format("e-Wallet {0}", userPurseId)});
            table76.AddRow(new string[] {
                        "Получатель",
                        string.Format("{0}", receiver)});
            table76.AddRow(new string[] {
                        "Сумма",
                        "$ 1 000.00"});
            table76.AddRow(new string[] {
                        "Детали",
                        @"Outgoing bank wire. Beneficiary: Nikita Ivanov, Canada, Receiver's city, Receiver's city Address; Account number: G187LGDH02991304573959; Bank: Canada bank, ACNACA2Q, Canada; Details: Details. Amount transferred to outgoing bank wire: Can$**amount ** rate**, Rate: $1 = Can$**rate**."});
#line 872
    testRunner.Given(string.Format("User see statement info for the UserId={0} where DestinationId=\'WireOut\' row № 1 " +
                        "direction=\'out\':", userId), ((string)(null)), table76, "Given ");
#line 883
 testRunner.Then(string.Format("Operator edits bank wire for UserId=\'{0}\' where WireService=\'EarthPortLocal\' and " +
                        "sends to bank", userId), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 885
 testRunner.Then(string.Format("Wait invoice closing with 150 sec timeout for UserId=\"{0}\"", userId), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table77 = new TechTalk.SpecFlow.Table(new string[] {
                        "OperationTypeId",
                        "Amount",
                        "Fee"});
            table77.AddRow(new string[] {
                        "1042",
                        string.Format("{0}", amount),
                        "3.00"});
#line 888
  testRunner.Then("Preparing records in \'InvoicePositions\':", ((string)(null)), table77, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table78 = new TechTalk.SpecFlow.Table(new string[] {
                        "State",
                        "Details",
                        "SenderSystemId",
                        "SenderIdentity",
                        "ReceiverSystemId",
                        "ReceiverIdentity",
                        "CurrencyId",
                        "PaymentSource",
                        "ReceiverIdentityType",
                        "UserId"});
            table78.AddRow(new string[] {
                        "Successed",
                        "Details",
                        "WaveCrest",
                        string.Format("{0}", userPurseId),
                        "EarthPortLocal",
                        string.Format("{0}", receiver),
                        "Usd",
                        "EWallet",
                        "Purse",
                        "4D8814A7-A260-4083-8612-660598BA5F2D"});
#line 892
 testRunner.Then(string.Format("User selects last record in \'Invoices and InvoicePositions\' where UserId=\"{0}\":", userId), ((string)(null)), table78, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table79 = new TechTalk.SpecFlow.Table(new string[] {
                        "Amount",
                        "DestinationId",
                        "Direction",
                        "UserId",
                        "CurrencyId",
                        "PurseId",
                        "RefundCount"});
            table79.AddRow(new string[] {
                        string.Format("{0}", amount),
                        "WireOut",
                        "out",
                        string.Format("{0}", userId),
                        "Usd",
                        string.Format("{0}", shortPurseId),
                        "0"});
            table79.AddRow(new string[] {
                        string.Format("{0}", amount),
                        "WireOut",
                        "in",
                        string.Format("{0}", systemUserId),
                        "Usd",
                        "1100",
                        "0"});
            table79.AddRow(new string[] {
                        string.Format("{0}", comission),
                        "OutBankWireComission",
                        "out",
                        string.Format("{0}", userId),
                        "Usd",
                        string.Format("{0}", shortPurseId),
                        "0"});
            table79.AddRow(new string[] {
                        string.Format("{0}", comission),
                        "OutBankWireComission",
                        "in",
                        string.Format("{0}", systemUserId),
                        "Usd",
                        "1100",
                        "0"});
            table79.AddRow(new string[] {
                        string.Format("{0}", comission),
                        "OutBankWireComission",
                        "out",
                        string.Format("{0}", systemUserId),
                        "Usd",
                        "1100",
                        "0"});
            table79.AddRow(new string[] {
                        string.Format("{0}", comission),
                        "OutBankWireComission",
                        "in",
                        string.Format("{0}", ePSUserId),
                        "Usd",
                        "406604",
                        "0"});
            table79.AddRow(new string[] {
                        "**fxrate**",
                        "WireOut",
                        "out",
                        string.Format("{0}", systemUserId),
                        "Usd",
                        "1100",
                        "0"});
            table79.AddRow(new string[] {
                        "**fxrate2**",
                        "ExternalCurrencyExchangeLoss",
                        "out",
                        string.Format("{0}", ePSUserId),
                        "Usd",
                        "406604",
                        "0"});
            table79.AddRow(new string[] {
                        "**fxrate2**",
                        "ExternalCurrencyExchangeLoss",
                        "in",
                        string.Format("{0}", systemUserId),
                        "Usd",
                        "1100",
                        "0"});
#line 897
      testRunner.Then(string.Format("User selects records in \'TPurseTransactions\' by last OperationGuid where UserId=\"" +
                        "{0}\" for EarthPort with \"{1}\"", userId, systemUserId), ((string)(null)), table79, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table80 = new TechTalk.SpecFlow.Table(new string[] {
                        "CurrencyId",
                        "Direction",
                        "Destination",
                        "UserId",
                        "Amount",
                        "AmountInUsd",
                        "Product",
                        "ProductType"});
            table80.AddRow(new string[] {
                        "Usd",
                        "Out",
                        "OutgoingBankWire",
                        string.Format("{0}", userId),
                        string.Format("{0}", amount),
                        "**Generated**",
                        string.Format("{0}", userPurseId),
                        "Epid"});
#line 909
   testRunner.Then(string.Format("User selects records in \'LimitRecords\' by last OperationGuid where UserId=\"{0}\":", userId), ((string)(null)), table80, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table81 = new TechTalk.SpecFlow.Table(new string[] {
                        "Amount",
                        "CurrencyId",
                        "ExternalServiceId",
                        "IsIncomingTransaction"});
            table81.AddRow(new string[] {
                        "**fxrate2**",
                        "Usd",
                        "EarthPortLocal",
                        "False"});
#line 913
 testRunner.Then("User selects records in \'TExternalTransactions\' by OperationGuid for EarthPort", ((string)(null)), table81, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table82 = new TechTalk.SpecFlow.Table(new string[] {
                        "MessageType",
                        "Priority",
                        "Receiver",
                        "Title"});
            table82.AddRow(new string[] {
                        "Email",
                        "1",
                        "earthporttestui@qa.swiftcom.uk",
                        "Отчет по операции № **Invoice**"});
#line 920
 testRunner.Then(string.Format("User selects records in table \'Notification\' where UserId=\"{0}\" with \"**Invoice**" +
                        "\" replacing:", userId), ((string)(null)), table82, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Перевод на банковский счет (исх. ваер) через EarthPortSwift. Positive")]
        [NUnit.Framework.TestCaseAttribute("AARBDE5W200/GB97XRYD37916294552407", "+70054844135", "4d8814a7-a260-4083-8612-660598ba5f2d", "72621010Abac", "1000.00", "3.00", "1422543", "001-422543", "F03ABC6E-25D6-4C98-A06F-A36B9B510BAF", new string[] {
                "3050381",
                "AutosendWireOut_OFF"}, Category="3050381,AutosendWireOut_OFF")]
        public virtual void ПереводНаБанковскийСчетИсх_ВаерЧерезEarthPortSwift_Positive(string receiver, string user, string userId, string password, string amount, string comission, string shortPurseId, string userPurseId, string systemUserId, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Перевод на банковский счет (исх. ваер) через EarthPortSwift. Positive", exampleTags);
#line 933
 this.ScenarioSetup(scenarioInfo);
#line 947
 testRunner.Given("User goes to SignIn page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 948
 testRunner.Given(string.Format("User signin \"Epayments\" with \"{0}\" password \"{1}\"", user, password), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 949
 testRunner.Given("User see Account Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 950
 testRunner.Given("User clicks on Отчеты menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 952
 testRunner.Given("User clicks on Перевести menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 953
 testRunner.Given("User clicks on \"На банковский счет\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 955
 testRunner.Then("Section \'Amount including fees\' is: $ 0.00 (Комиссия: $ 0.00)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 957
 testRunner.Then("\'Кошелек\' selector set to \'EUR\' in eWallet section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 958
 testRunner.Then("\'Страна банка\' UI selector set to \'Германия\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 960
 testRunner.Then("\'Отдаваемая сумма\' set to \'1000\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 961
 testRunner.Then("\'Получаемая сумма\' selector set to \'USD\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 963
 testRunner.Then("Section \'Amount including fees\' is: € 1 015.00 (Комиссия: € 15.00)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table83 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column1",
                        "Column2"});
            table83.AddRow(new string[] {
                        "Минимальная сумма перевода:",
                        "$ 50.00"});
            table83.AddRow(new string[] {
                        "Максимальная сумма перевода:",
                        "$ 100 000.00"});
            table83.AddRow(new string[] {
                        "Комиссия:",
                        "0.5%min € 15"});
#line 964
 testRunner.Given("User see limits table", ((string)(null)), table83, "Given ");
#line 970
 testRunner.Then("\'Назначение платежа\' details set to \'Details\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 972
 testRunner.Then("\'Название банка\' set to \'Canada bank\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 973
 testRunner.Then("\'SWIFT банка получателя\' set to \'AARBDE5W200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 974
 testRunner.Then("\'Номер счета/IBAN\' set to \'GB97XRYD37916294552407\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 977
 testRunner.Then("\'Имя получателя\' set to \'Nikita\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 978
 testRunner.Then("\'Фамилия получателя\' set to \'Ivanov\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 979
 testRunner.Then("\'Страна получателя\' UI selector set to \'Германия\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 980
 testRunner.Then("\'Город получателя\' set to \'Receiver\'s city\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 981
 testRunner.Then("\'Адрес получателя\' set to \'Receiver\'s city Address\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 983
 testRunner.Then("Currency rate placeholder appears", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 984
 testRunner.Then("Make screenshot", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 985
 testRunner.Given("User clicks on \"Далее\" on Multiform", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table84 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column1",
                        "Column2"});
            table84.AddRow(new string[] {
                        "Отправитель",
                        string.Format("EUR, e-Wallet {0}", userPurseId)});
            table84.AddRow(new string[] {
                        "Получатель",
                        "Canada bank, AARBDE5W200, Nikita Ivanov, GB97XRYD37916294552407"});
            table84.AddRow(new string[] {
                        "Отдаваемая сумма",
                        "€ 1 000.00"});
            table84.AddRow(new string[] {
                        "Комиссия",
                        "€ 15.00"});
            table84.AddRow(new string[] {
                        "Сумма с комиссией",
                        "€ 1 015.00"});
            table84.AddRow(new string[] {
                        "Курс обмена",
                        "€ 1.00 = $ **rateWM**"});
            table84.AddRow(new string[] {
                        "Получаемая сумма",
                        "$ **amount * rate**"});
            table84.AddRow(new string[] {
                        "Назначение платежа",
                        "Details"});
#line 987
 testRunner.Given("User see table", ((string)(null)), table84, "Given ");
#line 997
 testRunner.Given("Set StartTime for DB search", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 999
 testRunner.Given("User clicks on \"Подтвердить\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table85 = new TechTalk.SpecFlow.Table(new string[] {
                        "OperationType",
                        "Recipient",
                        "UserId",
                        "IsUsed"});
            table85.AddRow(new string[] {
                        "MassPayment",
                        string.Format("{0}", user),
                        string.Format("{0}", userId),
                        "false"});
#line 1000
 testRunner.Then("User type SMS sent to:", ((string)(null)), table85, "Then ");
#line 1004
 testRunner.Given("User clicks on \"Оплатить\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 1005
 testRunner.Then("User gets message \"Обработка платежа займет несколько минут. Дождитесь результата" +
                    " перевода или продолжите работу в личном кабинете\" on Multiform", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1006
 testRunner.Then(@"User gets message ""Платеж зарегистрирован и будет обработан в течение рабочего дня. Как только он будет исполнен банком, в личном кабинете в деталях операции в этом переводе появится Reference Number - дополнительный идентификатор операции в банке"" on Multiform", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1007
 testRunner.Given("User clicks on \"Закрыть\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 1009
  testRunner.Then("Wait for transactions loading", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table86 = new TechTalk.SpecFlow.Table(new string[] {
                        "OperationTypeId",
                        "Amount",
                        "Fee"});
            table86.AddRow(new string[] {
                        "1041",
                        string.Format("{0}", amount),
                        "15.00"});
#line 1013
  testRunner.Then("Preparing records in \'InvoicePositions\':", ((string)(null)), table86, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table87 = new TechTalk.SpecFlow.Table(new string[] {
                        "State",
                        "Details",
                        "SenderSystemId",
                        "SenderIdentity",
                        "ReceiverSystemId",
                        "ReceiverIdentity",
                        "CurrencyId",
                        "PaymentSource",
                        "ReceiverIdentityType",
                        "UserId"});
            table87.AddRow(new string[] {
                        "WaitingForManualAdmission",
                        "Details",
                        "WaveCrest",
                        string.Format("{0}", userPurseId),
                        "EarthPortLocal",
                        string.Format("{0}", receiver),
                        "Usd",
                        "EWallet",
                        "Purse",
                        "4D8814A7-A260-4083-8612-660598BA5F2D"});
#line 1017
 testRunner.Then(string.Format("User selects last record in \'Invoices and InvoicePositions\' where UserId=\"{0}\":", userId), ((string)(null)), table87, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table88 = new TechTalk.SpecFlow.Table(new string[] {
                        "Amount",
                        "DestinationId",
                        "Direction",
                        "UserId",
                        "CurrencyId",
                        "PurseId",
                        "RefundCount"});
            table88.AddRow(new string[] {
                        string.Format("{0}", amount),
                        "WireOut",
                        "out",
                        string.Format("{0}", userId),
                        "Usd",
                        string.Format("{0}", shortPurseId),
                        "0"});
            table88.AddRow(new string[] {
                        string.Format("{0}", amount),
                        "WireOut",
                        "in",
                        string.Format("{0}", systemUserId),
                        "Usd",
                        "1100",
                        "0"});
            table88.AddRow(new string[] {
                        string.Format("{0}", comission),
                        "OutBankWireComission",
                        "out",
                        string.Format("{0}", userId),
                        "Usd",
                        string.Format("{0}", shortPurseId),
                        "0"});
            table88.AddRow(new string[] {
                        string.Format("{0}", comission),
                        "OutBankWireComission",
                        "in",
                        string.Format("{0}", systemUserId),
                        "Usd",
                        "1100",
                        "0"});
#line 1022
   testRunner.Then(string.Format("User selects records in \'TPurseTransactions\' by last OperationGuid where UserId=\"" +
                        "{0}\":", userId), ((string)(null)), table88, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table89 = new TechTalk.SpecFlow.Table(new string[] {
                        "CurrencyId",
                        "Direction",
                        "Destination",
                        "UserId",
                        "Amount",
                        "AmountInUsd",
                        "Product",
                        "ProductType"});
            table89.AddRow(new string[] {
                        "Usd",
                        "Out",
                        "OutgoingBankWire",
                        string.Format("{0}", userId),
                        string.Format("{0}", amount),
                        "**Generated**",
                        string.Format("{0}", userPurseId),
                        "Epid"});
#line 1029
   testRunner.Then(string.Format("User selects records in \'LimitRecords\' by last OperationGuid where UserId=\"{0}\":", userId), ((string)(null)), table89, "Then ");
#line 1033
  testRunner.Then("No records in \'TExternalTransactions\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1036
 testRunner.Then("Redirected to /#/transfer/", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1037
 testRunner.Given("User clicks on Отчеты menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table90 = new TechTalk.SpecFlow.Table(new string[] {
                        "Date",
                        "Name",
                        "Amount"});
            table90.AddRow(new string[] {
                        "**DD.MM.YY**",
                        "Комиссия за исходящий банковский перевод",
                        "- $ 3.00"});
            table90.AddRow(new string[] {
                        "**DD.MM.YY**",
                        "Банковский перевод",
                        "- $ 1 000.00"});
#line 1038
 testRunner.Given("User see transactions list contains:", ((string)(null)), table90, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table91 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column1",
                        "Column2"});
            table91.AddRow(new string[] {
                        "Транзакция №",
                        "**TPurseTransactionId**"});
            table91.AddRow(new string[] {
                        "Заказ №",
                        "**InvoiceId**"});
            table91.AddRow(new string[] {
                        "Дата",
                        "**dd.MM.yyyy HH:mm**"});
            table91.AddRow(new string[] {
                        "Продукт",
                        string.Format("e-Wallet {0}", userPurseId)});
            table91.AddRow(new string[] {
                        "Получатель",
                        string.Format("{0}", receiver)});
            table91.AddRow(new string[] {
                        "Сумма",
                        "$ 3.00"});
            table91.AddRow(new string[] {
                        "Детали",
                        @"Commission for outgoing bank wire. Beneficiary: Nikita Ivanov, Canada, Receiver's city, Receiver's city Address; Account number: GB97XRYD37916294552407; Bank: Canada bank, AARBDE5W200, Canada; Details: Details. Amount transferred to outgoing bank wire: Can$**amount ** rate**, Rate: Can$1 = $**wrong rate**."});
#line 1044
   testRunner.Given(string.Format("User see statement info for the UserId={0} where DestinationId=\'OutBankWireComiss" +
                        "ion\' row № 0 direction=\'out\':", userId), ((string)(null)), table91, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table92 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column1",
                        "Column2"});
            table92.AddRow(new string[] {
                        "Транзакция №",
                        "**TPurseTransactionId**"});
            table92.AddRow(new string[] {
                        "Заказ №",
                        "**InvoiceId**"});
            table92.AddRow(new string[] {
                        "Дата",
                        "**dd.MM.yyyy HH:mm**"});
            table92.AddRow(new string[] {
                        "Продукт",
                        string.Format("e-Wallet {0}", userPurseId)});
            table92.AddRow(new string[] {
                        "Получатель",
                        string.Format("{0}", receiver)});
            table92.AddRow(new string[] {
                        "Сумма",
                        "$ 1 000.00"});
            table92.AddRow(new string[] {
                        "Детали",
                        @"Outgoing bank wire. Beneficiary: Nikita Ivanov, Canada, Receiver's city, Receiver's city Address; Account number: GB97XRYD37916294552407; Bank: Canada bank, AARBDE5W200, Canada; Details: Details. Amount transferred to outgoing bank wire: Can$**amount ** rate**, Rate: Can$1 = $**wrong rate**."});
#line 1055
    testRunner.Given(string.Format("User see statement info for the UserId={0} where DestinationId=\'WireOut\' row № 1 " +
                        "direction=\'out\':", userId), ((string)(null)), table92, "Given ");
#line 1066
 testRunner.Then(string.Format("Operator edits bank wire for UserId=\'{0}\' where WireService=\'EarthPortLocal\' and " +
                        "sends to bank", userId), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table93 = new TechTalk.SpecFlow.Table(new string[] {
                        "MessageType",
                        "Priority",
                        "Receiver",
                        "Title"});
            table93.AddRow(new string[] {
                        "Email",
                        "1",
                        "earthporttestui@qa.swiftcom.uk",
                        "Отчет по операции № **Invoice**"});
#line 1069
 testRunner.Then(string.Format("User selects records in table \'Notification\' where UserId=\"{0}\" with \"**Invoice**" +
                        "\" replacing:", userId), ((string)(null)), table93, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion

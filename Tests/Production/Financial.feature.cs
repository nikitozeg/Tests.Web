// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.3.2.0
//      SpecFlow Generator Version:2.3.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ePayments.Tests.Web.Tests.Production
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.2.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Financial")]
    [NUnit.Framework.CategoryAttribute("Financial_production")]
    public partial class FinancialFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Financial.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Financial", null, ProgrammingLanguage.CSharp, new string[] {
                        "Financial_production"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Обмен валют")]
        [NUnit.Framework.CategoryAttribute("3459425")]
        [NUnit.Framework.TestCaseAttribute("sazykin.y@yandex.ru", "000-658262", null)]
        public virtual void ОбменВалют(string user, string purseId, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "3459425"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Обмен валют", @__tags);
#line 5
  this.ScenarioSetup(scenarioInfo);
#line 10
    testRunner.Given("User goes to SignIn page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 11
 testRunner.Given(string.Format("User signin production \"Epayments\" with \"{0}\"", user), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 12
 testRunner.Given("User see Account Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 14
 testRunner.Given("User clicks on Перевести menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 15
 testRunner.Given("User clicks on \"Между своими счетами\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 16
 testRunner.Then("Section \'Amount including fees\' is: $ 0.00 (Комиссия: $ 0.00)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 18
  testRunner.Then("\'Со счета\' selector set to \'USD\' in eWallet section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 19
  testRunner.Then("Section \'Amount including fees\' is: $ 0.00 (Комиссия: $ 0.00)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 20
  testRunner.Then("\'На счет\' selector set to \'EUR\' in eWallet section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 21
  testRunner.Then("Section \'Received amount\' is: € 0.00 (Курс обмена: $ 1.00 = € **rate**)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 22
  testRunner.Then("\'Отдаваемая сумма\' set to \'0.09\' and unfocus", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column1",
                        "Column2"});
            table1.AddRow(new string[] {
                        "Минимальная отдаваемая сумма:",
                        "$ 0.10"});
            table1.AddRow(new string[] {
                        "Максимальная отдаваемая сумма:",
                        "нет"});
#line 23
  testRunner.Given("User see limits table", ((string)(null)), table1, "Given ");
#line 28
  testRunner.Then("Validating message \'Отдаваемая сумма меньше  $ 0.10\' appears on MultiForm", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 29
  testRunner.Then("\'Отдаваемая сумма\' set to \'1000001\' and unfocus", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 30
  testRunner.Then("Validating message \'Отдаваемая сумма превышает баланс\' appears on MultiForm", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 31
  testRunner.Then("\'Со счета\' selector set to \'EUR\' in eWallet section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 32
  testRunner.Then("Section \'Amount including fees\' is: € 0.00 (Комиссия: € 0.00)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Options"});
            table2.AddRow(new string[] {
                        "Выберите счет"});
            table2.AddRow(new string[] {
                        "USD"});
            table2.AddRow(new string[] {
                        "RUB"});
            table2.AddRow(new string[] {
                        "5283 **** 6884,  EUR"});
#line 33
   testRunner.Given("\'На счет\' selector is \"Выберите счет\" and contains:", ((string)(null)), table2, "Given ");
#line 42
  testRunner.Then("\'Со счета\' selector set to \'USD\' in eWallet section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 43
  testRunner.Then("\'На счет\' selector set to \'EUR\' in eWallet section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 44
  testRunner.Then("\'Отдаваемая сумма\' set to \'1.00\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 45
  testRunner.Then("Make screenshot", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 46
  testRunner.Given("User clicks on \"Далее\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column1",
                        "Column2"});
            table3.AddRow(new string[] {
                        "Со счета",
                        string.Format("USD, e-Wallet {0}", purseId)});
            table3.AddRow(new string[] {
                        "На счет",
                        string.Format("EUR, e-Wallet {0}", purseId)});
            table3.AddRow(new string[] {
                        "Курс обмена",
                        "**rate**"});
            table3.AddRow(new string[] {
                        "Отдаваемая сумма",
                        "$ 1.00"});
            table3.AddRow(new string[] {
                        "Получаемая сумма",
                        "€ **amount * rate**"});
#line 47
  testRunner.Given("User see table", ((string)(null)), table3, "Given ");
#line 55
  testRunner.Given("User clicks on \"Назад\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 56
  testRunner.Then("Section \'Received amount\' is: € **amount * rate** (Курс обмена: $ 1.00 = € **rate" +
                    "**)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 57
  testRunner.Given("User clicks on \"Далее\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column1",
                        "Column2"});
            table4.AddRow(new string[] {
                        "Со счета",
                        string.Format("USD, e-Wallet {0}", purseId)});
            table4.AddRow(new string[] {
                        "На счет",
                        string.Format("EUR, e-Wallet {0}", purseId)});
            table4.AddRow(new string[] {
                        "Курс обмена",
                        "**rate**"});
            table4.AddRow(new string[] {
                        "Отдаваемая сумма",
                        "$ 1.00"});
            table4.AddRow(new string[] {
                        "Получаемая сумма",
                        "€ **amount * rate**"});
#line 59
  testRunner.Given("User see table", ((string)(null)), table4, "Given ");
#line 66
  testRunner.Then("Make screenshot", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 67
  testRunner.Given("Set StartTime for DB search", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 68
  testRunner.Given("User clicks on \"Перевести\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 69
  testRunner.Then("Success message \"Обмен валют успешно выполнен×\" appears", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 70
  testRunner.Then("Make screenshot", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column1",
                        "Column2"});
            table5.AddRow(new string[] {
                        "Операция",
                        "Обмен валюты"});
            table5.AddRow(new string[] {
                        "Дата",
                        "**yyyy-MM-dd HH:mm**"});
            table5.AddRow(new string[] {
                        "Статус",
                        "Успешно"});
            table5.AddRow(new string[] {
                        "Со счета",
                        string.Format("USD, e-Wallet {0}", purseId)});
            table5.AddRow(new string[] {
                        "На счет",
                        string.Format("EUR, e-Wallet {0}", purseId)});
            table5.AddRow(new string[] {
                        "Курс обмена",
                        "**rate**"});
            table5.AddRow(new string[] {
                        "Отдаваемая сумма",
                        "$ 1.00"});
            table5.AddRow(new string[] {
                        "Получаемая сумма",
                        "€ **amount * rate**"});
#line 71
  testRunner.Given("User see quittance table", ((string)(null)), table5, "Given ");
#line 82
  testRunner.Given("User clicks on \"Закрыть\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 83
  testRunner.Then("Redirected to /#/transfer/", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 84
  testRunner.Then("Wait for transactions loading", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 85
  testRunner.Given("User clicks on Отчеты menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Date",
                        "Name",
                        "Amount"});
            table6.AddRow(new string[] {
                        "**DD.MM.YY**",
                        "Перевод между секциями кошелька",
                        "€ **amount * rate**"});
            table6.AddRow(new string[] {
                        "**DD.MM.YY**",
                        "Перевод между секциями кошелька",
                        "- $ 1.00"});
#line 86
  testRunner.Given("User see transactions list contains:", ((string)(null)), table6, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column1",
                        "Column2"});
            table7.AddRow(new string[] {
                        "Транзакция №",
                        "**TPurseTransactionId**"});
            table7.AddRow(new string[] {
                        "Дата",
                        "**dd.MM.yyyy HH:mm**"});
            table7.AddRow(new string[] {
                        "Продукт",
                        string.Format("e-Wallet {0}", purseId)});
            table7.AddRow(new string[] {
                        "Сумма",
                        "€ **amount * rate**"});
            table7.AddRow(new string[] {
                        "Детали",
                        "Currency exchange from USD to EUR. Rate = **rate**"});
#line 91
  testRunner.Given("User see statement info for production user where DestinationId=\'CurrencyExchange" +
                    "UsdAndEur\' row № 0 direction=\'in\':", ((string)(null)), table7, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column1",
                        "Column2"});
            table8.AddRow(new string[] {
                        "Транзакция №",
                        "**TPurseTransactionId**"});
            table8.AddRow(new string[] {
                        "Дата",
                        "**dd.MM.yyyy HH:mm**"});
            table8.AddRow(new string[] {
                        "Продукт",
                        string.Format("e-Wallet {0}", purseId)});
            table8.AddRow(new string[] {
                        "Сумма",
                        "$ 1.00"});
            table8.AddRow(new string[] {
                        "Детали",
                        "Currency exchange from USD to EUR. Rate = **rate**"});
#line 99
     testRunner.Given("User see statement info for production user where DestinationId=\'CurrencyExchange" +
                    "UsdAndEur\' row № 1 direction=\'out\':", ((string)(null)), table8, "Given ");
#line 109
 testRunner.Given("User clicks on Перевести menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 110
 testRunner.Given("User clicks on \"Между своими счетами\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 112
 testRunner.Then("\'Со счета\' selector set to \'RUB\' in eWallet section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 113
 testRunner.Then("\'На счет\' selector set to \'EUR\' in eWallet section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 114
 testRunner.Then("Section \'Received amount\' is: € 0.00 (Курс обмена: ₽ 1.00 = € **rate**)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 116
 testRunner.Then("\'Отдаваемая сумма\' set to \'10.00\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 117
 testRunner.Given("User clicks on \"Далее\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column1",
                        "Column2"});
            table9.AddRow(new string[] {
                        "Со счета",
                        string.Format("RUB, e-Wallet {0}", purseId)});
            table9.AddRow(new string[] {
                        "На счет",
                        string.Format("EUR, e-Wallet {0}", purseId)});
            table9.AddRow(new string[] {
                        "Курс обмена",
                        "**rate**"});
            table9.AddRow(new string[] {
                        "Отдаваемая сумма",
                        "₽ 10.00"});
            table9.AddRow(new string[] {
                        "Получаемая сумма",
                        "€ **amount * rate**"});
#line 119
 testRunner.Given("User see table", ((string)(null)), table9, "Given ");
#line 126
 testRunner.Given("Set StartTime for DB search", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 128
 testRunner.Given("User clicks on \"Перевести\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 129
 testRunner.Then("Success message \"Обмен валют успешно выполнен×\" appears", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column1",
                        "Column2"});
            table10.AddRow(new string[] {
                        "Операция",
                        "Обмен валюты"});
            table10.AddRow(new string[] {
                        "Дата",
                        "**yyyy-MM-dd HH:mm**"});
            table10.AddRow(new string[] {
                        "Статус",
                        "Успешно"});
            table10.AddRow(new string[] {
                        "Со счета",
                        string.Format("RUB, e-Wallet {0}", purseId)});
            table10.AddRow(new string[] {
                        "На счет",
                        string.Format("EUR, e-Wallet {0}", purseId)});
            table10.AddRow(new string[] {
                        "Курс обмена",
                        "**rate**"});
            table10.AddRow(new string[] {
                        "Отдаваемая сумма",
                        "₽ 10.00"});
            table10.AddRow(new string[] {
                        "Получаемая сумма",
                        "€ **amount * rate**"});
#line 130
 testRunner.Given("User see quittance table", ((string)(null)), table10, "Given ");
#line 141
 testRunner.Given("User clicks on \"Закрыть\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 142
 testRunner.Then("Redirected to /#/transfer/", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 143
 testRunner.Then("Wait for transactions loading", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 145
 testRunner.Given("User clicks on Отчеты menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Date",
                        "Name",
                        "Amount"});
            table11.AddRow(new string[] {
                        "**DD.MM.YY**",
                        "Перевод между секциями кошелька",
                        "€ **amount * rate**"});
            table11.AddRow(new string[] {
                        "**DD.MM.YY**",
                        "Перевод между секциями кошелька",
                        "- ₽ 10.00"});
#line 146
 testRunner.Given("User see transactions list contains:", ((string)(null)), table11, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column1",
                        "Column2"});
            table12.AddRow(new string[] {
                        "Транзакция №",
                        "**TPurseTransactionId**"});
            table12.AddRow(new string[] {
                        "Дата",
                        "**dd.MM.yyyy HH:mm**"});
            table12.AddRow(new string[] {
                        "Продукт",
                        string.Format("e-Wallet {0}", purseId)});
            table12.AddRow(new string[] {
                        "Сумма",
                        "€ **amount * rate**"});
            table12.AddRow(new string[] {
                        "Детали",
                        "Currency exchange from RUB to EUR. Rate = **rate**"});
#line 152
    testRunner.Given("User see statement info for production user where DestinationId=\'CurrencyExchange" +
                    "UsdAndEur\' row № 0 direction=\'in\':", ((string)(null)), table12, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column1",
                        "Column2"});
            table13.AddRow(new string[] {
                        "Транзакция №",
                        "**TPurseTransactionId**"});
            table13.AddRow(new string[] {
                        "Дата",
                        "**dd.MM.yyyy HH:mm**"});
            table13.AddRow(new string[] {
                        "Продукт",
                        string.Format("e-Wallet {0}", purseId)});
            table13.AddRow(new string[] {
                        "Сумма",
                        "₽ 10.00"});
            table13.AddRow(new string[] {
                        "Детали",
                        "Currency exchange from RUB to EUR. Rate = **rate**"});
#line 160
    testRunner.Given("User see statement info for production user where DestinationId=\'CurrencyExchange" +
                    "UsdAndEur\' row № 1 direction=\'out\':", ((string)(null)), table13, "Given ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion

// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.3.2.0
//      SpecFlow Generator Version:2.3.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ePayments.Tests.Web.Tests.Tools
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.2.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("CardDailyService")]
    [NUnit.Framework.CategoryAttribute("CardDailyService")]
    public partial class CardDailyServiceFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "CardDailyService.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "CardDailyService", null, ProgrammingLanguage.CSharp, new string[] {
                        "CardDailyService"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Списание при достаточности средств на карте")]
        [NUnit.Framework.CategoryAttribute("134954")]
        [NUnit.Framework.TestCaseAttribute("995014", "carddailyserviceUItest@qa.swiftcom.uk", "5fac3887-b8aa-41b5-925c-a4bab828d9b6", "72621010Abac", "170429623", "121121", "2.90", "F03ABC6E-25D6-4C98-A06F-A36B9B510BAF", null)]
        public virtual void СписаниеПриДостаточностиСредствНаКарте(string userPurseId, string user, string userId, string password, string token, string ePS_06Exchanges, string comission, string systemPurseUserId, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "134954"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Списание при достаточности средств на карте", @__tags);
#line 5
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProxyPANCode",
                        "CardServiceExpireAt"});
            table1.AddRow(new string[] {
                        string.Format("{0}", token),
                        "*yesterday-1d time 00.00.00*"});
#line 6
 testRunner.Then("User updates records in table \'Cards\' on \'yesterday-1d time 00.00.00\':", ((string)(null)), table1, "Then ");
#line 10
 testRunner.Given("User goes to SignIn page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 11
 testRunner.Given(string.Format("User signin \"Epayments\" with \"{0}\" password \"{1}\"", user, password), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 12
 testRunner.Then("User clicks on CardAndAccounts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 13
 testRunner.Given("User clicks on \"Обслуживание:\" \"USD\" \'Epayments Cards\' at CardAndAccounts grid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 14
 testRunner.Then("Message \"Обслуживание карты ePayments не оплачено. Для продления обслуживания, по" +
                    "жалуйста, пополните кошелек на сумму в размере $ 2.9\" appears on \"USD\" card", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 15
 testRunner.Then("Memorize eWallet section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 16
 testRunner.Then("Memorize EPACards section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 17
 testRunner.Given("Set StartTime for DB search", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 19
  testRunner.When("User download and executes \"CardMaintenance.DailyService\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 21
 testRunner.Then("User refresh the page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 22
 testRunner.Then("User clicks on CardAndAccounts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 24
 testRunner.Given("User clicks on \"Обслуживание:\" \"USD\" \'Epayments Cards\' at CardAndAccounts grid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "USD",
                        "EUR",
                        "RUB"});
            table2.AddRow(new string[] {
                        "0.00",
                        "0.00",
                        "0.00"});
#line 26
 testRunner.Then("eWallet updated sections are:", ((string)(null)), table2, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "USD",
                        "EUR"});
            table3.AddRow(new string[] {
                        "-2.90",
                        "0.00"});
#line 29
  testRunner.Then("EPA cards updated sections are:", ((string)(null)), table3, "Then ");
#line 33
 testRunner.Then("Message \"Сумма $ 2.9 будет списана автоматически в день окончания обслуживания.\" " +
                    "appears on \"USD\" card", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 34
 testRunner.Then("Message \"Получите следующий месяц обслуживания бесплатно при совершении покупок н" +
                    "а $ 300\" appears on \"USD\" card", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 35
 testRunner.Then("Message \"Сделано покупок на\" appears on \"USD\" card", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 36
 testRunner.Then("Message \"0 / 300 USD\" appears on \"USD\" card", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 37
 testRunner.Then("Scale \"\" appears on \"USD\" card", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "OperationTypeId",
                        "Amount",
                        "Fee"});
            table4.AddRow(new string[] {
                        "65",
                        "0.00",
                        string.Format("{0}", comission)});
#line 41
  testRunner.Then("Preparing records in \'InvoicePositions\':", ((string)(null)), table4, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "State",
                        "Details",
                        "SenderSystemId",
                        "SenderIdentity",
                        "ReceiverSystemId",
                        "ReceiverIdentity",
                        "CurrencyId",
                        "PaymentSource",
                        "ReceiverIdentityType",
                        "UserId"});
            table5.AddRow(new string[] {
                        "Successed",
                        "Service fee for ePayments Card 5283****8028",
                        "WaveCrest",
                        "5283xxxxxxxx8028",
                        "WaveCrest",
                        string.Format("000-{0}", ePS_06Exchanges),
                        "Usd",
                        "Card",
                        "NotRecognized",
                        string.Format("{0}", userId)});
#line 44
  testRunner.Then(string.Format("User selects last record in \'Invoices and InvoicePositions\' where UserId=\"{0}\":", userId), ((string)(null)), table5, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Amount",
                        "DestinationId",
                        "Direction",
                        "UserId",
                        "CurrencyId",
                        "PurseId",
                        "RefundCount"});
            table6.AddRow(new string[] {
                        string.Format("{0}", comission),
                        "CardUnload",
                        "in",
                        string.Format("{0}", userId),
                        "Usd",
                        string.Format("1{0}", userPurseId),
                        "0"});
            table6.AddRow(new string[] {
                        string.Format("{0}", comission),
                        "CardServiceFee",
                        "out",
                        string.Format("{0}", userId),
                        "Usd",
                        string.Format("1{0}", userPurseId),
                        "0"});
            table6.AddRow(new string[] {
                        string.Format("{0}", comission),
                        "CardServiceFee",
                        "in",
                        string.Format("{0}", systemPurseUserId),
                        "Usd",
                        string.Format("{0}", ePS_06Exchanges),
                        "0"});
#line 50
    testRunner.Then(string.Format("New records appears in \'TPurseTransactions\' for UserId=\"{0}\":", userId), ((string)(null)), table6, "Then ");
#line 56
  testRunner.Then("No records in \'LimitRecords\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Amount",
                        "CurrencyId",
                        "ExternalServiceId",
                        "IsIncomingTransaction"});
            table7.AddRow(new string[] {
                        string.Format("{0}", comission),
                        "Usd",
                        "WaveCrest",
                        "true"});
#line 58
 testRunner.Then("User selects records in \'TExternalTransactions\' by OperationGuid", ((string)(null)), table7, "Then ");
#line 65
 testRunner.Given("User clicks on Отчеты menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Date",
                        "Name",
                        "Amount"});
            table8.AddRow(new string[] {
                        "**DD.MM.YY**",
                        "Обслуживание карты ePayments",
                        "- $ 2.90"});
            table8.AddRow(new string[] {
                        "**DD.MM.YY**",
                        "Перевод с карты ePayments",
                        "$ 2.90"});
            table8.AddRow(new string[] {
                        "**DD.MM.YY**",
                        "Корректировка баланса",
                        "- $ 2.90"});
#line 66
 testRunner.Given("User see transactions list contains:", ((string)(null)), table8, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column1",
                        "Column2"});
            table9.AddRow(new string[] {
                        "Транзакция №",
                        "**TPurseTransactionId**"});
            table9.AddRow(new string[] {
                        "Заказ №",
                        "**InvoiceId**"});
            table9.AddRow(new string[] {
                        "Дата",
                        "**dd.MM.yyyy HH:mm**"});
            table9.AddRow(new string[] {
                        "Продукт",
                        string.Format("e-Wallet 001-{0}", userPurseId)});
            table9.AddRow(new string[] {
                        "Получатель",
                        string.Format("000-{0}", ePS_06Exchanges)});
            table9.AddRow(new string[] {
                        "Сумма",
                        "$ 2.90"});
            table9.AddRow(new string[] {
                        "Детали",
                        "Service fee for ePayments Card 5283****8028"});
#line 73
 testRunner.Given(string.Format("User see statement info for the UserId={0} where DestinationId=\'CardServiceFee\' r" +
                        "ow № 0 direction=\'out\':", userId), ((string)(null)), table9, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column1",
                        "Column2"});
            table10.AddRow(new string[] {
                        "Транзакция №",
                        "**TPurseTransactionId**"});
            table10.AddRow(new string[] {
                        "Заказ №",
                        "**InvoiceId**"});
            table10.AddRow(new string[] {
                        "Дата",
                        "**dd.MM.yyyy HH:mm**"});
            table10.AddRow(new string[] {
                        "Продукт",
                        string.Format("e-Wallet 001-{0}", userPurseId)});
            table10.AddRow(new string[] {
                        "Получатель",
                        string.Format("000-{0}", ePS_06Exchanges)});
            table10.AddRow(new string[] {
                        "Сумма",
                        "$ 2.90"});
            table10.AddRow(new string[] {
                        "Детали",
                        "Card unload from ePayments Card 5283****8028"});
#line 83
 testRunner.Given(string.Format("User see statement info for the UserId={0} where DestinationId=\'CardUnload\' row №" +
                        " 1 direction=\'in\':", userId), ((string)(null)), table10, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column1",
                        "Column2"});
            table11.AddRow(new string[] {
                        "Статус",
                        "Подтверждена"});
            table11.AddRow(new string[] {
                        "Транзакция №",
                        "**TXn_ID**"});
            table11.AddRow(new string[] {
                        "Дата",
                        "**dd.MM.yyyy HH:mm**"});
            table11.AddRow(new string[] {
                        "Продукт",
                        "ePayments Card 5283 **** 8028"});
            table11.AddRow(new string[] {
                        "Сумма в валюте карты",
                        "$ 2.90"});
            table11.AddRow(new string[] {
                        "Детали",
                        string.Format("Balance transferred from PAN 5283****8028 to e-Wallet 001-{0} (2.9 USD)", userPurseId)});
#line 93
 testRunner.Given(string.Format("User see statement info for ProxyPANCode=\'{0}\' with last operation row № 2:", token), ((string)(null)), table11, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "MessageType",
                        "Priority",
                        "Receiver",
                        "Title"});
            table12.AddRow(new string[] {
                        "Email",
                        "8",
                        string.Format("{0}", user),
                        "Обслуживание карты ePayments продлено до **date**"});
            table12.AddRow(new string[] {
                        "PushAndroid",
                        "8",
                        "ecAFO1HKm8o:APA91bEWPkpSj7H4ZguawcPhLKZjIPRqDHlsbA6BR394uQ7HAtwGwwpg2UBiUdzY3mzMZ" +
                            "jMHDIAxHqQqruZ95LZGY3rpjssXXkR6hsXVOM_S0gq00NG5bdT22MF5LOMWQ9kM66s2Edw-",
                        "-"});
            table12.AddRow(new string[] {
                        "PushIos",
                        "8",
                        "98a434d54e72c4df41f40a0cdbe362a4bf2a86f9f52ceafd36b7b9573bee2fed",
                        "-"});
#line 104
 testRunner.Then(string.Format("User selects records in table \'Notification\' where UserId=\"{0}\" with \"**date**\" r" +
                        "eplacing:", userId), ((string)(null)), table12, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Списание при достаточности средств на карте - без списания")]
        [NUnit.Framework.CategoryAttribute("3520585")]
        [NUnit.Framework.TestCaseAttribute("carddailyserviceUItest@qa.swiftcom.uk", "5fac3887-b8aa-41b5-925c-a4bab828d9b6", "72621010Abac", "170429623", null)]
        public virtual void СписаниеПриДостаточностиСредствНаКарте_БезСписания(string user, string userId, string password, string token, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "3520585"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Списание при достаточности средств на карте - без списания", @__tags);
#line 119
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProxyPANCode",
                        "CardServiceExpireAt"});
            table13.AddRow(new string[] {
                        string.Format("{0}", token),
                        "*CurrentDate*"});
#line 120
 testRunner.Then("User updates records in table \'Cards\' on \'CurrentDate\':", ((string)(null)), table13, "Then ");
#line 124
 testRunner.Given("User goes to SignIn page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 125
 testRunner.Given(string.Format("User signin \"Epayments\" with \"{0}\" password \"{1}\"", user, password), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 126
 testRunner.Then("User clicks on CardAndAccounts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 127
 testRunner.Given("User clicks on \"Обслуживание:\" \"USD\" \'Epayments Cards\' at CardAndAccounts grid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 128
 testRunner.Then("Message \"Обслуживание:*currentDate*\" with replacing currentDate", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 130
 testRunner.Then("Message \"Сумма $ 2.9 будет списана автоматически в день окончания обслуживания.\" " +
                    "appears on \"USD\" card", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 131
 testRunner.Then("Message \"Получите следующий месяц обслуживания бесплатно при совершении покупок н" +
                    "а $ 300\" appears on \"USD\" card", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 132
 testRunner.Then("Message \"Сделано покупок на\" appears on \"USD\" card", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 133
 testRunner.Then("Message \"0 / 300 USD\" appears on \"USD\" card", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 134
 testRunner.Then("Scale \"\" appears on \"USD\" card", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 136
 testRunner.Then("Memorize eWallet section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 137
 testRunner.Then("Memorize EPACards section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 139
 testRunner.Given("Set StartTime for DB search", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 141
  testRunner.When("User download and executes \"CardMaintenance.DailyService\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 143
 testRunner.Then("User refresh the page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 144
 testRunner.Then("User clicks on CardAndAccounts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 146
 testRunner.Given("User clicks on \"Обслуживание:\" \"USD\" \'Epayments Cards\' at CardAndAccounts grid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "USD",
                        "EUR",
                        "RUB"});
            table14.AddRow(new string[] {
                        "0.00",
                        "0.00",
                        "0.00"});
#line 148
 testRunner.Then("eWallet updated sections are:", ((string)(null)), table14, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "USD",
                        "EUR"});
            table15.AddRow(new string[] {
                        "0.00",
                        "0.00"});
#line 151
  testRunner.Then("EPA cards updated sections are:", ((string)(null)), table15, "Then ");
#line 155
 testRunner.Then("Message \"Сумма $ 2.9 будет списана автоматически в день окончания обслуживания.\" " +
                    "appears on \"USD\" card", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 156
 testRunner.Then("Message \"Получите следующий месяц обслуживания бесплатно при совершении покупок н" +
                    "а $ 300\" appears on \"USD\" card", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 157
 testRunner.Then("Message \"Сделано покупок на\" appears on \"USD\" card", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 158
 testRunner.Then("Message \"0 / 300 USD\" appears on \"USD\" card", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 159
 testRunner.Then("Scale \"\" appears on \"USD\" card", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 161
    testRunner.Then(string.Format("User didn\'t receive Notifications for UserId=\"{0}\"", userId), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Списание при достаточности средств на кошельке")]
        [NUnit.Framework.CategoryAttribute("329216")]
        [NUnit.Framework.TestCaseAttribute("385999", "carddailyserviceUItestFromEwallet@qa.swiftcom.uk", "74f3d92e-f67c-4c19-bef2-5242cb1c3e1c", "72621010Abac", "421802315", "121121", "2.40", "F03ABC6E-25D6-4C98-A06F-A36B9B510BAF", null)]
        public virtual void СписаниеПриДостаточностиСредствНаКошельке(string userPurseId, string user, string userId, string password, string token, string ePS_06Exchanges, string comission, string systemPurseUserId, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "329216"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Списание при достаточности средств на кошельке", @__tags);
#line 170
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProxyPANCode",
                        "CardServiceExpireAt"});
            table16.AddRow(new string[] {
                        string.Format("{0}", token),
                        "*yesterday-1d time 00.00.00*"});
#line 171
 testRunner.Then("User updates records in table \'Cards\' on \'yesterday-1d time 00.00.00\':", ((string)(null)), table16, "Then ");
#line 175
 testRunner.Given("User goes to SignIn page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 176
 testRunner.Given(string.Format("User signin \"Epayments\" with \"{0}\" password \"{1}\"", user, password), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 177
 testRunner.Then("User clicks on CardAndAccounts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 178
 testRunner.Given("User clicks on \"Обслуживание:\" \"EUR\" \'Epayments Cards\' at CardAndAccounts grid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 179
 testRunner.Then("Message \"Обслуживание карты ePayments не оплачено. Для продления обслуживания, по" +
                    "жалуйста, пополните кошелек на сумму в размере € 2.4\" appears on \"EUR\" card", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 181
 testRunner.Then("Memorize eWallet section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 182
 testRunner.Then("Memorize EPACards section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 184
 testRunner.Given("Set StartTime for DB search", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 186
  testRunner.When("User download and executes \"CardMaintenance.DailyService\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 188
 testRunner.Then("User refresh the page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 189
 testRunner.Then("User clicks on CardAndAccounts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 191
 testRunner.Given("User clicks on \"Обслуживание:\" \"EUR\" \'Epayments Cards\' at CardAndAccounts grid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "USD",
                        "EUR",
                        "RUB"});
            table17.AddRow(new string[] {
                        "0.00",
                        "-2.40",
                        "0.00"});
#line 193
 testRunner.Then("eWallet updated sections are:", ((string)(null)), table17, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "USD",
                        "EUR"});
            table18.AddRow(new string[] {
                        "0.00",
                        "0.00"});
#line 196
  testRunner.Then("EPA cards updated sections are:", ((string)(null)), table18, "Then ");
#line 200
 testRunner.Then("Message \"Сумма € 2.4 будет списана автоматически в день окончания обслуживания.\" " +
                    "appears on \"EUR\" card", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 201
 testRunner.Then("Message \"Получите следующий месяц обслуживания бесплатно при совершении покупок н" +
                    "а € 300\" appears on \"EUR\" card", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 202
 testRunner.Then("Message \"Сделано покупок на\" appears on \"EUR\" card", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 203
 testRunner.Then("Message \"0 / 300 EUR\" appears on \"EUR\" card", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 204
 testRunner.Then("Scale \"\" appears on \"EUR\" card", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "OperationTypeId",
                        "Amount",
                        "Fee"});
            table19.AddRow(new string[] {
                        "66",
                        "0.00",
                        string.Format("{0}", comission)});
#line 208
  testRunner.Then("Preparing records in \'InvoicePositions\':", ((string)(null)), table19, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "State",
                        "Details",
                        "SenderSystemId",
                        "SenderIdentity",
                        "ReceiverSystemId",
                        "ReceiverIdentity",
                        "CurrencyId",
                        "PaymentSource",
                        "ReceiverIdentityType",
                        "UserId"});
            table20.AddRow(new string[] {
                        "Successed",
                        "Service fee for ePayments Card 5283****7346",
                        "WaveCrest",
                        string.Format("001-{0}", userPurseId),
                        "WaveCrest",
                        string.Format("000-{0}", ePS_06Exchanges),
                        "Eur",
                        "Ewallet",
                        "NotRecognized",
                        string.Format("{0}", userId)});
#line 211
  testRunner.Then(string.Format("User selects last record in \'Invoices and InvoicePositions\' where UserId=\"{0}\":", userId), ((string)(null)), table20, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "Amount",
                        "DestinationId",
                        "Direction",
                        "UserId",
                        "CurrencyId",
                        "PurseId",
                        "RefundCount"});
            table21.AddRow(new string[] {
                        string.Format("{0}", comission),
                        "CardServiceFee",
                        "out",
                        string.Format("{0}", userId),
                        "Eur",
                        string.Format("1{0}", userPurseId),
                        "0"});
            table21.AddRow(new string[] {
                        string.Format("{0}", comission),
                        "CardServiceFee",
                        "in",
                        string.Format("{0}", systemPurseUserId),
                        "Eur",
                        string.Format("{0}", ePS_06Exchanges),
                        "0"});
#line 217
    testRunner.Then(string.Format("New records appears in \'TPurseTransactions\' for UserId=\"{0}\":", userId), ((string)(null)), table21, "Then ");
#line 222
  testRunner.Then("No records in \'LimitRecords\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 224
  testRunner.Then("No records in \'TExternalTransactions\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 227
 testRunner.Given("User clicks on Отчеты menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "Date",
                        "Name",
                        "Amount"});
            table22.AddRow(new string[] {
                        "**DD.MM.YY**",
                        "Обслуживание карты ePayments",
                        "- € 2.40"});
#line 228
 testRunner.Given("User see transactions list contains:", ((string)(null)), table22, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column1",
                        "Column2"});
            table23.AddRow(new string[] {
                        "Транзакция №",
                        "**TPurseTransactionId**"});
            table23.AddRow(new string[] {
                        "Заказ №",
                        "**InvoiceId**"});
            table23.AddRow(new string[] {
                        "Дата",
                        "**dd.MM.yyyy HH:mm**"});
            table23.AddRow(new string[] {
                        "Продукт",
                        string.Format("e-Wallet 001-{0}", userPurseId)});
            table23.AddRow(new string[] {
                        "Получатель",
                        string.Format("000-{0}", ePS_06Exchanges)});
            table23.AddRow(new string[] {
                        "Сумма",
                        "€ 2.40"});
            table23.AddRow(new string[] {
                        "Детали",
                        "Service fee for ePayments Card 5283****7346"});
#line 233
 testRunner.Given(string.Format("User see statement info for the UserId={0} where DestinationId=\'CardServiceFee\' r" +
                        "ow № 0 direction=\'out\':", userId), ((string)(null)), table23, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "MessageType",
                        "Priority",
                        "Receiver",
                        "Title"});
            table24.AddRow(new string[] {
                        "Email",
                        "8",
                        string.Format("{0}", user),
                        "Обслуживание карты ePayments продлено до **date**"});
            table24.AddRow(new string[] {
                        "PushAndroid",
                        "8",
                        "ecAFO1HKm8o:APA91bEWPkpSj7H4ZguawcPhLKZjIPRqDHlsbA6BR394uQ7HAtwGwwpg2UBiUdzY3mzMZ" +
                            "jMHDIAxHqQqruZ95LZGY3rpjssXXkR6hsXVOM_S0gq00NG5bdT22MF5LOMWQ9kM66s2Edw-",
                        "-"});
            table24.AddRow(new string[] {
                        "PushIos",
                        "8",
                        "98a434d54e72c4df41f40a0cdbe362a4bf2a86f9f52ceafd36b7b9573bee2fed",
                        "-"});
#line 243
 testRunner.Then(string.Format("User selects records in table \'Notification\' where UserId=\"{0}\" with \"**date**\" r" +
                        "eplacing:", userId), ((string)(null)), table24, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Списание при достаточности средств на кошельке - без списания")]
        [NUnit.Framework.CategoryAttribute("3525516")]
        [NUnit.Framework.TestCaseAttribute("385999", "carddailyserviceUItestFromEwallet@qa.swiftcom.uk", "74f3d92e-f67c-4c19-bef2-5242cb1c3e1c", "72621010Abac", "421802315", null)]
        public virtual void СписаниеПриДостаточностиСредствНаКошельке_БезСписания(string userPurseId, string user, string userId, string password, string token, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "3525516"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Списание при достаточности средств на кошельке - без списания", @__tags);
#line 257
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProxyPANCode",
                        "CardServiceExpireAt"});
            table25.AddRow(new string[] {
                        string.Format("{0}", token),
                        "*CurrentDate*"});
#line 258
 testRunner.Then("User updates records in table \'Cards\' on \'CurrentDate\':", ((string)(null)), table25, "Then ");
#line 262
 testRunner.Given("User goes to SignIn page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 263
 testRunner.Given(string.Format("User signin \"Epayments\" with \"{0}\" password \"{1}\"", user, password), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 264
 testRunner.Then("User clicks on CardAndAccounts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 265
 testRunner.Given("User clicks on \"Обслуживание:\" \"EUR\" \'Epayments Cards\' at CardAndAccounts grid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 266
 testRunner.Then("Message \"Сумма € 2.4 будет списана автоматически в день окончания обслуживания.\" " +
                    "appears on \"EUR\" card", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 267
 testRunner.Then("Message \"Получите следующий месяц обслуживания бесплатно при совершении покупок н" +
                    "а € 300\" appears on \"EUR\" card", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 268
 testRunner.Then("Message \"Сделано покупок на\" appears on \"EUR\" card", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 269
 testRunner.Then("Message \"0 / 300 EUR\" appears on \"EUR\" card", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 270
 testRunner.Then("Scale \"\" appears on \"EUR\" card", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 272
 testRunner.Then("Memorize eWallet section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 273
 testRunner.Then("Memorize EPACards section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 275
 testRunner.Given("Set StartTime for DB search", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 277
  testRunner.When("User download and executes \"CardMaintenance.DailyService\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 279
 testRunner.Then("User refresh the page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 280
 testRunner.Then("User clicks on CardAndAccounts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 282
 testRunner.Given("User clicks on \"Обслуживание:\" \"EUR\" \'Epayments Cards\' at CardAndAccounts grid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "USD",
                        "EUR",
                        "RUB"});
            table26.AddRow(new string[] {
                        "0.00",
                        "0.00",
                        "0.00"});
#line 284
 testRunner.Then("eWallet updated sections are:", ((string)(null)), table26, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        "USD",
                        "EUR"});
            table27.AddRow(new string[] {
                        "0.00",
                        "0.00"});
#line 287
  testRunner.Then("EPA cards updated sections are:", ((string)(null)), table27, "Then ");
#line 291
 testRunner.Then("Message \"Сумма € 2.4 будет списана автоматически в день окончания обслуживания.\" " +
                    "appears on \"EUR\" card", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 292
 testRunner.Then("Message \"Получите следующий месяц обслуживания бесплатно при совершении покупок н" +
                    "а € 300\" appears on \"EUR\" card", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 293
 testRunner.Then("Message \"Сделано покупок на\" appears on \"EUR\" card", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 294
 testRunner.Then("Message \"0 / 300 EUR\" appears on \"EUR\" card", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 295
 testRunner.Then("Scale \"\" appears on \"EUR\" card", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 297
    testRunner.Then(string.Format("User didn\'t receive Notifications for UserId=\"{0}\"", userId), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Уведомления о приближении даты списания средств за обслуживание карты")]
        [NUnit.Framework.CategoryAttribute("2147332")]
        [NUnit.Framework.TestCaseAttribute("2147332carddailuservice@qa.swiftcom.uk", "a812ad9a-7b96-4030-8b3a-a3bb641a9043", "72621010Abac", "216613436", null)]
        public virtual void УведомленияОПриближенииДатыСписанияСредствЗаОбслуживаниеКарты(string user, string userId, string password, string token, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "2147332"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Уведомления о приближении даты списания средств за обслуживание карты", @__tags);
#line 306
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProxyPANCode",
                        "CardServiceExpireAt"});
            table28.AddRow(new string[] {
                        string.Format("{0}", token),
                        "*CurrentDate+3days*"});
#line 307
 testRunner.Then("User updates records in table \'Cards\' on \'CurrentDate+3days\':", ((string)(null)), table28, "Then ");
#line 311
 testRunner.Given("User goes to SignIn page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 312
 testRunner.Given(string.Format("User signin \"Epayments\" with \"{0}\" password \"{1}\"", user, password), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 313
 testRunner.Then("User clicks on CardAndAccounts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 314
 testRunner.Given("User clicks on \"Обслуживание:\" \"USD\" \'Epayments Cards\' at CardAndAccounts grid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 315
 testRunner.Then("Message \"Сумма $ 2.9 будет списана автоматически в день окончания обслуживания.\" " +
                    "appears on \"USD\" card", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 316
 testRunner.Then("Message \"Получите следующий месяц обслуживания бесплатно при совершении покупок н" +
                    "а $ 300\" appears on \"USD\" card", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 317
 testRunner.Then("Message \"Сделано покупок на\" appears on \"USD\" card", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 318
 testRunner.Then("Message \"0 / 300 USD\" appears on \"USD\" card", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 319
 testRunner.Then("Scale \"\" appears on \"USD\" card", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 321
 testRunner.Then("Memorize eWallet section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 322
 testRunner.Then("Memorize EPACards section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 324
 testRunner.Given("Set StartTime for DB search", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 328
 testRunner.Then("User refresh the page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 329
 testRunner.Then("User clicks on CardAndAccounts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 331
 testRunner.Given("User clicks on \"Обслуживание:\" \"USD\" \'Epayments Cards\' at CardAndAccounts grid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                        "USD",
                        "EUR",
                        "RUB"});
            table29.AddRow(new string[] {
                        "0.00",
                        "0.00",
                        "0.00"});
#line 333
 testRunner.Then("eWallet updated sections are:", ((string)(null)), table29, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                        "USD",
                        "EUR"});
            table30.AddRow(new string[] {
                        "0.00",
                        "0.00"});
#line 336
  testRunner.Then("EPA cards updated sections are:", ((string)(null)), table30, "Then ");
#line 340
 testRunner.Then("Message \"Сумма $ 2.9 будет списана автоматически в день окончания обслуживания.\" " +
                    "appears on \"USD\" card", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 341
 testRunner.Then("Message \"Получите следующий месяц обслуживания бесплатно при совершении покупок н" +
                    "а $ 300\" appears on \"USD\" card", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 342
 testRunner.Then("Message \"Сделано покупок на\" appears on \"USD\" card", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 343
 testRunner.Then("Message \"0 / 300 USD\" appears on \"USD\" card", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 344
 testRunner.Then("Scale \"\" appears on \"USD\" card", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 346
 testRunner.Then("User clicks on notification ring with count=\'1\' and see text \'Приближается срок с" +
                    "писания платы за обслуживание карты ePayments\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 347
 testRunner.Then("User delete all notification ring and see text \'У вас нет непрочитанных уведомлен" +
                    "ий\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                        "MessageType",
                        "Priority",
                        "Receiver",
                        "Title"});
            table31.AddRow(new string[] {
                        "Email",
                        "8",
                        string.Format("{0}", user),
                        "Приближается срок списания платы за обслуживание карты ePayments"});
            table31.AddRow(new string[] {
                        "PushAndroid",
                        "8",
                        "ecAFO1HKm8o:APA91bEWPkpSj7H4ZguawcPhLKZjIPRqDHlsbA6BR394uQ7HAtwGwwpg2UBiUdzY3mzMZ" +
                            "jMHDIAxHqQqruZ95LZGY3rpjssXXkR6hsXVOM_S0gq00NG5bdT22MF5LOMWQ9kM66s2Edw-",
                        "-"});
            table31.AddRow(new string[] {
                        "PushIos",
                        "8",
                        "98a434d54e72c4df41f40a0cdbe362a4bf2a86f9f52ceafd36b7b9573bee2fed",
                        "-"});
#line 348
 testRunner.Then(string.Format("User selects records in table \'Notification\' for UserId=\"{0}\"", userId), ((string)(null)), table31, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion

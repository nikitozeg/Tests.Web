// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.3.2.0
//      SpecFlow Generator Version:2.3.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ePayments.Tests.Web.Tests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.2.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Merchant")]
    [NUnit.Framework.CategoryAttribute("Merchant")]
    public partial class MerchantFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Merchant.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Merchant", null, ProgrammingLanguage.CSharp, new string[] {
                        "Merchant"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Мерчант. Оплата с кошелька")]
        [NUnit.Framework.TestCaseAttribute("123455", "payment password", "e-Wallet", "merchantUItest@qa.swiftcom.uk", "0.30", "10.00", "baf684f4-04d0-4df8-a175-ebf339e2f2b5", "99B4BB5F-2BE5-4481-9E78-F2E30339DC88", "1698519", "001-698519", "406604", "this is details", new string[] {
                "349934"}, Category="349934")]
        [NUnit.Framework.TestCaseAttribute("+70078471786", "SMS code sent to", "e-Wallet", "merchantBYewalletSMS@qa.swiftcom.uk", "0.30", "10.00", "5cb9fcf6-e987-46e7-b89e-5855b146c2b7", "99B4BB5F-2BE5-4481-9E78-F2E30339DC88", "1442633", "001-442633", "406604", "this is details", new string[] {
                "3254411"}, Category="3254411")]
        public virtual void Мерчант_ОплатаСКошелька(string paymentCodePhone, string paymentWay, string paymentSource, string email, string comission, string amount, string userId, string ePSUserId, string shortUserPurseId, string userPurseId, string ePS_01Commissions, string details, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Мерчант. Оплата с кошелька", exampleTags);
#line 5
this.ScenarioSetup(scenarioInfo);
#line 6
 testRunner.Given("Set StartTime for DB search", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 7
    testRunner.Then(string.Format("User proceed payment in Merchant page with user {0} password 72621010Abac from {1" +
                        "} with amount={2}", email, paymentSource, amount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "OperationType",
                        "Recipient",
                        "UserId",
                        "IsUsed"});
            table1.AddRow(new string[] {
                        "PaymentOperationConfirm",
                        string.Format("{0}", paymentCodePhone),
                        string.Format("{0}", userId),
                        "false"});
#line 9
 testRunner.Then("User type SMS sent to:", ((string)(null)), table1, "Then ");
#line 12
 testRunner.Given("Set StartTime for DB search", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 13
 testRunner.Then(string.Format("Check merchant quittance for amount={0}", amount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 14
  testRunner.Given("User goes to SignIn page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 15
 testRunner.Given(string.Format("User signin \"Epayments\" with \"{0}\" password \"72621010Abac\"", email), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "OperationTypeId",
                        "Amount",
                        "Fee"});
            table2.AddRow(new string[] {
                        "75",
                        string.Format("{0}", amount),
                        "0.00"});
#line 19
 testRunner.Then("Preparing records in \'InvoicePositions\':", ((string)(null)), table2, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "State",
                        "Details",
                        "SenderSystemId",
                        "SenderIdentity",
                        "ReceiverSystemId",
                        "ReceiverIdentity",
                        "CurrencyId",
                        "PaymentSource",
                        "ReceiverIdentityType",
                        "UserId"});
            table3.AddRow(new string[] {
                        "Successed",
                        string.Format("Payment for invoice Yjinqhsxfv from Fix test grupe. Details: {0}", details),
                        "WaveCrest",
                        string.Format("{0}", userPurseId),
                        "WaveCrest",
                        "000-749103",
                        "Usd",
                        "EWallet",
                        "Purse",
                        string.Format("{0}", userId)});
#line 23
 testRunner.Then(string.Format("User selects last record in \'Invoices and InvoicePositions\' where UserId=\"{0}\":", userId), ((string)(null)), table3, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Amount",
                        "DestinationId",
                        "Direction",
                        "UserId",
                        "CurrencyId",
                        "PurseId",
                        "RefundCount"});
            table4.AddRow(new string[] {
                        string.Format("{0}", amount),
                        "MerchantInvoice",
                        "out",
                        string.Format("{0}", userId),
                        "Usd",
                        string.Format("{0}", shortUserPurseId),
                        "0"});
            table4.AddRow(new string[] {
                        string.Format("{0}", amount),
                        "MerchantInvoice",
                        "in",
                        "A85CDDF0-B134-4D95-9FAA-A2471231A594",
                        "Usd",
                        "749103",
                        "0"});
            table4.AddRow(new string[] {
                        string.Format("{0}", comission),
                        "MerchantServiceCommission",
                        "out",
                        "A85CDDF0-B134-4D95-9FAA-A2471231A594",
                        "Usd",
                        "749103",
                        "0"});
            table4.AddRow(new string[] {
                        string.Format("{0}", comission),
                        "MerchantServiceCommission",
                        "in",
                        string.Format("{0}", ePSUserId),
                        "Usd",
                        string.Format("{0}", ePS_01Commissions),
                        "0"});
#line 28
   testRunner.Then(string.Format("User selects records in \'TPurseTransactions\' by last OperationGuid where UserId=\"" +
                        "{0}\":", userId), ((string)(null)), table4, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "CurrencyId",
                        "Direction",
                        "Destination",
                        "UserId",
                        "Amount",
                        "AmountInUsd",
                        "Product",
                        "ProductType"});
            table5.AddRow(new string[] {
                        "Usd",
                        "out",
                        "Merchant",
                        string.Format("{0}", userId),
                        string.Format("{0}", amount),
                        "**Generated**",
                        string.Format("{0}", userPurseId),
                        "Epid"});
            table5.AddRow(new string[] {
                        "Usd",
                        "in",
                        "Merchant",
                        "A85CDDF0-B134-4D95-9FAA-A2471231A594",
                        string.Format("{0}", amount),
                        "**Generated**",
                        "000-749103",
                        "Epid"});
#line 37
 testRunner.Then(string.Format("User selects records in \'LimitRecords\' by last OperationGuid where UserId=\"{0}\":", userId), ((string)(null)), table5, "Then ");
#line 44
 testRunner.Given("User clicks on Отчеты menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Date",
                        "Name",
                        "Amount"});
            table6.AddRow(new string[] {
                        "**DD.MM.YY**",
                        "Оплата товаров и услуг",
                        string.Format("- $ {0}", amount)});
#line 46
 testRunner.Given("User see transactions list contains:", ((string)(null)), table6, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column1",
                        "Column2"});
            table7.AddRow(new string[] {
                        "Транзакция №",
                        "**TPurseTransactionId**"});
            table7.AddRow(new string[] {
                        "Заказ №",
                        "**InvoiceId**"});
            table7.AddRow(new string[] {
                        "Дата",
                        "**dd.MM.yyyy HH:mm**"});
            table7.AddRow(new string[] {
                        "Продукт",
                        string.Format("e-Wallet {0}", userPurseId)});
            table7.AddRow(new string[] {
                        "Получатель",
                        "000-749103"});
            table7.AddRow(new string[] {
                        "Сумма",
                        string.Format("$ {0}", amount)});
            table7.AddRow(new string[] {
                        "Детали",
                        string.Format("Payment for invoice Yjinqhsxfv from Fix test grupe. Details: {0}", details)});
#line 50
    testRunner.Given(string.Format("User see statement info for the UserId={0} where DestinationId=\'MerchantInvoice\' " +
                        "row № 0 direction=\'out\':", userId), ((string)(null)), table7, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "MessageType",
                        "Priority",
                        "Receiver",
                        "Title"});
            table8.AddRow(new string[] {
                        "Email",
                        "7",
                        string.Format("{0}", email),
                        "Оплата инвойса №Yjinqhsxfv от Fix test grupe"});
            table8.AddRow(new string[] {
                        "PushAndroid",
                        "13",
                        "ecAFO1HKm8o:APA91bEWPkpSj7H4ZguawcPhLKZjIPRqDHlsbA6BR394uQ7HAtwGwwpg2UBiUdzY3mzMZ" +
                            "jMHDIAxHqQqruZ95LZGY3rpjssXXkR6hsXVOM_S0gq00NG5bdT22MF5LOMWQ9kM66s2Edw-",
                        "-"});
            table8.AddRow(new string[] {
                        "PushIos",
                        "13",
                        "98a434d54e72c4df41f40a0cdbe362a4bf2a86f9f52ceafd36b7b9573bee2fed",
                        "-"});
#line 60
 testRunner.Then(string.Format("User selects records in table \'Notification\' for UserId=\"{0}\"", userId), ((string)(null)), table8, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "MessageType",
                        "Priority",
                        "Receiver",
                        "Title"});
            table9.AddRow(new string[] {
                        "Email",
                        "7",
                        "partnertest@qa.swiftcom.uk",
                        "Оплата инвойса №Yjinqhsxfv от Fix test grupe"});
#line 65
 testRunner.Then("User selects records in table \'Notification\' for UserId=\"A85CDDF0-B134-4D95-9FAA-" +
                    "A2471231A594\"", ((string)(null)), table9, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Мерчант. Оплата с карты с balance adjustment")]
        [NUnit.Framework.TestCaseAttribute("123455", "payment password", "5283xxxxxxxx4050", "5283****4050", "5283 **** 4050", "146735655", "e-Payments Card:", "merchantPayByCard@qa.swiftcom.uk", "0.15", "5.00", "98bf8ee1-9730-4d61-8742-84ea38f7568f", "99B4BB5F-2BE5-4481-9E78-F2E30339DC88", "1306584", "001-306584", "406604", "this is details", "01ca90dc-98bd-43e8-af90-00240be61c7b", new string[] {
                "349933"}, Category="349933")]
        [NUnit.Framework.TestCaseAttribute("+70035725809", "SMS code sent to", "5283xxxxxxxx5985", "5283****5985", "5283 **** 5985", "146689242", "e-Payments Card:", "merchantSMScard@qa.swiftcom.uk", "0.15", "5.00", "d15cc2ba-0821-4aa9-a197-14462d1682a4", "99B4BB5F-2BE5-4481-9E78-F2E30339DC88", "1509221", "001-509221", "406604", "this is details", "a942cb00-e980-47fc-a6bc-536e36fe36d5", new string[] {
                "3408050"}, Category="3408050")]
        public virtual void Мерчант_ОплатаСКартыСBalanceAdjustment(
                    string paymentCodePhone, 
                    string paymentWay, 
                    string senderIdentity, 
                    string maskedPan, 
                    string maskedPan2, 
                    string proxyPANCode, 
                    string paymentSource, 
                    string email, 
                    string comission, 
                    string amount, 
                    string userId, 
                    string ePSUserId, 
                    string shortUserPurseId, 
                    string userPurseId, 
                    string ePS_01Commissions, 
                    string details, 
                    string product, 
                    string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Мерчант. Оплата с карты с balance adjustment", exampleTags);
#line 84
this.ScenarioSetup(scenarioInfo);
#line 85
 testRunner.Given("Set StartTime for DB search", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 86
    testRunner.Then(string.Format("User proceed payment in Merchant page with user {0} password 72621010Abac from {1" +
                        "} with amount={2}", email, paymentSource, amount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "OperationType",
                        "Recipient",
                        "UserId",
                        "IsUsed"});
            table10.AddRow(new string[] {
                        "PaymentOperationConfirm",
                        string.Format("{0}", paymentCodePhone),
                        string.Format("{0}", userId),
                        "false"});
#line 88
 testRunner.Then("User type SMS sent to:", ((string)(null)), table10, "Then ");
#line 91
  testRunner.Then("Wait because of different server time", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 92
 testRunner.Given("Set StartTime for DB search", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 94
      testRunner.Then("Wait because of different server time", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 95
 testRunner.Then(string.Format("Check merchant quittance for amount={0}", amount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 97
    testRunner.Given("User goes to SignIn page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 98
 testRunner.Given(string.Format("User signin \"Epayments\" with \"{0}\" password \"72621010Abac\"", email), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "OperationTypeId",
                        "Amount",
                        "Fee"});
            table11.AddRow(new string[] {
                        "75",
                        string.Format("{0}", amount),
                        "0.00"});
#line 102
 testRunner.Then("Preparing records in \'InvoicePositions\':", ((string)(null)), table11, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "State",
                        "Details",
                        "SenderSystemId",
                        "SenderIdentity",
                        "ReceiverSystemId",
                        "ReceiverIdentity",
                        "CurrencyId",
                        "PaymentSource",
                        "ReceiverIdentityType",
                        "UserId"});
            table12.AddRow(new string[] {
                        "Successed",
                        string.Format("Payment for invoice Yjinqhsxfv from Fix test grupe. Details: {0}", details),
                        "WaveCrest",
                        string.Format("{0}", senderIdentity),
                        "WaveCrest",
                        "000-749103",
                        "Usd",
                        "Card",
                        "Purse",
                        string.Format("{0}", userId)});
#line 106
 testRunner.Then(string.Format("User selects last record in \'Invoices and InvoicePositions\' where UserId=\"{0}\":", userId), ((string)(null)), table12, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Amount",
                        "DestinationId",
                        "Direction",
                        "UserId",
                        "CurrencyId",
                        "PurseId",
                        "RefundCount"});
            table13.AddRow(new string[] {
                        string.Format("{0}", amount),
                        "CardUnload",
                        "in",
                        string.Format("{0}", userId),
                        "Usd",
                        string.Format("{0}", shortUserPurseId),
                        "0"});
            table13.AddRow(new string[] {
                        string.Format("{0}", amount),
                        "MerchantInvoice",
                        "out",
                        string.Format("{0}", userId),
                        "Usd",
                        string.Format("{0}", shortUserPurseId),
                        "0"});
            table13.AddRow(new string[] {
                        string.Format("{0}", amount),
                        "MerchantInvoice",
                        "in",
                        "A85CDDF0-B134-4D95-9FAA-A2471231A594",
                        "Usd",
                        "749103",
                        "0"});
            table13.AddRow(new string[] {
                        string.Format("{0}", comission),
                        "MerchantServiceCommission",
                        "out",
                        "A85CDDF0-B134-4D95-9FAA-A2471231A594",
                        "Usd",
                        "749103",
                        "0"});
            table13.AddRow(new string[] {
                        string.Format("{0}", comission),
                        "MerchantServiceCommission",
                        "in",
                        string.Format("{0}", ePSUserId),
                        "Usd",
                        string.Format("{0}", ePS_01Commissions),
                        "0"});
#line 111
   testRunner.Then(string.Format("User selects records in \'TPurseTransactions\' by last OperationGuid where UserId=\"" +
                        "{0}\":", userId), ((string)(null)), table13, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "CurrencyId",
                        "Direction",
                        "Destination",
                        "UserId",
                        "Amount",
                        "AmountInUsd",
                        "Product",
                        "ProductType"});
            table14.AddRow(new string[] {
                        "Usd",
                        "out",
                        "Merchant",
                        string.Format("{0}", userId),
                        string.Format("{0}", amount),
                        "**Generated**",
                        string.Format("{0}", product),
                        "Ecard"});
            table14.AddRow(new string[] {
                        "Usd",
                        "in",
                        "Merchant",
                        "A85CDDF0-B134-4D95-9FAA-A2471231A594",
                        string.Format("{0}", amount),
                        "**Generated**",
                        "000-749103",
                        "Epid"});
#line 121
 testRunner.Then(string.Format("User selects records in \'LimitRecords\' by last OperationGuid where UserId=\"{0}\":", userId), ((string)(null)), table14, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Amount",
                        "CurrencyId",
                        "ExternalServiceId",
                        "IsIncomingTransaction"});
            table15.AddRow(new string[] {
                        string.Format("{0}", amount),
                        "Usd",
                        "WaveCrest",
                        "true"});
#line 128
 testRunner.Then("User selects records in \'TExternalTransactions\' by OperationGuid", ((string)(null)), table15, "Then ");
#line 134
 testRunner.Given("User clicks on Отчеты menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Date",
                        "Name",
                        "Amount"});
            table16.AddRow(new string[] {
                        "**DD.MM.YY**",
                        "Оплата товаров и услуг",
                        string.Format("- $ {0}", amount)});
            table16.AddRow(new string[] {
                        "**DD.MM.YY**",
                        "Перевод с карты ePayments",
                        string.Format("$ {0}", amount)});
            table16.AddRow(new string[] {
                        "**DD.MM.YY**",
                        "Корректировка баланса",
                        string.Format("- $ {0}", amount)});
#line 136
 testRunner.Given("User see transactions list contains:", ((string)(null)), table16, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column1",
                        "Column2"});
            table17.AddRow(new string[] {
                        "Транзакция №",
                        "**TPurseTransactionId**"});
            table17.AddRow(new string[] {
                        "Заказ №",
                        "**InvoiceId**"});
            table17.AddRow(new string[] {
                        "Дата",
                        "**dd.MM.yyyy HH:mm**"});
            table17.AddRow(new string[] {
                        "Продукт",
                        string.Format("e-Wallet {0}", userPurseId)});
            table17.AddRow(new string[] {
                        "Получатель",
                        "000-749103"});
            table17.AddRow(new string[] {
                        "Сумма",
                        string.Format("$ {0}", amount)});
            table17.AddRow(new string[] {
                        "Детали",
                        string.Format("Payment for invoice Yjinqhsxfv from Fix test grupe. Details: {0}", details)});
#line 142
    testRunner.Given(string.Format("User see statement info for the UserId={0} where DestinationId=\'MerchantInvoice\' " +
                        "row № 0 direction=\'out\':", userId), ((string)(null)), table17, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column1",
                        "Column2"});
            table18.AddRow(new string[] {
                        "Транзакция №",
                        "**TPurseTransactionId**"});
            table18.AddRow(new string[] {
                        "Заказ №",
                        "**InvoiceId**"});
            table18.AddRow(new string[] {
                        "Дата",
                        "**dd.MM.yyyy HH:mm**"});
            table18.AddRow(new string[] {
                        "Продукт",
                        string.Format("e-Wallet {0}", userPurseId)});
            table18.AddRow(new string[] {
                        "Получатель",
                        "000-749103"});
            table18.AddRow(new string[] {
                        "Сумма",
                        string.Format("$ {0}", amount)});
            table18.AddRow(new string[] {
                        "Детали",
                        string.Format("Card unload from ePayments Card {0}", maskedPan)});
#line 152
   testRunner.Given(string.Format("User see statement info for the UserId={0} where DestinationId=\'CardUnload\' row №" +
                        " 1 direction=\'in\':", userId), ((string)(null)), table18, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column1",
                        "Column2"});
            table19.AddRow(new string[] {
                        "Статус",
                        "Подтверждена"});
            table19.AddRow(new string[] {
                        "Транзакция №",
                        "**TXn_ID**"});
            table19.AddRow(new string[] {
                        "Дата",
                        "**dd.MM.yyyy HH:mm**"});
            table19.AddRow(new string[] {
                        "Продукт",
                        string.Format("ePayments Card {0}", maskedPan2)});
            table19.AddRow(new string[] {
                        "Сумма в валюте карты",
                        string.Format("$ {0}", amount)});
            table19.AddRow(new string[] {
                        "Детали",
                        string.Format("Balance transferred from PAN {0} to e-Wallet {1} (5 USD)", maskedPan, userPurseId)});
#line 163
        testRunner.Given(string.Format("User see statement info for ProxyPANCode=\'{0}\' with last operation row № 2:", proxyPANCode), ((string)(null)), table19, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "MessageType",
                        "Priority",
                        "Receiver",
                        "Title"});
            table20.AddRow(new string[] {
                        "Email",
                        "7",
                        string.Format("{0}", email),
                        "Оплата инвойса №Yjinqhsxfv от Fix test grupe"});
            table20.AddRow(new string[] {
                        "PushAndroid",
                        "13",
                        "ecAFO1HKm8o:APA91bEWPkpSj7H4ZguawcPhLKZjIPRqDHlsbA6BR394uQ7HAtwGwwpg2UBiUdzY3mzMZ" +
                            "jMHDIAxHqQqruZ95LZGY3rpjssXXkR6hsXVOM_S0gq00NG5bdT22MF5LOMWQ9kM66s2Edw-",
                        "-"});
            table20.AddRow(new string[] {
                        "PushIos",
                        "13",
                        "98a434d54e72c4df41f40a0cdbe362a4bf2a86f9f52ceafd36b7b9573bee2fed",
                        "-"});
#line 172
 testRunner.Then(string.Format("User selects records in table \'Notification\' for UserId=\"{0}\"", userId), ((string)(null)), table20, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "MessageType",
                        "Priority",
                        "Receiver",
                        "Title"});
            table21.AddRow(new string[] {
                        "Email",
                        "7",
                        "partnertest@qa.swiftcom.uk",
                        "Оплата инвойса №Yjinqhsxfv от Fix test grupe"});
#line 178
 testRunner.Then("User selects records in table \'Notification\' for UserId=\"A85CDDF0-B134-4D95-9FAA-" +
                    "A2471231A594\"", ((string)(null)), table21, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Мерчант. Оплата с карты подтверждение PUSH с CardUnload")]
        [NUnit.Framework.TestCaseAttribute("ACAD9156-4BF3-426F-A730-2E84822C7CC0", "PUSH code", "5283xxxxxxxx6653", "5283****6653", "5283 **** 6653", "167715278", "e-Payments Card:", "merchantFromCardByPush@qa.swiftcom.uk", "0.30", "10.01", "2af80ae0-768e-4750-8766-04b87a034ab7", "99B4BB5F-2BE5-4481-9E78-F2E30339DC88", "1880879", "001-880879", "406604", "this is details", "dfb95fa2-9267-4f44-a92b-059679110f0e", new string[] {
                "3459409"}, Category="3459409")]
        public virtual void Мерчант_ОплатаСКартыПодтверждениеPUSHСCardUnload(
                    string paymentCodePhone, 
                    string paymentWay, 
                    string senderIdentity, 
                    string maskedPan, 
                    string maskedPan2, 
                    string proxyPANCode, 
                    string paymentSource, 
                    string email, 
                    string comission, 
                    string amount, 
                    string userId, 
                    string ePSUserId, 
                    string shortUserPurseId, 
                    string userPurseId, 
                    string ePS_01Commissions, 
                    string details, 
                    string product, 
                    string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Мерчант. Оплата с карты подтверждение PUSH с CardUnload", exampleTags);
#line 199
this.ScenarioSetup(scenarioInfo);
#line 200
 testRunner.Given("Set StartTime for DB search", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 201
    testRunner.Then(string.Format("User proceed payment in Merchant page with user {0} password 72621010Abac from {1" +
                        "} with amount={2}", email, paymentSource, amount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "OperationType",
                        "Recipient",
                        "UserId",
                        "IsUsed"});
            table22.AddRow(new string[] {
                        "PaymentOperationConfirm",
                        string.Format("{0}", paymentCodePhone),
                        string.Format("{0}", userId),
                        "false"});
#line 191
 testRunner.Then("User type PushCode sent to:", ((string)(null)), table22, "Then ");
#line 194
  testRunner.Then("Wait because of different server time", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 207
 testRunner.Given("Set StartTime for DB search", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 209
 testRunner.Then(string.Format("Check merchant quittance for amount={0}", amount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 211
    testRunner.Given("User goes to SignIn page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 212
 testRunner.Given(string.Format("User signin \"Epayments\" with \"{0}\" password \"72621010Abac\"", email), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "OperationTypeId",
                        "Amount",
                        "Fee"});
            table23.AddRow(new string[] {
                        "75",
                        string.Format("{0}", amount),
                        "0.00"});
#line 216
 testRunner.Then("Preparing records in \'InvoicePositions\':", ((string)(null)), table23, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "State",
                        "Details",
                        "SenderSystemId",
                        "SenderIdentity",
                        "ReceiverSystemId",
                        "ReceiverIdentity",
                        "CurrencyId",
                        "PaymentSource",
                        "ReceiverIdentityType",
                        "UserId"});
            table24.AddRow(new string[] {
                        "Successed",
                        string.Format("Payment for invoice Yjinqhsxfv from Fix test grupe. Details: {0}", details),
                        "WaveCrest",
                        string.Format("{0}", senderIdentity),
                        "WaveCrest",
                        "000-749103",
                        "Usd",
                        "Card",
                        "Purse",
                        string.Format("{0}", userId)});
#line 220
 testRunner.Then(string.Format("User selects last record in \'Invoices and InvoicePositions\' where UserId=\"{0}\":", userId), ((string)(null)), table24, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "Amount",
                        "DestinationId",
                        "Direction",
                        "UserId",
                        "CurrencyId",
                        "PurseId",
                        "RefundCount"});
            table25.AddRow(new string[] {
                        string.Format("{0}", amount),
                        "CardUnload",
                        "in",
                        string.Format("{0}", userId),
                        "Usd",
                        string.Format("{0}", shortUserPurseId),
                        "0"});
            table25.AddRow(new string[] {
                        string.Format("{0}", amount),
                        "MerchantInvoice",
                        "out",
                        string.Format("{0}", userId),
                        "Usd",
                        string.Format("{0}", shortUserPurseId),
                        "0"});
            table25.AddRow(new string[] {
                        string.Format("{0}", amount),
                        "MerchantInvoice",
                        "in",
                        "A85CDDF0-B134-4D95-9FAA-A2471231A594",
                        "Usd",
                        "749103",
                        "0"});
            table25.AddRow(new string[] {
                        string.Format("{0}", comission),
                        "MerchantServiceCommission",
                        "out",
                        "A85CDDF0-B134-4D95-9FAA-A2471231A594",
                        "Usd",
                        "749103",
                        "0"});
            table25.AddRow(new string[] {
                        string.Format("{0}", comission),
                        "MerchantServiceCommission",
                        "in",
                        string.Format("{0}", ePSUserId),
                        "Usd",
                        string.Format("{0}", ePS_01Commissions),
                        "0"});
#line 225
   testRunner.Then(string.Format("User selects records in \'TPurseTransactions\' by last OperationGuid where UserId=\"" +
                        "{0}\":", userId), ((string)(null)), table25, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "CurrencyId",
                        "Direction",
                        "Destination",
                        "UserId",
                        "Amount",
                        "AmountInUsd",
                        "Product",
                        "ProductType"});
            table26.AddRow(new string[] {
                        "Usd",
                        "out",
                        "Merchant",
                        string.Format("{0}", userId),
                        string.Format("{0}", amount),
                        "**Generated**",
                        string.Format("{0}", product),
                        "Ecard"});
            table26.AddRow(new string[] {
                        "Usd",
                        "in",
                        "Merchant",
                        "A85CDDF0-B134-4D95-9FAA-A2471231A594",
                        string.Format("{0}", amount),
                        "**Generated**",
                        "000-749103",
                        "Epid"});
#line 235
 testRunner.Then(string.Format("User selects records in \'LimitRecords\' by last OperationGuid where UserId=\"{0}\":", userId), ((string)(null)), table26, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        "Amount",
                        "CurrencyId",
                        "ExternalServiceId",
                        "IsIncomingTransaction"});
            table27.AddRow(new string[] {
                        string.Format("{0}", amount),
                        "Usd",
                        "WaveCrest",
                        "true"});
#line 242
 testRunner.Then("User selects records in \'TExternalTransactions\' by OperationGuid", ((string)(null)), table27, "Then ");
#line 248
 testRunner.Given("User clicks on Отчеты menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                        "Date",
                        "Name",
                        "Amount"});
            table28.AddRow(new string[] {
                        "**DD.MM.YY**",
                        "Оплата товаров и услуг",
                        string.Format("- $ {0}", amount)});
            table28.AddRow(new string[] {
                        "**DD.MM.YY**",
                        "Перевод с карты ePayments",
                        string.Format("$ {0}", amount)});
#line 250
 testRunner.Given("User see transactions list contains:", ((string)(null)), table28, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column1",
                        "Column2"});
            table29.AddRow(new string[] {
                        "Транзакция №",
                        "**TPurseTransactionId**"});
            table29.AddRow(new string[] {
                        "Заказ №",
                        "**InvoiceId**"});
            table29.AddRow(new string[] {
                        "Дата",
                        "**dd.MM.yyyy HH:mm**"});
            table29.AddRow(new string[] {
                        "Продукт",
                        string.Format("e-Wallet {0}", userPurseId)});
            table29.AddRow(new string[] {
                        "Получатель",
                        "000-749103"});
            table29.AddRow(new string[] {
                        "Сумма",
                        string.Format("$ {0}", amount)});
            table29.AddRow(new string[] {
                        "Детали",
                        string.Format("Payment for invoice Yjinqhsxfv from Fix test grupe. Details: {0}", details)});
#line 255
    testRunner.Given(string.Format("User see statement info for the UserId={0} where DestinationId=\'MerchantInvoice\' " +
                        "row № 0 direction=\'out\':", userId), ((string)(null)), table29, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column1",
                        "Column2"});
            table30.AddRow(new string[] {
                        "Транзакция №",
                        "**TPurseTransactionId**"});
            table30.AddRow(new string[] {
                        "Заказ №",
                        "**InvoiceId**"});
            table30.AddRow(new string[] {
                        "Дата",
                        "**dd.MM.yyyy HH:mm**"});
            table30.AddRow(new string[] {
                        "Продукт",
                        string.Format("e-Wallet {0}", userPurseId)});
            table30.AddRow(new string[] {
                        "Получатель",
                        "000-749103"});
            table30.AddRow(new string[] {
                        "Сумма",
                        string.Format("$ {0}", amount)});
            table30.AddRow(new string[] {
                        "Детали",
                        string.Format("Card unload from ePayments Card {0}", maskedPan)});
#line 265
   testRunner.Given(string.Format("User see statement info for the UserId={0} where DestinationId=\'CardUnload\' row №" +
                        " 1 direction=\'in\':", userId), ((string)(null)), table30, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                        "MessageType",
                        "Priority",
                        "Receiver",
                        "Title"});
            table31.AddRow(new string[] {
                        "Email",
                        "7",
                        string.Format("{0}", email),
                        "Оплата инвойса №Yjinqhsxfv от Fix test grupe"});
            table31.AddRow(new string[] {
                        "PushAndroid",
                        "13",
                        "ecAFO1HKm8o:APA91bEWPkpSj7H4ZguawcPhLKZjIPRqDHlsbA6BR394uQ7HAtwGwwpg2UBiUdzY3mzMZ" +
                            "jMHDIAxHqQqruZ95LZGY3rpjssXXkR6hsXVOM_S0gq00NG5bdT22MF5LOMWQ9kM66s2Edw-",
                        "-"});
            table31.AddRow(new string[] {
                        "PushIos",
                        "13",
                        "98a434d54e72c4df41f40a0cdbe362a4bf2a86f9f52ceafd36b7b9573bee2fed",
                        "-"});
#line 276
 testRunner.Then(string.Format("User selects records in table \'Notification\' for UserId=\"{0}\"", userId), ((string)(null)), table31, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                        "MessageType",
                        "Priority",
                        "Receiver",
                        "Title"});
            table32.AddRow(new string[] {
                        "Email",
                        "7",
                        "partnertest@qa.swiftcom.uk",
                        "Оплата инвойса №Yjinqhsxfv от Fix test grupe"});
#line 282
 testRunner.Then("User selects records in table \'Notification\' for UserId=\"A85CDDF0-B134-4D95-9FAA-" +
                    "A2471231A594\"", ((string)(null)), table32, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
